
TW10S_Distance_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000363c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003860  08003860  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003860  08003860  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003860  08003860  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  080038d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080038d8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c7e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017af  00000000  00000000  00027d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  000294c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  00029be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017100  00000000  00000000  0002a230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000068c5  00000000  00000000  00041330  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082467  00000000  00000000  00047bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca05c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fcc  00000000  00000000  000ca0d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003730 	.word	0x08003730

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003730 	.word	0x08003730

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2f>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000900:	bf24      	itt	cs
 8000902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090a:	d90d      	bls.n	8000928 <__aeabi_d2f+0x30>
 800090c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800091c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000920:	bf08      	it	eq
 8000922:	f020 0001 	biceq.w	r0, r0, #1
 8000926:	4770      	bx	lr
 8000928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800092c:	d121      	bne.n	8000972 <__aeabi_d2f+0x7a>
 800092e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000932:	bfbc      	itt	lt
 8000934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000938:	4770      	bxlt	lr
 800093a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000942:	f1c2 0218 	rsb	r2, r2, #24
 8000946:	f1c2 0c20 	rsb	ip, r2, #32
 800094a:	fa10 f30c 	lsls.w	r3, r0, ip
 800094e:	fa20 f002 	lsr.w	r0, r0, r2
 8000952:	bf18      	it	ne
 8000954:	f040 0001 	orrne.w	r0, r0, #1
 8000958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000960:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000964:	ea40 000c 	orr.w	r0, r0, ip
 8000968:	fa23 f302 	lsr.w	r3, r3, r2
 800096c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000970:	e7cc      	b.n	800090c <__aeabi_d2f+0x14>
 8000972:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000976:	d107      	bne.n	8000988 <__aeabi_d2f+0x90>
 8000978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800097c:	bf1e      	ittt	ne
 800097e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000986:	4770      	bxne	lr
 8000988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800098c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_fmul>:
 8000998:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800099c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009a0:	bf1e      	ittt	ne
 80009a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009a6:	ea92 0f0c 	teqne	r2, ip
 80009aa:	ea93 0f0c 	teqne	r3, ip
 80009ae:	d06f      	beq.n	8000a90 <__aeabi_fmul+0xf8>
 80009b0:	441a      	add	r2, r3
 80009b2:	ea80 0c01 	eor.w	ip, r0, r1
 80009b6:	0240      	lsls	r0, r0, #9
 80009b8:	bf18      	it	ne
 80009ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009be:	d01e      	beq.n	80009fe <__aeabi_fmul+0x66>
 80009c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009cc:	fba0 3101 	umull	r3, r1, r0, r1
 80009d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009d8:	bf3e      	ittt	cc
 80009da:	0049      	lslcc	r1, r1, #1
 80009dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009e0:	005b      	lslcc	r3, r3, #1
 80009e2:	ea40 0001 	orr.w	r0, r0, r1
 80009e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009ea:	2afd      	cmp	r2, #253	; 0xfd
 80009ec:	d81d      	bhi.n	8000a2a <__aeabi_fmul+0x92>
 80009ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f6:	bf08      	it	eq
 80009f8:	f020 0001 	biceq.w	r0, r0, #1
 80009fc:	4770      	bx	lr
 80009fe:	f090 0f00 	teq	r0, #0
 8000a02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a06:	bf08      	it	eq
 8000a08:	0249      	lsleq	r1, r1, #9
 8000a0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a12:	3a7f      	subs	r2, #127	; 0x7f
 8000a14:	bfc2      	ittt	gt
 8000a16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a1e:	4770      	bxgt	lr
 8000a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	3a01      	subs	r2, #1
 8000a2a:	dc5d      	bgt.n	8000ae8 <__aeabi_fmul+0x150>
 8000a2c:	f112 0f19 	cmn.w	r2, #25
 8000a30:	bfdc      	itt	le
 8000a32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a36:	4770      	bxle	lr
 8000a38:	f1c2 0200 	rsb	r2, r2, #0
 8000a3c:	0041      	lsls	r1, r0, #1
 8000a3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a42:	f1c2 0220 	rsb	r2, r2, #32
 8000a46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a4e:	f140 0000 	adc.w	r0, r0, #0
 8000a52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a56:	bf08      	it	eq
 8000a58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a5c:	4770      	bx	lr
 8000a5e:	f092 0f00 	teq	r2, #0
 8000a62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a66:	bf02      	ittt	eq
 8000a68:	0040      	lsleq	r0, r0, #1
 8000a6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a6e:	3a01      	subeq	r2, #1
 8000a70:	d0f9      	beq.n	8000a66 <__aeabi_fmul+0xce>
 8000a72:	ea40 000c 	orr.w	r0, r0, ip
 8000a76:	f093 0f00 	teq	r3, #0
 8000a7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a7e:	bf02      	ittt	eq
 8000a80:	0049      	lsleq	r1, r1, #1
 8000a82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a86:	3b01      	subeq	r3, #1
 8000a88:	d0f9      	beq.n	8000a7e <__aeabi_fmul+0xe6>
 8000a8a:	ea41 010c 	orr.w	r1, r1, ip
 8000a8e:	e78f      	b.n	80009b0 <__aeabi_fmul+0x18>
 8000a90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a94:	ea92 0f0c 	teq	r2, ip
 8000a98:	bf18      	it	ne
 8000a9a:	ea93 0f0c 	teqne	r3, ip
 8000a9e:	d00a      	beq.n	8000ab6 <__aeabi_fmul+0x11e>
 8000aa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000aa4:	bf18      	it	ne
 8000aa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aaa:	d1d8      	bne.n	8000a5e <__aeabi_fmul+0xc6>
 8000aac:	ea80 0001 	eor.w	r0, r0, r1
 8000ab0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f090 0f00 	teq	r0, #0
 8000aba:	bf17      	itett	ne
 8000abc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	f091 0f00 	teqne	r1, #0
 8000ac6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aca:	d014      	beq.n	8000af6 <__aeabi_fmul+0x15e>
 8000acc:	ea92 0f0c 	teq	r2, ip
 8000ad0:	d101      	bne.n	8000ad6 <__aeabi_fmul+0x13e>
 8000ad2:	0242      	lsls	r2, r0, #9
 8000ad4:	d10f      	bne.n	8000af6 <__aeabi_fmul+0x15e>
 8000ad6:	ea93 0f0c 	teq	r3, ip
 8000ada:	d103      	bne.n	8000ae4 <__aeabi_fmul+0x14c>
 8000adc:	024b      	lsls	r3, r1, #9
 8000ade:	bf18      	it	ne
 8000ae0:	4608      	movne	r0, r1
 8000ae2:	d108      	bne.n	8000af6 <__aeabi_fmul+0x15e>
 8000ae4:	ea80 0001 	eor.w	r0, r0, r1
 8000ae8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af4:	4770      	bx	lr
 8000af6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000afa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_fdiv>:
 8000b00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b08:	bf1e      	ittt	ne
 8000b0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b0e:	ea92 0f0c 	teqne	r2, ip
 8000b12:	ea93 0f0c 	teqne	r3, ip
 8000b16:	d069      	beq.n	8000bec <__aeabi_fdiv+0xec>
 8000b18:	eba2 0203 	sub.w	r2, r2, r3
 8000b1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b20:	0249      	lsls	r1, r1, #9
 8000b22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b26:	d037      	beq.n	8000b98 <__aeabi_fdiv+0x98>
 8000b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	bf38      	it	cc
 8000b3c:	005b      	lslcc	r3, r3, #1
 8000b3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b46:	428b      	cmp	r3, r1
 8000b48:	bf24      	itt	cs
 8000b4a:	1a5b      	subcs	r3, r3, r1
 8000b4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b54:	bf24      	itt	cs
 8000b56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b62:	bf24      	itt	cs
 8000b64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b70:	bf24      	itt	cs
 8000b72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b7a:	011b      	lsls	r3, r3, #4
 8000b7c:	bf18      	it	ne
 8000b7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b82:	d1e0      	bne.n	8000b46 <__aeabi_fdiv+0x46>
 8000b84:	2afd      	cmp	r2, #253	; 0xfd
 8000b86:	f63f af50 	bhi.w	8000a2a <__aeabi_fmul+0x92>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ba0:	327f      	adds	r2, #127	; 0x7f
 8000ba2:	bfc2      	ittt	gt
 8000ba4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ba8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bac:	4770      	bxgt	lr
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	3a01      	subs	r2, #1
 8000bb8:	e737      	b.n	8000a2a <__aeabi_fmul+0x92>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bc2:	bf02      	ittt	eq
 8000bc4:	0040      	lsleq	r0, r0, #1
 8000bc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bca:	3a01      	subeq	r2, #1
 8000bcc:	d0f9      	beq.n	8000bc2 <__aeabi_fdiv+0xc2>
 8000bce:	ea40 000c 	orr.w	r0, r0, ip
 8000bd2:	f093 0f00 	teq	r3, #0
 8000bd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bda:	bf02      	ittt	eq
 8000bdc:	0049      	lsleq	r1, r1, #1
 8000bde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000be2:	3b01      	subeq	r3, #1
 8000be4:	d0f9      	beq.n	8000bda <__aeabi_fdiv+0xda>
 8000be6:	ea41 010c 	orr.w	r1, r1, ip
 8000bea:	e795      	b.n	8000b18 <__aeabi_fdiv+0x18>
 8000bec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bf0:	ea92 0f0c 	teq	r2, ip
 8000bf4:	d108      	bne.n	8000c08 <__aeabi_fdiv+0x108>
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	f47f af7d 	bne.w	8000af6 <__aeabi_fmul+0x15e>
 8000bfc:	ea93 0f0c 	teq	r3, ip
 8000c00:	f47f af70 	bne.w	8000ae4 <__aeabi_fmul+0x14c>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e776      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c08:	ea93 0f0c 	teq	r3, ip
 8000c0c:	d104      	bne.n	8000c18 <__aeabi_fdiv+0x118>
 8000c0e:	024b      	lsls	r3, r1, #9
 8000c10:	f43f af4c 	beq.w	8000aac <__aeabi_fmul+0x114>
 8000c14:	4608      	mov	r0, r1
 8000c16:	e76e      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c1c:	bf18      	it	ne
 8000c1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c22:	d1ca      	bne.n	8000bba <__aeabi_fdiv+0xba>
 8000c24:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c28:	f47f af5c 	bne.w	8000ae4 <__aeabi_fmul+0x14c>
 8000c2c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c30:	f47f af3c 	bne.w	8000aac <__aeabi_fmul+0x114>
 8000c34:	e75f      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c36:	bf00      	nop

08000c38 <StringToFloat>:
TW10S_Struct tw10s;
extern UART_HandleTypeDef huart1;

/* Convert String To Float Function */
float StringToFloat(char *str)
{
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	float result = 0.0;
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
	int len = strlen(str);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fa80 	bl	800014c <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60bb      	str	r3, [r7, #8]
	int dotPosition = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
	for(int i=0;i<len;i++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e030      	b.n	8000cbc <StringToFloat+0x84>
	{
		if(str[i] == '.')
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b2e      	cmp	r3, #46	; 0x2e
 8000c64:	d105      	bne.n	8000c72 <StringToFloat+0x3a>
		{
			dotPosition = len - i - 1;
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	e021      	b.n	8000cb6 <StringToFloat+0x7e>
		}
		else
		{
			result = result * 10.0 + (str[i] - '0');
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff fbd6 	bl	8000424 <__aeabi_f2d>
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <StringToFloat+0xb0>)
 8000c7e:	f7ff fc29 	bl	80004d4 <__aeabi_dmul>
 8000c82:	4603      	mov	r3, r0
 8000c84:	460c      	mov	r4, r1
 8000c86:	4625      	mov	r5, r4
 8000c88:	461c      	mov	r4, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	4413      	add	r3, r2
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	3b30      	subs	r3, #48	; 0x30
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fbb3 	bl	8000400 <__aeabi_i2d>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	f7ff fa61 	bl	8000168 <__adddf3>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460c      	mov	r4, r1
 8000caa:	4618      	mov	r0, r3
 8000cac:	4621      	mov	r1, r4
 8000cae:	f7ff fe23 	bl	80008f8 <__aeabi_d2f>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	617b      	str	r3, [r7, #20]
	for(int i=0;i<len;i++)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbca      	blt.n	8000c5a <StringToFloat+0x22>
		}
	}
	while(dotPosition --)
 8000cc4:	e005      	b.n	8000cd2 <StringToFloat+0x9a>
	{
		result /= 10.0;
 8000cc6:	4909      	ldr	r1, [pc, #36]	; (8000cec <StringToFloat+0xb4>)
 8000cc8:	6978      	ldr	r0, [r7, #20]
 8000cca:	f7ff ff19 	bl	8000b00 <__aeabi_fdiv>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	617b      	str	r3, [r7, #20]
	while(dotPosition --)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1e5a      	subs	r2, r3, #1
 8000cd6:	613a      	str	r2, [r7, #16]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f4      	bne.n	8000cc6 <StringToFloat+0x8e>
	}
	return result;
 8000cdc:	697b      	ldr	r3, [r7, #20]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40240000 	.word	0x40240000
 8000cec:	41200000 	.word	0x41200000

08000cf0 <TW10S_deleteBuffer>:


void TW10S_deleteBuffer(char* buffer)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	tw10s.count = 0;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <TW10S_deleteBuffer+0x3c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	765a      	strb	r2, [r3, #25]
	for(int i=0;i<strlen(buffer);i++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	e007      	b.n	8000d14 <TW10S_deleteBuffer+0x24>
	{
		buffer[i] = 0;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<strlen(buffer);i++)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fa19 	bl	800014c <strlen>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d8f0      	bhi.n	8000d04 <TW10S_deleteBuffer+0x14>
	}

}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000098 	.word	0x20000098

08000d30 <TW10S_sendCommand>:

uint8_t TW10S_sendCommand(char* command, char* response, uint32_t timeout)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	uint8_t result = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	77fb      	strb	r3, [r7, #31]
	TW10S_deleteBuffer((char*)&tw10s.buffer);
 8000d40:	483e      	ldr	r0, [pc, #248]	; (8000e3c <TW10S_sendCommand+0x10c>)
 8000d42:	f7ff ffd5 	bl	8000cf0 <TW10S_deleteBuffer>
	uint32_t time = HAL_GetTick();
 8000d46:	f000 fccd 	bl	80016e4 <HAL_GetTick>
 8000d4a:	61b8      	str	r0, [r7, #24]
	uint32_t time1 = HAL_GetTick();
 8000d4c:	f000 fcca 	bl	80016e4 <HAL_GetTick>
 8000d50:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), 2000);
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff f9fa 	bl	800014c <strlen>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d60:	68f9      	ldr	r1, [r7, #12]
 8000d62:	4837      	ldr	r0, [pc, #220]	; (8000e40 <TW10S_sendCommand+0x110>)
 8000d64:	f001 fc49 	bl	80025fa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",strlen("\r\n"),2000);
 8000d68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	4935      	ldr	r1, [pc, #212]	; (8000e44 <TW10S_sendCommand+0x114>)
 8000d70:	4833      	ldr	r0, [pc, #204]	; (8000e40 <TW10S_sendCommand+0x110>)
 8000d72:	f001 fc42 	bl	80025fa <HAL_UART_Transmit>
	while(result == 0)
 8000d76:	e059      	b.n	8000e2c <TW10S_sendCommand+0xfc>
	{
		while(HAL_UART_Receive(&huart1, tw10s.rx_data,1,1000) != HAL_OK)
		{
			if(HAL_GetTick() - time > timeout)
 8000d78:	f000 fcb4 	bl	80016e4 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d201      	bcs.n	8000d8c <TW10S_sendCommand+0x5c>
			{
				return 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e053      	b.n	8000e34 <TW10S_sendCommand+0x104>
		while(HAL_UART_Receive(&huart1, tw10s.rx_data,1,1000) != HAL_OK)
 8000d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d90:	2201      	movs	r2, #1
 8000d92:	492d      	ldr	r1, [pc, #180]	; (8000e48 <TW10S_sendCommand+0x118>)
 8000d94:	482a      	ldr	r0, [pc, #168]	; (8000e40 <TW10S_sendCommand+0x110>)
 8000d96:	f001 fcc2 	bl	800271e <HAL_UART_Receive>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1eb      	bne.n	8000d78 <TW10S_sendCommand+0x48>
			}
		}
		time = HAL_GetTick();
 8000da0:	f000 fca0 	bl	80016e4 <HAL_GetTick>
 8000da4:	61b8      	str	r0, [r7, #24]
		tw10s.buffer[tw10s.count++] = tw10s.rx_data[0];
 8000da6:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <TW10S_sendCommand+0x11c>)
 8000da8:	7e5b      	ldrb	r3, [r3, #25]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	b2d1      	uxtb	r1, r2
 8000dae:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <TW10S_sendCommand+0x11c>)
 8000db0:	7651      	strb	r1, [r2, #25]
 8000db2:	4619      	mov	r1, r3
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <TW10S_sendCommand+0x11c>)
 8000db6:	791a      	ldrb	r2, [r3, #4]
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <TW10S_sendCommand+0x11c>)
 8000dba:	440b      	add	r3, r1
 8000dbc:	715a      	strb	r2, [r3, #5]
		while(HAL_GetTick() - time < timeout)
 8000dbe:	e02d      	b.n	8000e1c <TW10S_sendCommand+0xec>
		{
			if(HAL_UART_Receive(&huart1, tw10s.rx_data, 1, 1000) == HAL_OK)
 8000dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4920      	ldr	r1, [pc, #128]	; (8000e48 <TW10S_sendCommand+0x118>)
 8000dc8:	481d      	ldr	r0, [pc, #116]	; (8000e40 <TW10S_sendCommand+0x110>)
 8000dca:	f001 fca8 	bl	800271e <HAL_UART_Receive>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10f      	bne.n	8000df4 <TW10S_sendCommand+0xc4>
			{
				tw10s.buffer[tw10s.count++] = tw10s.rx_data[0];
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <TW10S_sendCommand+0x11c>)
 8000dd6:	7e5b      	ldrb	r3, [r3, #25]
 8000dd8:	1c5a      	adds	r2, r3, #1
 8000dda:	b2d1      	uxtb	r1, r2
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <TW10S_sendCommand+0x11c>)
 8000dde:	7651      	strb	r1, [r2, #25]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <TW10S_sendCommand+0x11c>)
 8000de4:	791a      	ldrb	r2, [r3, #4]
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <TW10S_sendCommand+0x11c>)
 8000de8:	440b      	add	r3, r1
 8000dea:	715a      	strb	r2, [r3, #5]
				time1 = HAL_GetTick();
 8000dec:	f000 fc7a 	bl	80016e4 <HAL_GetTick>
 8000df0:	6178      	str	r0, [r7, #20]
 8000df2:	e013      	b.n	8000e1c <TW10S_sendCommand+0xec>
			}
			else
			{
				if(HAL_GetTick() - time1 > 100)
 8000df4:	f000 fc76 	bl	80016e4 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d90c      	bls.n	8000e1c <TW10S_sendCommand+0xec>
				{
					if(strstr((char*)tw10s.buffer,response) != NULL)
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <TW10S_sendCommand+0x10c>)
 8000e06:	f002 f887 	bl	8002f18 <strstr>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <TW10S_sendCommand+0xe6>
					{
						result = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	77fb      	strb	r3, [r7, #31]
 8000e14:	e00a      	b.n	8000e2c <TW10S_sendCommand+0xfc>
					}
					else
					{
						result = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	77fb      	strb	r3, [r7, #31]
					}
					break;
 8000e1a:	e007      	b.n	8000e2c <TW10S_sendCommand+0xfc>
		while(HAL_GetTick() - time < timeout)
 8000e1c:	f000 fc62 	bl	80016e4 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8c9      	bhi.n	8000dc0 <TW10S_sendCommand+0x90>
	while(result == 0)
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0ac      	beq.n	8000d8c <TW10S_sendCommand+0x5c>
				}
			}
		}
	}
	return result;
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000009d 	.word	0x2000009d
 8000e40:	200000b8 	.word	0x200000b8
 8000e44:	08003748 	.word	0x08003748
 8000e48:	2000009c 	.word	0x2000009c
 8000e4c:	20000098 	.word	0x20000098

08000e50 <stopMeasure>:

void stopMeasure()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	TW10S_sendCommand("iHALT", "STOP OK", 2000);
 8000e54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e58:	4902      	ldr	r1, [pc, #8]	; (8000e64 <stopMeasure+0x14>)
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <stopMeasure+0x18>)
 8000e5c:	f7ff ff68 	bl	8000d30 <TW10S_sendCommand>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	0800374c 	.word	0x0800374c
 8000e68:	08003754 	.word	0x08003754

08000e6c <laserOn>:

void laserOn()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	TW10S_sendCommand("iLD:1", "LASER OPEN", 2000);
 8000e70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e74:	4904      	ldr	r1, [pc, #16]	; (8000e88 <laserOn+0x1c>)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <laserOn+0x20>)
 8000e78:	f7ff ff5a 	bl	8000d30 <TW10S_sendCommand>
	tw10s.laser = 1;
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <laserOn+0x24>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	705a      	strb	r2, [r3, #1]
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	0800375c 	.word	0x0800375c
 8000e8c:	08003768 	.word	0x08003768
 8000e90:	20000098 	.word	0x20000098

08000e94 <laserOff>:

void laserOff()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	TW10S_sendCommand("iLD:0", "LASER CLOSE", 2000);
 8000e98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e9c:	4904      	ldr	r1, [pc, #16]	; (8000eb0 <laserOff+0x1c>)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <laserOff+0x20>)
 8000ea0:	f7ff ff46 	bl	8000d30 <TW10S_sendCommand>
	tw10s.laser = 0;
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <laserOff+0x24>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	705a      	strb	r2, [r3, #1]
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	08003770 	.word	0x08003770
 8000eb4:	0800377c 	.word	0x0800377c
 8000eb8:	20000098 	.word	0x20000098

08000ebc <setOffset>:

void setOffset(uint8_t offset)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	char buff[20] = {0};
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
	sprintf(buff,"iSET:1,%d", offset);
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <setOffset+0x40>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fffa 	bl	8002ed8 <siprintf>
	TW10S_sendCommand(buff, "OK", 2000);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000eec:	4904      	ldr	r1, [pc, #16]	; (8000f00 <setOffset+0x44>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff1e 	bl	8000d30 <TW10S_sendCommand>
}
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	08003784 	.word	0x08003784
 8000f00:	08003790 	.word	0x08003790

08000f04 <setRange>:

void setRange(uint16_t range)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
	char buff[20] = {0};
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
	sprintf(buff,"iSET:2,%d", range);
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <setRange+0x40>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 ffd6 	bl	8002ed8 <siprintf>
	TW10S_sendCommand(buff, "OK", 2000);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f34:	4904      	ldr	r1, [pc, #16]	; (8000f48 <setRange+0x44>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fefa 	bl	8000d30 <TW10S_sendCommand>
}
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	08003794 	.word	0x08003794
 8000f48:	08003790 	.word	0x08003790

08000f4c <setBaudrate>:

void setBaudrate(uint32_t baudrate)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	char buff[20] = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
	sprintf(buff,"iSET:3,%ld",baudrate);
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <setBaudrate+0x40>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 ffb3 	bl	8002ed8 <siprintf>
	TW10S_sendCommand(buff, "OK", 2000);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f7a:	4905      	ldr	r1, [pc, #20]	; (8000f90 <setBaudrate+0x44>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fed7 	bl	8000d30 <TW10S_sendCommand>
}
 8000f82:	bf00      	nop
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	080037a0 	.word	0x080037a0
 8000f90:	08003790 	.word	0x08003790

08000f94 <setMode>:
	sprintf(buff,"iSET:8,%d",power);
	TW10S_sendCommand(buff, "OK", 2000);
}

void setMode(uint8_t mode)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	tw10s.mode = mode;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <setMode+0x1c>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	7093      	strb	r3, [r2, #2]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000098 	.word	0x20000098

08000fb4 <getDistance>:

float getDistance()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
	float distance;
	uint8_t distance_raw[10];
	uint8_t buffer_count=0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	75bb      	strb	r3, [r7, #22]
	uint8_t flag;
	switch(tw10s.mode)
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <getDistance+0x94>)
 8000fc0:	789b      	ldrb	r3, [r3, #2]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d00a      	beq.n	8000fdc <getDistance+0x28>
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d00f      	beq.n	8000fea <getDistance+0x36>
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d113      	bne.n	8000ff6 <getDistance+0x42>
	{
	case SINGLE_MODE:
		TW10S_sendCommand("iSM", "", 5000); 		// Do 1 lan
 8000fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd2:	491e      	ldr	r1, [pc, #120]	; (800104c <getDistance+0x98>)
 8000fd4:	481e      	ldr	r0, [pc, #120]	; (8001050 <getDistance+0x9c>)
 8000fd6:	f7ff feab 	bl	8000d30 <TW10S_sendCommand>
		break;
 8000fda:	e00c      	b.n	8000ff6 <getDistance+0x42>
	case CONTINOUS_MODE:
		TW10S_sendCommand("IACM", "", 5000);		// Do lien tuc
 8000fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe0:	491a      	ldr	r1, [pc, #104]	; (800104c <getDistance+0x98>)
 8000fe2:	481c      	ldr	r0, [pc, #112]	; (8001054 <getDistance+0xa0>)
 8000fe4:	f7ff fea4 	bl	8000d30 <TW10S_sendCommand>
		break;
 8000fe8:	e005      	b.n	8000ff6 <getDistance+0x42>
	case FAST_MODE:
		TW10S_sendCommand("iFACM", "", 5000);		// Do nhanh
 8000fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fee:	4917      	ldr	r1, [pc, #92]	; (800104c <getDistance+0x98>)
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <getDistance+0xa4>)
 8000ff2:	f7ff fe9d 	bl	8000d30 <TW10S_sendCommand>
	}
	tw10s.status = tw10s.buffer[0];
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <getDistance+0x94>)
 8000ff8:	795a      	ldrb	r2, [r3, #5]
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <getDistance+0x94>)
 8000ffc:	701a      	strb	r2, [r3, #0]
//		}
//		if(flag == 1)
//		{
//			distance_raw[buffer_count++] = tw10s.buffer[i];
//		}
	if(tw10s.rx_data[0] == '=') flag = 1;
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <getDistance+0x94>)
 8001000:	791b      	ldrb	r3, [r3, #4]
 8001002:	2b3d      	cmp	r3, #61	; 0x3d
 8001004:	d102      	bne.n	800100c <getDistance+0x58>
 8001006:	2301      	movs	r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
 800100a:	e005      	b.n	8001018 <getDistance+0x64>
	else if(tw10s.rx_data[0] == 'm') flag = 0;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <getDistance+0x94>)
 800100e:	791b      	ldrb	r3, [r3, #4]
 8001010:	2b6d      	cmp	r3, #109	; 0x6d
 8001012:	d101      	bne.n	8001018 <getDistance+0x64>
 8001014:	2300      	movs	r3, #0
 8001016:	75fb      	strb	r3, [r7, #23]
	if(flag == 1) distance_raw[buffer_count++] = tw10s.rx_data[0];
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d10a      	bne.n	8001034 <getDistance+0x80>
 800101e:	7dbb      	ldrb	r3, [r7, #22]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	75ba      	strb	r2, [r7, #22]
 8001024:	4619      	mov	r1, r3
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <getDistance+0x94>)
 8001028:	791a      	ldrb	r2, [r3, #4]
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	440b      	add	r3, r1
 8001030:	f803 2c14 	strb.w	r2, [r3, #-20]
	distance = StringToFloat((char*)distance_raw);
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fdfe 	bl	8000c38 <StringToFloat>
 800103c:	6138      	str	r0, [r7, #16]
	return distance;
 800103e:	693b      	ldr	r3, [r7, #16]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000098 	.word	0x20000098
 800104c:	080037e8 	.word	0x080037e8
 8001050:	080037ec 	.word	0x080037ec
 8001054:	080037f0 	.word	0x080037f0
 8001058:	080037f8 	.word	0x080037f8

0800105c <TW10S_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern TW10S_Struct tw10s;

void TW10S_init()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	stopMeasure();
 8001060:	f7ff fef6 	bl	8000e50 <stopMeasure>
	HAL_Delay(300);
 8001064:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001068:	f000 fb46 	bl	80016f8 <HAL_Delay>
	laserOn();
 800106c:	f7ff fefe 	bl	8000e6c <laserOn>
	HAL_Delay(300);
 8001070:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001074:	f000 fb40 	bl	80016f8 <HAL_Delay>
	setOffset(-10);
 8001078:	20f6      	movs	r0, #246	; 0xf6
 800107a:	f7ff ff1f 	bl	8000ebc <setOffset>
	HAL_Delay(300);
 800107e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001082:	f000 fb39 	bl	80016f8 <HAL_Delay>
	setRange(40000);
 8001086:	f649 4040 	movw	r0, #40000	; 0x9c40
 800108a:	f7ff ff3b 	bl	8000f04 <setRange>
	HAL_Delay(300);
 800108e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001092:	f000 fb31 	bl	80016f8 <HAL_Delay>
	setBaudrate(38400);
 8001096:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 800109a:	f7ff ff57 	bl	8000f4c <setBaudrate>
	HAL_Delay(300);
 800109e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010a2:	f000 fb29 	bl	80016f8 <HAL_Delay>
	setMode(SINGLE_MODE);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff ff74 	bl	8000f94 <setMode>
	HAL_Delay(200);
 80010ac:	20c8      	movs	r0, #200	; 0xc8
 80010ae:	f000 fb23 	bl	80016f8 <HAL_Delay>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_GPIO_EXTI_Callback>:

float distance;
uint8_t measure_mode;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	2b40      	cmp	r3, #64	; 0x40
 80010c6:	d00e      	beq.n	80010e6 <HAL_GPIO_EXTI_Callback+0x2e>
 80010c8:	2b80      	cmp	r3, #128	; 0x80
 80010ca:	d024      	beq.n	8001116 <HAL_GPIO_EXTI_Callback+0x5e>
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d000      	beq.n	80010d2 <HAL_GPIO_EXTI_Callback+0x1a>
		if(tw10s.mode == SINGLE_MODE) 				tw10s.mode = CONTINOUS_MODE;
		else if(tw10s.mode == CONTINOUS_MODE) 		tw10s.mode = FAST_MODE;
		else if(tw10s.mode == FAST_MODE) 			tw10s.mode = SINGLE_MODE;
		break;
	}
}
 80010d0:	e03c      	b.n	800114c <HAL_GPIO_EXTI_Callback+0x94>
		if(tw10s.laser == 1) laserOff();
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_GPIO_EXTI_Callback+0x9c>)
 80010d4:	785b      	ldrb	r3, [r3, #1]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <HAL_GPIO_EXTI_Callback+0x28>
 80010da:	f7ff fedb 	bl	8000e94 <laserOff>
		break;
 80010de:	e035      	b.n	800114c <HAL_GPIO_EXTI_Callback+0x94>
		else laserOn();
 80010e0:	f7ff fec4 	bl	8000e6c <laserOn>
		break;
 80010e4:	e032      	b.n	800114c <HAL_GPIO_EXTI_Callback+0x94>
		if(tw10s.mode == SINGLE_MODE)				measure_mode = 1;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_GPIO_EXTI_Callback+0x9c>)
 80010e8:	789b      	ldrb	r3, [r3, #2]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <HAL_GPIO_EXTI_Callback+0x3e>
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_GPIO_EXTI_Callback+0xa0>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
		break;
 80010f4:	e027      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x8e>
		else if(tw10s.mode == CONTINOUS_MODE) 		measure_mode = 2;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_GPIO_EXTI_Callback+0x9c>)
 80010f8:	789b      	ldrb	r3, [r3, #2]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d103      	bne.n	8001106 <HAL_GPIO_EXTI_Callback+0x4e>
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001100:	2202      	movs	r2, #2
 8001102:	701a      	strb	r2, [r3, #0]
		break;
 8001104:	e01f      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x8e>
		else if(tw10s.mode == FAST_MODE) 			measure_mode = 3;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001108:	789b      	ldrb	r3, [r3, #2]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d11b      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x8e>
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001110:	2203      	movs	r2, #3
 8001112:	701a      	strb	r2, [r3, #0]
		break;
 8001114:	e017      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x8e>
		if(tw10s.mode == SINGLE_MODE) 				tw10s.mode = CONTINOUS_MODE;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001118:	789b      	ldrb	r3, [r3, #2]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d103      	bne.n	8001126 <HAL_GPIO_EXTI_Callback+0x6e>
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001120:	2201      	movs	r2, #1
 8001122:	709a      	strb	r2, [r3, #2]
		break;
 8001124:	e011      	b.n	800114a <HAL_GPIO_EXTI_Callback+0x92>
		else if(tw10s.mode == CONTINOUS_MODE) 		tw10s.mode = FAST_MODE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001128:	789b      	ldrb	r3, [r3, #2]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d103      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x7e>
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001130:	2202      	movs	r2, #2
 8001132:	709a      	strb	r2, [r3, #2]
		break;
 8001134:	e009      	b.n	800114a <HAL_GPIO_EXTI_Callback+0x92>
		else if(tw10s.mode == FAST_MODE) 			tw10s.mode = SINGLE_MODE;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001138:	789b      	ldrb	r3, [r3, #2]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d105      	bne.n	800114a <HAL_GPIO_EXTI_Callback+0x92>
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001140:	2200      	movs	r2, #0
 8001142:	709a      	strb	r2, [r3, #2]
		break;
 8001144:	e001      	b.n	800114a <HAL_GPIO_EXTI_Callback+0x92>
		break;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <HAL_GPIO_EXTI_Callback+0x94>
		break;
 800114a:	bf00      	nop
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000098 	.word	0x20000098
 8001158:	20000138 	.word	0x20000138

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001160:	f000 fa68 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001164:	f000 f82a 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001168:	f000 f8c2 	bl	80012f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800116c:	f000 f86c 	bl	8001248 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001170:	f000 f894 	bl	800129c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	TW10S_init();
 8001174:	f7ff ff72 	bl	800105c <TW10S_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(measure_mode)
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <main+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d00c      	beq.n	800119a <main+0x3e>
 8001180:	2b03      	cmp	r3, #3
 8001182:	d010      	beq.n	80011a6 <main+0x4a>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d1f7      	bne.n	8001178 <main+0x1c>
	  {
	  case 1:
		  distance = getDistance();
 8001188:	f7ff ff14 	bl	8000fb4 <getDistance>
 800118c:	4602      	mov	r2, r0
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <main+0x5c>)
 8001190:	601a      	str	r2, [r3, #0]
		  measure_mode = 0;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <main+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
		  break;
 8001198:	e00b      	b.n	80011b2 <main+0x56>
	  case 2:
		  distance = getDistance();
 800119a:	f7ff ff0b 	bl	8000fb4 <getDistance>
 800119e:	4602      	mov	r2, r0
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <main+0x5c>)
 80011a2:	601a      	str	r2, [r3, #0]
		  break;
 80011a4:	e005      	b.n	80011b2 <main+0x56>
	  case 3:
		  distance = getDistance();
 80011a6:	f7ff ff05 	bl	8000fb4 <getDistance>
 80011aa:	4602      	mov	r2, r0
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <main+0x5c>)
 80011ae:	601a      	str	r2, [r3, #0]
		  break;
 80011b0:	bf00      	nop
	  switch(measure_mode)
 80011b2:	e7e1      	b.n	8001178 <main+0x1c>
 80011b4:	20000138 	.word	0x20000138
 80011b8:	200000b4 	.word	0x200000b4

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b090      	sub	sp, #64	; 0x40
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	2228      	movs	r2, #40	; 0x28
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fe7c 	bl	8002ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fd8f 	bl	8001d28 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001210:	f000 f8ae 	bl	8001370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2302      	movs	r3, #2
 800121a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2102      	movs	r1, #2
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fffa 	bl	8002228 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800123a:	f000 f899 	bl	8001370 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3740      	adds	r7, #64	; 0x40
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <MX_USART1_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001254:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART1_UART_Init+0x4c>)
 8001280:	f001 f96e 	bl	8002560 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f871 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000b8 	.word	0x200000b8
 8001298:	40013800 	.word	0x40013800

0800129c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_USART2_UART_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80012ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012d4:	f001 f944 	bl	8002560 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012de:	f000 f847 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200000f8 	.word	0x200000f8
 80012ec:	40004400 	.word	0x40004400

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_GPIO_Init+0x74>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a16      	ldr	r2, [pc, #88]	; (8001364 <MX_GPIO_Init+0x74>)
 800130a:	f043 0320 	orr.w	r3, r3, #32
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_GPIO_Init+0x74>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_GPIO_Init+0x74>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a10      	ldr	r2, [pc, #64]	; (8001364 <MX_GPIO_Init+0x74>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_GPIO_Init+0x74>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : ON_OFF_Pin START_Pin MODE_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin|START_Pin|MODE_Pin;
 8001334:	23e0      	movs	r3, #224	; 0xe0
 8001336:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_GPIO_Init+0x78>)
 800133a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4619      	mov	r1, r3
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <MX_GPIO_Init+0x7c>)
 8001348:	f000 fb7c 	bl	8001a44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2101      	movs	r1, #1
 8001350:	2017      	movs	r0, #23
 8001352:	f000 faca 	bl	80018ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001356:	2017      	movs	r0, #23
 8001358:	f000 fae3 	bl	8001922 <HAL_NVIC_EnableIRQ>

}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000
 8001368:	10210000 	.word	0x10210000
 800136c:	40010800 	.word	0x40010800

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001376:	e7fe      	b.n	8001376 <Error_Handler+0x6>

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <HAL_MspInit+0x5c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_MspInit+0x5c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_MspInit+0x60>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_MspInit+0x60>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000

080013dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a3b      	ldr	r2, [pc, #236]	; (80014e4 <HAL_UART_MspInit+0x108>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d13a      	bne.n	8001472 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013fc:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a39      	ldr	r2, [pc, #228]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 8001402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800142c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	4619      	mov	r1, r3
 8001440:	482a      	ldr	r0, [pc, #168]	; (80014ec <HAL_UART_MspInit+0x110>)
 8001442:	f000 faff 	bl	8001a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	4619      	mov	r1, r3
 800145a:	4824      	ldr	r0, [pc, #144]	; (80014ec <HAL_UART_MspInit+0x110>)
 800145c:	f000 faf2 	bl	8001a44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2101      	movs	r1, #1
 8001464:	2025      	movs	r0, #37	; 0x25
 8001466:	f000 fa40 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146a:	2025      	movs	r0, #37	; 0x25
 800146c:	f000 fa59 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001470:	e034      	b.n	80014dc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <HAL_UART_MspInit+0x114>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d12f      	bne.n	80014dc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 8001482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001486:	61d3      	str	r3, [r2, #28]
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_UART_MspInit+0x10c>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ac:	2304      	movs	r3, #4
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	4619      	mov	r1, r3
 80014be:	480b      	ldr	r0, [pc, #44]	; (80014ec <HAL_UART_MspInit+0x110>)
 80014c0:	f000 fac0 	bl	8001a44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c4:	2308      	movs	r3, #8
 80014c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_UART_MspInit+0x110>)
 80014d8:	f000 fab4 	bl	8001a44 <HAL_GPIO_Init>
}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010800 	.word	0x40010800
 80014f0:	40004400 	.word	0x40004400

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f8c1 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}

08001542 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001546:	2020      	movs	r0, #32
 8001548:	f000 fbd6 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800154c:	2040      	movs	r0, #64	; 0x40
 800154e:	f000 fbd3 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001552:	2080      	movs	r0, #128	; 0x80
 8001554:	f000 fbd0 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <USART1_IRQHandler+0x10>)
 8001562:	f001 f97b 	bl	800285c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200000b8 	.word	0x200000b8

08001570 <_sbrk>:
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
 80015a0:	f001 fc68 	bl	8002e74 <__errno>
 80015a4:	4602      	mov	r2, r0
 80015a6:	230c      	movs	r3, #12
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20005000 	.word	0x20005000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	2000008c 	.word	0x2000008c
 80015d8:	20000148 	.word	0x20000148

080015dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <Reset_Handler>:
 80015e8:	2100      	movs	r1, #0
 80015ea:	e003      	b.n	80015f4 <LoopCopyDataInit>

080015ec <CopyDataInit>:
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <LoopFillZerobss+0x14>)
 80015ee:	585b      	ldr	r3, [r3, r1]
 80015f0:	5043      	str	r3, [r0, r1]
 80015f2:	3104      	adds	r1, #4

080015f4 <LoopCopyDataInit>:
 80015f4:	480a      	ldr	r0, [pc, #40]	; (8001620 <LoopFillZerobss+0x18>)
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <LoopFillZerobss+0x1c>)
 80015f8:	1842      	adds	r2, r0, r1
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3f6      	bcc.n	80015ec <CopyDataInit>
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <LoopFillZerobss+0x20>)
 8001600:	e002      	b.n	8001608 <LoopFillZerobss>

08001602 <FillZerobss>:
 8001602:	2300      	movs	r3, #0
 8001604:	f842 3b04 	str.w	r3, [r2], #4

08001608 <LoopFillZerobss>:
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <LoopFillZerobss+0x24>)
 800160a:	429a      	cmp	r2, r3
 800160c:	d3f9      	bcc.n	8001602 <FillZerobss>
 800160e:	f7ff ffe5 	bl	80015dc <SystemInit>
 8001612:	f001 fc35 	bl	8002e80 <__libc_init_array>
 8001616:	f7ff fda1 	bl	800115c <main>
 800161a:	4770      	bx	lr
 800161c:	08003868 	.word	0x08003868
 8001620:	20000000 	.word	0x20000000
 8001624:	20000070 	.word	0x20000070
 8001628:	20000070 	.word	0x20000070
 800162c:	20000144 	.word	0x20000144

08001630 <ADC1_2_IRQHandler>:
 8001630:	e7fe      	b.n	8001630 <ADC1_2_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x28>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x28>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 f945 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fe92 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f95d 	bl	800193e <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f925 	bl	80018ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_IncTick+0x1c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x20>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <HAL_IncTick+0x20>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000008 	.word	0x20000008
 80016e0:	2000013c 	.word	0x2000013c

080016e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <HAL_GetTick+0x10>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	2000013c 	.word	0x2000013c

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff fff0 	bl	80016e4 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_Delay+0x40>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffe0 	bl	80016e4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000008 	.word	0x20000008

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4906      	ldr	r1, [pc, #24]	; (80017d4 <__NVIC_EnableIRQ+0x34>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100

080017d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	; (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	; (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	4313      	orrs	r3, r2
         );
}
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	; 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f7ff ff90 	bl	80017d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff2d 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff42 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff90 	bl	800182c <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5f 	bl	80017d8 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff35 	bl	80017a0 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800196a:	2b02      	cmp	r3, #2
 800196c:	d005      	beq.n	800197a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2204      	movs	r2, #4
 8001972:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e051      	b.n	8001a1e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 020e 	bic.w	r2, r2, #14
 8001988:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <HAL_DMA_Abort_IT+0xd0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d029      	beq.n	80019f8 <HAL_DMA_Abort_IT+0xa0>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <HAL_DMA_Abort_IT+0xd4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d022      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x9c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <HAL_DMA_Abort_IT+0xd8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d01a      	beq.n	80019ee <HAL_DMA_Abort_IT+0x96>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_DMA_Abort_IT+0xdc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d012      	beq.n	80019e8 <HAL_DMA_Abort_IT+0x90>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <HAL_DMA_Abort_IT+0xe0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d00a      	beq.n	80019e2 <HAL_DMA_Abort_IT+0x8a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <HAL_DMA_Abort_IT+0xe4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d102      	bne.n	80019dc <HAL_DMA_Abort_IT+0x84>
 80019d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019da:	e00e      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019e0:	e00b      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e6:	e008      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ec:	e005      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f2:	e002      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019f4:	2310      	movs	r3, #16
 80019f6:	e000      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019f8:	2301      	movs	r3, #1
 80019fa:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_DMA_Abort_IT+0xe8>)
 80019fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
    } 
  }
  return status;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40020008 	.word	0x40020008
 8001a2c:	4002001c 	.word	0x4002001c
 8001a30:	40020030 	.word	0x40020030
 8001a34:	40020044 	.word	0x40020044
 8001a38:	40020058 	.word	0x40020058
 8001a3c:	4002006c 	.word	0x4002006c
 8001a40:	40020000 	.word	0x40020000

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b08b      	sub	sp, #44	; 0x2c
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	e127      	b.n	8001ca8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8116 	bne.w	8001ca2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d034      	beq.n	8001ae8 <HAL_GPIO_Init+0xa4>
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d80d      	bhi.n	8001a9e <HAL_GPIO_Init+0x5a>
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d02b      	beq.n	8001ade <HAL_GPIO_Init+0x9a>
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d804      	bhi.n	8001a94 <HAL_GPIO_Init+0x50>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d031      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d01c      	beq.n	8001acc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a92:	e048      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d043      	beq.n	8001b20 <HAL_GPIO_Init+0xdc>
 8001a98:	2b11      	cmp	r3, #17
 8001a9a:	d01b      	beq.n	8001ad4 <HAL_GPIO_Init+0x90>
          break;
 8001a9c:	e043      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a9e:	4a89      	ldr	r2, [pc, #548]	; (8001cc4 <HAL_GPIO_Init+0x280>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d026      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001aa4:	4a87      	ldr	r2, [pc, #540]	; (8001cc4 <HAL_GPIO_Init+0x280>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d806      	bhi.n	8001ab8 <HAL_GPIO_Init+0x74>
 8001aaa:	4a87      	ldr	r2, [pc, #540]	; (8001cc8 <HAL_GPIO_Init+0x284>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d020      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001ab0:	4a86      	ldr	r2, [pc, #536]	; (8001ccc <HAL_GPIO_Init+0x288>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01d      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
          break;
 8001ab6:	e036      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ab8:	4a85      	ldr	r2, [pc, #532]	; (8001cd0 <HAL_GPIO_Init+0x28c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d019      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001abe:	4a85      	ldr	r2, [pc, #532]	; (8001cd4 <HAL_GPIO_Init+0x290>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d016      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001ac4:	4a84      	ldr	r2, [pc, #528]	; (8001cd8 <HAL_GPIO_Init+0x294>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
          break;
 8001aca:	e02c      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e028      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	e023      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	3308      	adds	r3, #8
 8001ae4:	623b      	str	r3, [r7, #32]
          break;
 8001ae6:	e01e      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	330c      	adds	r3, #12
 8001aee:	623b      	str	r3, [r7, #32]
          break;
 8001af0:	e019      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001afa:	2304      	movs	r3, #4
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e012      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	611a      	str	r2, [r3, #16]
          break;
 8001b12:	e008      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b14:	2308      	movs	r3, #8
 8001b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	615a      	str	r2, [r3, #20]
          break;
 8001b1e:	e002      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2bff      	cmp	r3, #255	; 0xff
 8001b2a:	d801      	bhi.n	8001b30 <HAL_GPIO_Init+0xec>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	e001      	b.n	8001b34 <HAL_GPIO_Init+0xf0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3304      	adds	r3, #4
 8001b34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2bff      	cmp	r3, #255	; 0xff
 8001b3a:	d802      	bhi.n	8001b42 <HAL_GPIO_Init+0xfe>
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_Init+0x104>
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	3b08      	subs	r3, #8
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	210f      	movs	r1, #15
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	401a      	ands	r2, r3
 8001b5a:	6a39      	ldr	r1, [r7, #32]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	431a      	orrs	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8096 	beq.w	8001ca2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b76:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <HAL_GPIO_Init+0x298>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <HAL_GPIO_Init+0x298>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6193      	str	r3, [r2, #24]
 8001b82:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <HAL_GPIO_Init+0x298>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b8e:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <HAL_GPIO_Init+0x29c>)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4b      	ldr	r2, [pc, #300]	; (8001ce4 <HAL_GPIO_Init+0x2a0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0x19e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_GPIO_Init+0x2a4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00d      	beq.n	8001bde <HAL_GPIO_Init+0x19a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a49      	ldr	r2, [pc, #292]	; (8001cec <HAL_GPIO_Init+0x2a8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <HAL_GPIO_Init+0x196>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a48      	ldr	r2, [pc, #288]	; (8001cf0 <HAL_GPIO_Init+0x2ac>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GPIO_Init+0x192>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001be2:	2300      	movs	r3, #0
 8001be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bf4:	493a      	ldr	r1, [pc, #232]	; (8001ce0 <HAL_GPIO_Init+0x29c>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c0e:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4938      	ldr	r1, [pc, #224]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c1c:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4933      	ldr	r1, [pc, #204]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	492e      	ldr	r1, [pc, #184]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c44:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4929      	ldr	r1, [pc, #164]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	4924      	ldr	r1, [pc, #144]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	491f      	ldr	r1, [pc, #124]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60cb      	str	r3, [r1, #12]
 8001c92:	e006      	b.n	8001ca2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4915      	ldr	r1, [pc, #84]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f aed0 	bne.w	8001a58 <HAL_GPIO_Init+0x14>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	372c      	adds	r7, #44	; 0x2c
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	10210000 	.word	0x10210000
 8001cc8:	10110000 	.word	0x10110000
 8001ccc:	10120000 	.word	0x10120000
 8001cd0:	10310000 	.word	0x10310000
 8001cd4:	10320000 	.word	0x10320000
 8001cd8:	10220000 	.word	0x10220000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	40010c00 	.word	0x40010c00
 8001cec:	40011000 	.word	0x40011000
 8001cf0:	40011400 	.word	0x40011400
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f9ce 	bl	80010b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e26c      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8087 	beq.w	8001e56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d48:	4b92      	ldr	r3, [pc, #584]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d00c      	beq.n	8001d6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d54:	4b8f      	ldr	r3, [pc, #572]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d112      	bne.n	8001d86 <HAL_RCC_OscConfig+0x5e>
 8001d60:	4b8c      	ldr	r3, [pc, #560]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6c:	d10b      	bne.n	8001d86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6e:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d06c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x12c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d168      	bne.n	8001e54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e246      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x76>
 8001d90:	4b80      	ldr	r3, [pc, #512]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a7f      	ldr	r2, [pc, #508]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e02e      	b.n	8001dfc <HAL_RCC_OscConfig+0xd4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x98>
 8001da6:	4b7b      	ldr	r3, [pc, #492]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a7a      	ldr	r2, [pc, #488]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a77      	ldr	r2, [pc, #476]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e01d      	b.n	8001dfc <HAL_RCC_OscConfig+0xd4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0xbc>
 8001dca:	4b72      	ldr	r3, [pc, #456]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a71      	ldr	r2, [pc, #452]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6e      	ldr	r2, [pc, #440]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0xd4>
 8001de4:	4b6b      	ldr	r3, [pc, #428]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a6a      	ldr	r2, [pc, #424]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a67      	ldr	r2, [pc, #412]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fc6e 	bl	80016e4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fc6a 	bl	80016e4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1fa      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0xe4>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fc5a 	bl	80016e4 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fc56 	bl	80016e4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1e6      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x10c>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d063      	beq.n	8001f2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e62:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e6e:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d11c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x18c>
 8001e7a:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d116      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_RCC_OscConfig+0x176>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e1ba      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4939      	ldr	r1, [pc, #228]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb2:	e03a      	b.n	8001f2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fc0f 	bl	80016e4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fc0b 	bl	80016e4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e19b      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4927      	ldr	r1, [pc, #156]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_OscConfig+0x270>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fbee 	bl	80016e4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fbea 	bl	80016e4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e17a      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d03a      	beq.n	8001fac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d019      	beq.n	8001f72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_RCC_OscConfig+0x274>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f44:	f7ff fbce 	bl	80016e4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fbca 	bl	80016e4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e15a      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f000 fada 	bl	8002524 <RCC_Delay>
 8001f70:	e01c      	b.n	8001fac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_RCC_OscConfig+0x274>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f78:	f7ff fbb4 	bl	80016e4 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7e:	e00f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f80:	f7ff fbb0 	bl	80016e4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d908      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e140      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	42420000 	.word	0x42420000
 8001f9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa0:	4b9e      	ldr	r3, [pc, #632]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1e9      	bne.n	8001f80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a6 	beq.w	8002106 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fbe:	4b97      	ldr	r3, [pc, #604]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10d      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	4b94      	ldr	r3, [pc, #592]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	4a93      	ldr	r2, [pc, #588]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	61d3      	str	r3, [r2, #28]
 8001fd6:	4b91      	ldr	r3, [pc, #580]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	4b8e      	ldr	r3, [pc, #568]	; (8002220 <HAL_RCC_OscConfig+0x4f8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d118      	bne.n	8002024 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff2:	4b8b      	ldr	r3, [pc, #556]	; (8002220 <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a8a      	ldr	r2, [pc, #552]	; (8002220 <HAL_RCC_OscConfig+0x4f8>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff fb71 	bl	80016e4 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002006:	f7ff fb6d 	bl	80016e4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b64      	cmp	r3, #100	; 0x64
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0fd      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	4b81      	ldr	r3, [pc, #516]	; (8002220 <HAL_RCC_OscConfig+0x4f8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x312>
 800202c:	4b7b      	ldr	r3, [pc, #492]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a7a      	ldr	r2, [pc, #488]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	e02d      	b.n	8002096 <HAL_RCC_OscConfig+0x36e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x334>
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a75      	ldr	r2, [pc, #468]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	6213      	str	r3, [r2, #32]
 800204e:	4b73      	ldr	r3, [pc, #460]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a72      	ldr	r2, [pc, #456]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	6213      	str	r3, [r2, #32]
 800205a:	e01c      	b.n	8002096 <HAL_RCC_OscConfig+0x36e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d10c      	bne.n	800207e <HAL_RCC_OscConfig+0x356>
 8002064:	4b6d      	ldr	r3, [pc, #436]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a6c      	ldr	r2, [pc, #432]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	6213      	str	r3, [r2, #32]
 8002070:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4a69      	ldr	r2, [pc, #420]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6213      	str	r3, [r2, #32]
 800207c:	e00b      	b.n	8002096 <HAL_RCC_OscConfig+0x36e>
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a66      	ldr	r2, [pc, #408]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6213      	str	r3, [r2, #32]
 800208a:	4b64      	ldr	r3, [pc, #400]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a63      	ldr	r2, [pc, #396]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d015      	beq.n	80020ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7ff fb21 	bl	80016e4 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7ff fb1d 	bl	80016e4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0ab      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	4b57      	ldr	r3, [pc, #348]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ee      	beq.n	80020a6 <HAL_RCC_OscConfig+0x37e>
 80020c8:	e014      	b.n	80020f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7ff fb0b 	bl	80016e4 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7ff fb07 	bl	80016e4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e095      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e8:	4b4c      	ldr	r3, [pc, #304]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ee      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d105      	bne.n	8002106 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fa:	4b48      	ldr	r3, [pc, #288]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a47      	ldr	r2, [pc, #284]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8081 	beq.w	8002212 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002110:	4b42      	ldr	r3, [pc, #264]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d061      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d146      	bne.n	80021b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002124:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_RCC_OscConfig+0x4fc>)
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff fadb 	bl	80016e4 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002132:	f7ff fad7 	bl	80016e4 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e067      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002158:	d108      	bne.n	800216c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800215a:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	492d      	ldr	r1, [pc, #180]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a19      	ldr	r1, [r3, #32]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	430b      	orrs	r3, r1
 800217e:	4927      	ldr	r1, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_RCC_OscConfig+0x4fc>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff faab 	bl	80016e4 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff faa7 	bl	80016e4 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e037      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x46a>
 80021b0:	e02f      	b.n	8002212 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_RCC_OscConfig+0x4fc>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff fa94 	bl	80016e4 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c0:	f7ff fa90 	bl	80016e4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e020      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x498>
 80021de:	e018      	b.n	8002212 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e013      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
 8002224:	42420060 	.word	0x42420060

08002228 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0d0      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d910      	bls.n	800226c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 0207 	bic.w	r2, r3, #7
 8002252:	4965      	ldr	r1, [pc, #404]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0b8      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4a58      	ldr	r2, [pc, #352]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800228e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	494d      	ldr	r1, [pc, #308]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d040      	beq.n	8002348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d115      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07f      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e073      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e06b      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b39      	ldr	r3, [pc, #228]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4936      	ldr	r1, [pc, #216]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7ff f9e4 	bl	80016e4 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7ff f9e0 	bl	80016e4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e053      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d210      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	4922      	ldr	r1, [pc, #136]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e032      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4916      	ldr	r1, [pc, #88]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	490e      	ldr	r1, [pc, #56]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b6:	f000 f821 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023ba:	4601      	mov	r1, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	5cd3      	ldrb	r3, [r2, r3]
 80023ca:	fa21 f303 	lsr.w	r3, r1, r3
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1cc>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x1d0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f942 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08003814 	.word	0x08003814
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b490      	push	{r4, r7}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002404:	1d3c      	adds	r4, r7, #4
 8002406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800240c:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x40>
 8002436:	2b08      	cmp	r3, #8
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x46>
 800243a:	e02d      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800243e:	623b      	str	r3, [r7, #32]
      break;
 8002440:	e02d      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800244e:	4413      	add	r3, r2
 8002450:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002454:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d013      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c5b      	lsrs	r3, r3, #17
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800246e:	4413      	add	r3, r2
 8002470:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002474:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800247a:	fb02 f203 	mul.w	r2, r2, r3
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
 8002486:	e004      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	623b      	str	r3, [r7, #32]
      break;
 8002496:	e002      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800249a:	623b      	str	r3, [r7, #32]
      break;
 800249c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249e:	6a3b      	ldr	r3, [r7, #32]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3728      	adds	r7, #40	; 0x28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc90      	pop	{r4, r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	08003800 	.word	0x08003800
 80024b0:	08003810 	.word	0x08003810
 80024b4:	40021000 	.word	0x40021000
 80024b8:	007a1200 	.word	0x007a1200
 80024bc:	003d0900 	.word	0x003d0900

080024c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c4:	4b02      	ldr	r3, [pc, #8]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	20000000 	.word	0x20000000

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024d8:	f7ff fff2 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 80024dc:	4601      	mov	r1, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08003824 	.word	0x08003824

080024fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002500:	f7ff ffde 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 8002504:	4601      	mov	r1, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	0adb      	lsrs	r3, r3, #11
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4a03      	ldr	r2, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	08003824 	.word	0x08003824

08002524 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <RCC_Delay+0x34>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <RCC_Delay+0x38>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	0a5b      	lsrs	r3, r3, #9
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002540:	bf00      	nop
  }
  while (Delay --);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1e5a      	subs	r2, r3, #1
 8002546:	60fa      	str	r2, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f9      	bne.n	8002540 <RCC_Delay+0x1c>
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000
 800255c:	10624dd3 	.word	0x10624dd3

08002560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e03f      	b.n	80025f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe ff28 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	; 0x24
 8002590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fbd7 	bl	8002d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b08a      	sub	sp, #40	; 0x28
 80025fe:	af02      	add	r7, sp, #8
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	4613      	mov	r3, r2
 8002608:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b20      	cmp	r3, #32
 8002618:	d17c      	bne.n	8002714 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_UART_Transmit+0x2c>
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e075      	b.n	8002716 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_UART_Transmit+0x3e>
 8002634:	2302      	movs	r3, #2
 8002636:	e06e      	b.n	8002716 <HAL_UART_Transmit+0x11c>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2221      	movs	r2, #33	; 0x21
 800264a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800264e:	f7ff f849 	bl	80016e4 <HAL_GetTick>
 8002652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002668:	d108      	bne.n	800267c <HAL_UART_Transmit+0x82>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	e003      	b.n	8002684 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800268c:	e02a      	b.n	80026e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2200      	movs	r2, #0
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f9fa 	bl	8002a92 <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e036      	b.n	8002716 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10b      	bne.n	80026c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3302      	adds	r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	e007      	b.n	80026d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	3301      	adds	r3, #1
 80026d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1cf      	bne.n	800268e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2140      	movs	r1, #64	; 0x40
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f9ca 	bl	8002a92 <UART_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e006      	b.n	8002716 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	e000      	b.n	8002716 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002714:	2302      	movs	r3, #2
  }
}
 8002716:	4618      	mov	r0, r3
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b08a      	sub	sp, #40	; 0x28
 8002722:	af02      	add	r7, sp, #8
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b20      	cmp	r3, #32
 800273c:	f040 8089 	bne.w	8002852 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_UART_Receive+0x2e>
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e081      	b.n	8002854 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_UART_Receive+0x40>
 800275a:	2302      	movs	r3, #2
 800275c:	e07a      	b.n	8002854 <HAL_UART_Receive+0x136>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2222      	movs	r2, #34	; 0x22
 8002770:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002774:	f7fe ffb6 	bl	80016e4 <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	88fa      	ldrh	r2, [r7, #6]
 800277e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278e:	d108      	bne.n	80027a2 <HAL_UART_Receive+0x84>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d104      	bne.n	80027a2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	e003      	b.n	80027aa <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027b2:	e043      	b.n	800283c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2120      	movs	r1, #32
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f967 	bl	8002a92 <UART_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e042      	b.n	8002854 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10c      	bne.n	80027ee <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	3302      	adds	r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	e01f      	b.n	800282e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f6:	d007      	beq.n	8002808 <HAL_UART_Receive+0xea>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_UART_Receive+0xf8>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e008      	b.n	8002828 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002822:	b2da      	uxtb	r2, r3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1b6      	bne.n	80027b4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e000      	b.n	8002854 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
  }
}
 8002854:	4618      	mov	r0, r3
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10d      	bne.n	80028ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_UART_IRQHandler+0x52>
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f9d5 	bl	8002c56 <UART_Receive_IT>
      return;
 80028ac:	e0d1      	b.n	8002a52 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80b0 	beq.w	8002a16 <HAL_UART_IRQHandler+0x1ba>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_UART_IRQHandler+0x70>
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80a5 	beq.w	8002a16 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_UART_IRQHandler+0x90>
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	f043 0201 	orr.w	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_UART_IRQHandler+0xb0>
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	f043 0202 	orr.w	r2, r3, #2
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_UART_IRQHandler+0xd0>
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	f043 0204 	orr.w	r2, r3, #4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00f      	beq.n	8002956 <HAL_UART_IRQHandler+0xfa>
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d104      	bne.n	800294a <HAL_UART_IRQHandler+0xee>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	f043 0208 	orr.w	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d078      	beq.n	8002a50 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_UART_IRQHandler+0x11c>
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f96f 	bl	8002c56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <HAL_UART_IRQHandler+0x144>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d031      	beq.n	8002a04 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f8c0 	bl	8002b26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <HAL_UART_IRQHandler+0x1fc>)
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe ffbd 	bl	8001958 <HAL_DMA_Abort_IT>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d016      	beq.n	8002a12 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ee:	4610      	mov	r0, r2
 80029f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f2:	e00e      	b.n	8002a12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f843 	bl	8002a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fa:	e00a      	b.n	8002a12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f83f 	bl	8002a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a02:	e006      	b.n	8002a12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f83b 	bl	8002a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a10:	e01e      	b.n	8002a50 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a12:	bf00      	nop
    return;
 8002a14:	e01c      	b.n	8002a50 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_UART_IRQHandler+0x1d6>
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8ac 	bl	8002b88 <UART_Transmit_IT>
    return;
 8002a30:	e00f      	b.n	8002a52 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_UART_IRQHandler+0x1f6>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8ed 	bl	8002c26 <UART_EndTransmit_IT>
    return;
 8002a4c:	bf00      	nop
 8002a4e:	e000      	b.n	8002a52 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002a50:	bf00      	nop
  }
}
 8002a52:	3720      	adds	r7, #32
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	08002b61 	.word	0x08002b61

08002a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa2:	e02c      	b.n	8002afe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d028      	beq.n	8002afe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ab2:	f7fe fe17 	bl	80016e4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d21d      	bcs.n	8002afe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ad0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e00f      	b.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4013      	ands	r3, r2
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	bf0c      	ite	eq
 8002b0e:	2301      	moveq	r3, #1
 8002b10:	2300      	movne	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d0c3      	beq.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b3c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff ff80 	bl	8002a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b21      	cmp	r3, #33	; 0x21
 8002b9a:	d13e      	bne.n	8002c1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d114      	bne.n	8002bd0 <UART_Transmit_IT+0x48>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d110      	bne.n	8002bd0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	1c9a      	adds	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]
 8002bce:	e008      	b.n	8002be2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	1c59      	adds	r1, r3, #1
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6211      	str	r1, [r2, #32]
 8002bda:	781a      	ldrb	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
  }
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff08 	bl	8002a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b22      	cmp	r3, #34	; 0x22
 8002c68:	d170      	bne.n	8002d4c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c72:	d117      	bne.n	8002ca4 <UART_Receive_IT+0x4e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d113      	bne.n	8002ca4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	1c9a      	adds	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca2:	e026      	b.n	8002cf2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb6:	d007      	beq.n	8002cc8 <UART_Receive_IT+0x72>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <UART_Receive_IT+0x80>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e008      	b.n	8002ce8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d120      	bne.n	8002d48 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0220 	bic.w	r2, r2, #32
 8002d14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fe95 	bl	8002a6e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e002      	b.n	8002d4e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e000      	b.n	8002d4e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d92:	f023 030c 	bic.w	r3, r3, #12
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <UART_SetConfig+0x114>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d103      	bne.n	8002dc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dc0:	f7ff fb9c 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	e002      	b.n	8002dce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f7ff fb84 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009a      	lsls	r2, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	4a22      	ldr	r2, [pc, #136]	; (8002e70 <UART_SetConfig+0x118>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	0119      	lsls	r1, r3, #4
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009a      	lsls	r2, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <UART_SetConfig+0x118>)
 8002e06:	fba3 0302 	umull	r0, r3, r3, r2
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2064      	movs	r0, #100	; 0x64
 8002e0e:	fb00 f303 	mul.w	r3, r0, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	3332      	adds	r3, #50	; 0x32
 8002e18:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <UART_SetConfig+0x118>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e24:	4419      	add	r1, r3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009a      	lsls	r2, r3, #2
 8002e30:	441a      	add	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <UART_SetConfig+0x118>)
 8002e3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2064      	movs	r0, #100	; 0x64
 8002e46:	fb00 f303 	mul.w	r3, r0, r3
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	3332      	adds	r3, #50	; 0x32
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <UART_SetConfig+0x118>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	440a      	add	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	51eb851f 	.word	0x51eb851f

08002e74 <__errno>:
 8002e74:	4b01      	ldr	r3, [pc, #4]	; (8002e7c <__errno+0x8>)
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	2000000c 	.word	0x2000000c

08002e80 <__libc_init_array>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	2500      	movs	r5, #0
 8002e84:	4e0c      	ldr	r6, [pc, #48]	; (8002eb8 <__libc_init_array+0x38>)
 8002e86:	4c0d      	ldr	r4, [pc, #52]	; (8002ebc <__libc_init_array+0x3c>)
 8002e88:	1ba4      	subs	r4, r4, r6
 8002e8a:	10a4      	asrs	r4, r4, #2
 8002e8c:	42a5      	cmp	r5, r4
 8002e8e:	d109      	bne.n	8002ea4 <__libc_init_array+0x24>
 8002e90:	f000 fc4e 	bl	8003730 <_init>
 8002e94:	2500      	movs	r5, #0
 8002e96:	4e0a      	ldr	r6, [pc, #40]	; (8002ec0 <__libc_init_array+0x40>)
 8002e98:	4c0a      	ldr	r4, [pc, #40]	; (8002ec4 <__libc_init_array+0x44>)
 8002e9a:	1ba4      	subs	r4, r4, r6
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	42a5      	cmp	r5, r4
 8002ea0:	d105      	bne.n	8002eae <__libc_init_array+0x2e>
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ea8:	4798      	blx	r3
 8002eaa:	3501      	adds	r5, #1
 8002eac:	e7ee      	b.n	8002e8c <__libc_init_array+0xc>
 8002eae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eb2:	4798      	blx	r3
 8002eb4:	3501      	adds	r5, #1
 8002eb6:	e7f2      	b.n	8002e9e <__libc_init_array+0x1e>
 8002eb8:	08003860 	.word	0x08003860
 8002ebc:	08003860 	.word	0x08003860
 8002ec0:	08003860 	.word	0x08003860
 8002ec4:	08003864 	.word	0x08003864

08002ec8 <memset>:
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4402      	add	r2, r0
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <memset+0xa>
 8002ed0:	4770      	bx	lr
 8002ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed6:	e7f9      	b.n	8002ecc <memset+0x4>

08002ed8 <siprintf>:
 8002ed8:	b40e      	push	{r1, r2, r3}
 8002eda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ede:	b500      	push	{lr}
 8002ee0:	b09c      	sub	sp, #112	; 0x70
 8002ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8002ee4:	9002      	str	r0, [sp, #8]
 8002ee6:	9006      	str	r0, [sp, #24]
 8002ee8:	9107      	str	r1, [sp, #28]
 8002eea:	9104      	str	r1, [sp, #16]
 8002eec:	4808      	ldr	r0, [pc, #32]	; (8002f10 <siprintf+0x38>)
 8002eee:	4909      	ldr	r1, [pc, #36]	; (8002f14 <siprintf+0x3c>)
 8002ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ef4:	9105      	str	r1, [sp, #20]
 8002ef6:	6800      	ldr	r0, [r0, #0]
 8002ef8:	a902      	add	r1, sp, #8
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	f000 f880 	bl	8003000 <_svfiprintf_r>
 8002f00:	2200      	movs	r2, #0
 8002f02:	9b02      	ldr	r3, [sp, #8]
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	b01c      	add	sp, #112	; 0x70
 8002f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f0c:	b003      	add	sp, #12
 8002f0e:	4770      	bx	lr
 8002f10:	2000000c 	.word	0x2000000c
 8002f14:	ffff0208 	.word	0xffff0208

08002f18 <strstr>:
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1a:	7803      	ldrb	r3, [r0, #0]
 8002f1c:	b17b      	cbz	r3, 8002f3e <strstr+0x26>
 8002f1e:	4604      	mov	r4, r0
 8002f20:	7823      	ldrb	r3, [r4, #0]
 8002f22:	4620      	mov	r0, r4
 8002f24:	1c66      	adds	r6, r4, #1
 8002f26:	b17b      	cbz	r3, 8002f48 <strstr+0x30>
 8002f28:	1e4a      	subs	r2, r1, #1
 8002f2a:	1e63      	subs	r3, r4, #1
 8002f2c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8002f30:	b14d      	cbz	r5, 8002f46 <strstr+0x2e>
 8002f32:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002f36:	4634      	mov	r4, r6
 8002f38:	42af      	cmp	r7, r5
 8002f3a:	d0f7      	beq.n	8002f2c <strstr+0x14>
 8002f3c:	e7f0      	b.n	8002f20 <strstr+0x8>
 8002f3e:	780b      	ldrb	r3, [r1, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf18      	it	ne
 8002f44:	2000      	movne	r0, #0
 8002f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	e7fc      	b.n	8002f46 <strstr+0x2e>

08002f4c <__ssputs_r>:
 8002f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f50:	688e      	ldr	r6, [r1, #8]
 8002f52:	4682      	mov	sl, r0
 8002f54:	429e      	cmp	r6, r3
 8002f56:	460c      	mov	r4, r1
 8002f58:	4690      	mov	r8, r2
 8002f5a:	4699      	mov	r9, r3
 8002f5c:	d837      	bhi.n	8002fce <__ssputs_r+0x82>
 8002f5e:	898a      	ldrh	r2, [r1, #12]
 8002f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f64:	d031      	beq.n	8002fca <__ssputs_r+0x7e>
 8002f66:	2302      	movs	r3, #2
 8002f68:	6825      	ldr	r5, [r4, #0]
 8002f6a:	6909      	ldr	r1, [r1, #16]
 8002f6c:	1a6f      	subs	r7, r5, r1
 8002f6e:	6965      	ldr	r5, [r4, #20]
 8002f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f74:	fb95 f5f3 	sdiv	r5, r5, r3
 8002f78:	f109 0301 	add.w	r3, r9, #1
 8002f7c:	443b      	add	r3, r7
 8002f7e:	429d      	cmp	r5, r3
 8002f80:	bf38      	it	cc
 8002f82:	461d      	movcc	r5, r3
 8002f84:	0553      	lsls	r3, r2, #21
 8002f86:	d530      	bpl.n	8002fea <__ssputs_r+0x9e>
 8002f88:	4629      	mov	r1, r5
 8002f8a:	f000 fb37 	bl	80035fc <_malloc_r>
 8002f8e:	4606      	mov	r6, r0
 8002f90:	b950      	cbnz	r0, 8002fa8 <__ssputs_r+0x5c>
 8002f92:	230c      	movs	r3, #12
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f8ca 3000 	str.w	r3, [sl]
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa2:	81a3      	strh	r3, [r4, #12]
 8002fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa8:	463a      	mov	r2, r7
 8002faa:	6921      	ldr	r1, [r4, #16]
 8002fac:	f000 fab6 	bl	800351c <memcpy>
 8002fb0:	89a3      	ldrh	r3, [r4, #12]
 8002fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fba:	81a3      	strh	r3, [r4, #12]
 8002fbc:	6126      	str	r6, [r4, #16]
 8002fbe:	443e      	add	r6, r7
 8002fc0:	6026      	str	r6, [r4, #0]
 8002fc2:	464e      	mov	r6, r9
 8002fc4:	6165      	str	r5, [r4, #20]
 8002fc6:	1bed      	subs	r5, r5, r7
 8002fc8:	60a5      	str	r5, [r4, #8]
 8002fca:	454e      	cmp	r6, r9
 8002fcc:	d900      	bls.n	8002fd0 <__ssputs_r+0x84>
 8002fce:	464e      	mov	r6, r9
 8002fd0:	4632      	mov	r2, r6
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	6820      	ldr	r0, [r4, #0]
 8002fd6:	f000 faac 	bl	8003532 <memmove>
 8002fda:	68a3      	ldr	r3, [r4, #8]
 8002fdc:	2000      	movs	r0, #0
 8002fde:	1b9b      	subs	r3, r3, r6
 8002fe0:	60a3      	str	r3, [r4, #8]
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	441e      	add	r6, r3
 8002fe6:	6026      	str	r6, [r4, #0]
 8002fe8:	e7dc      	b.n	8002fa4 <__ssputs_r+0x58>
 8002fea:	462a      	mov	r2, r5
 8002fec:	f000 fb60 	bl	80036b0 <_realloc_r>
 8002ff0:	4606      	mov	r6, r0
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d1e2      	bne.n	8002fbc <__ssputs_r+0x70>
 8002ff6:	6921      	ldr	r1, [r4, #16]
 8002ff8:	4650      	mov	r0, sl
 8002ffa:	f000 fab3 	bl	8003564 <_free_r>
 8002ffe:	e7c8      	b.n	8002f92 <__ssputs_r+0x46>

08003000 <_svfiprintf_r>:
 8003000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003004:	461d      	mov	r5, r3
 8003006:	898b      	ldrh	r3, [r1, #12]
 8003008:	b09d      	sub	sp, #116	; 0x74
 800300a:	061f      	lsls	r7, r3, #24
 800300c:	4680      	mov	r8, r0
 800300e:	460c      	mov	r4, r1
 8003010:	4616      	mov	r6, r2
 8003012:	d50f      	bpl.n	8003034 <_svfiprintf_r+0x34>
 8003014:	690b      	ldr	r3, [r1, #16]
 8003016:	b96b      	cbnz	r3, 8003034 <_svfiprintf_r+0x34>
 8003018:	2140      	movs	r1, #64	; 0x40
 800301a:	f000 faef 	bl	80035fc <_malloc_r>
 800301e:	6020      	str	r0, [r4, #0]
 8003020:	6120      	str	r0, [r4, #16]
 8003022:	b928      	cbnz	r0, 8003030 <_svfiprintf_r+0x30>
 8003024:	230c      	movs	r3, #12
 8003026:	f8c8 3000 	str.w	r3, [r8]
 800302a:	f04f 30ff 	mov.w	r0, #4294967295
 800302e:	e0c8      	b.n	80031c2 <_svfiprintf_r+0x1c2>
 8003030:	2340      	movs	r3, #64	; 0x40
 8003032:	6163      	str	r3, [r4, #20]
 8003034:	2300      	movs	r3, #0
 8003036:	9309      	str	r3, [sp, #36]	; 0x24
 8003038:	2320      	movs	r3, #32
 800303a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800303e:	2330      	movs	r3, #48	; 0x30
 8003040:	f04f 0b01 	mov.w	fp, #1
 8003044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003048:	9503      	str	r5, [sp, #12]
 800304a:	4637      	mov	r7, r6
 800304c:	463d      	mov	r5, r7
 800304e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003052:	b10b      	cbz	r3, 8003058 <_svfiprintf_r+0x58>
 8003054:	2b25      	cmp	r3, #37	; 0x25
 8003056:	d13e      	bne.n	80030d6 <_svfiprintf_r+0xd6>
 8003058:	ebb7 0a06 	subs.w	sl, r7, r6
 800305c:	d00b      	beq.n	8003076 <_svfiprintf_r+0x76>
 800305e:	4653      	mov	r3, sl
 8003060:	4632      	mov	r2, r6
 8003062:	4621      	mov	r1, r4
 8003064:	4640      	mov	r0, r8
 8003066:	f7ff ff71 	bl	8002f4c <__ssputs_r>
 800306a:	3001      	adds	r0, #1
 800306c:	f000 80a4 	beq.w	80031b8 <_svfiprintf_r+0x1b8>
 8003070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003072:	4453      	add	r3, sl
 8003074:	9309      	str	r3, [sp, #36]	; 0x24
 8003076:	783b      	ldrb	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 809d 	beq.w	80031b8 <_svfiprintf_r+0x1b8>
 800307e:	2300      	movs	r3, #0
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
 8003084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003088:	9304      	str	r3, [sp, #16]
 800308a:	9307      	str	r3, [sp, #28]
 800308c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003090:	931a      	str	r3, [sp, #104]	; 0x68
 8003092:	462f      	mov	r7, r5
 8003094:	2205      	movs	r2, #5
 8003096:	f817 1b01 	ldrb.w	r1, [r7], #1
 800309a:	4850      	ldr	r0, [pc, #320]	; (80031dc <_svfiprintf_r+0x1dc>)
 800309c:	f000 fa30 	bl	8003500 <memchr>
 80030a0:	9b04      	ldr	r3, [sp, #16]
 80030a2:	b9d0      	cbnz	r0, 80030da <_svfiprintf_r+0xda>
 80030a4:	06d9      	lsls	r1, r3, #27
 80030a6:	bf44      	itt	mi
 80030a8:	2220      	movmi	r2, #32
 80030aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030ae:	071a      	lsls	r2, r3, #28
 80030b0:	bf44      	itt	mi
 80030b2:	222b      	movmi	r2, #43	; 0x2b
 80030b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030b8:	782a      	ldrb	r2, [r5, #0]
 80030ba:	2a2a      	cmp	r2, #42	; 0x2a
 80030bc:	d015      	beq.n	80030ea <_svfiprintf_r+0xea>
 80030be:	462f      	mov	r7, r5
 80030c0:	2000      	movs	r0, #0
 80030c2:	250a      	movs	r5, #10
 80030c4:	9a07      	ldr	r2, [sp, #28]
 80030c6:	4639      	mov	r1, r7
 80030c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030cc:	3b30      	subs	r3, #48	; 0x30
 80030ce:	2b09      	cmp	r3, #9
 80030d0:	d94d      	bls.n	800316e <_svfiprintf_r+0x16e>
 80030d2:	b1b8      	cbz	r0, 8003104 <_svfiprintf_r+0x104>
 80030d4:	e00f      	b.n	80030f6 <_svfiprintf_r+0xf6>
 80030d6:	462f      	mov	r7, r5
 80030d8:	e7b8      	b.n	800304c <_svfiprintf_r+0x4c>
 80030da:	4a40      	ldr	r2, [pc, #256]	; (80031dc <_svfiprintf_r+0x1dc>)
 80030dc:	463d      	mov	r5, r7
 80030de:	1a80      	subs	r0, r0, r2
 80030e0:	fa0b f000 	lsl.w	r0, fp, r0
 80030e4:	4318      	orrs	r0, r3
 80030e6:	9004      	str	r0, [sp, #16]
 80030e8:	e7d3      	b.n	8003092 <_svfiprintf_r+0x92>
 80030ea:	9a03      	ldr	r2, [sp, #12]
 80030ec:	1d11      	adds	r1, r2, #4
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	9103      	str	r1, [sp, #12]
 80030f2:	2a00      	cmp	r2, #0
 80030f4:	db01      	blt.n	80030fa <_svfiprintf_r+0xfa>
 80030f6:	9207      	str	r2, [sp, #28]
 80030f8:	e004      	b.n	8003104 <_svfiprintf_r+0x104>
 80030fa:	4252      	negs	r2, r2
 80030fc:	f043 0302 	orr.w	r3, r3, #2
 8003100:	9207      	str	r2, [sp, #28]
 8003102:	9304      	str	r3, [sp, #16]
 8003104:	783b      	ldrb	r3, [r7, #0]
 8003106:	2b2e      	cmp	r3, #46	; 0x2e
 8003108:	d10c      	bne.n	8003124 <_svfiprintf_r+0x124>
 800310a:	787b      	ldrb	r3, [r7, #1]
 800310c:	2b2a      	cmp	r3, #42	; 0x2a
 800310e:	d133      	bne.n	8003178 <_svfiprintf_r+0x178>
 8003110:	9b03      	ldr	r3, [sp, #12]
 8003112:	3702      	adds	r7, #2
 8003114:	1d1a      	adds	r2, r3, #4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	9203      	str	r2, [sp, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	bfb8      	it	lt
 800311e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003122:	9305      	str	r3, [sp, #20]
 8003124:	4d2e      	ldr	r5, [pc, #184]	; (80031e0 <_svfiprintf_r+0x1e0>)
 8003126:	2203      	movs	r2, #3
 8003128:	7839      	ldrb	r1, [r7, #0]
 800312a:	4628      	mov	r0, r5
 800312c:	f000 f9e8 	bl	8003500 <memchr>
 8003130:	b138      	cbz	r0, 8003142 <_svfiprintf_r+0x142>
 8003132:	2340      	movs	r3, #64	; 0x40
 8003134:	1b40      	subs	r0, r0, r5
 8003136:	fa03 f000 	lsl.w	r0, r3, r0
 800313a:	9b04      	ldr	r3, [sp, #16]
 800313c:	3701      	adds	r7, #1
 800313e:	4303      	orrs	r3, r0
 8003140:	9304      	str	r3, [sp, #16]
 8003142:	7839      	ldrb	r1, [r7, #0]
 8003144:	2206      	movs	r2, #6
 8003146:	4827      	ldr	r0, [pc, #156]	; (80031e4 <_svfiprintf_r+0x1e4>)
 8003148:	1c7e      	adds	r6, r7, #1
 800314a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800314e:	f000 f9d7 	bl	8003500 <memchr>
 8003152:	2800      	cmp	r0, #0
 8003154:	d038      	beq.n	80031c8 <_svfiprintf_r+0x1c8>
 8003156:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <_svfiprintf_r+0x1e8>)
 8003158:	bb13      	cbnz	r3, 80031a0 <_svfiprintf_r+0x1a0>
 800315a:	9b03      	ldr	r3, [sp, #12]
 800315c:	3307      	adds	r3, #7
 800315e:	f023 0307 	bic.w	r3, r3, #7
 8003162:	3308      	adds	r3, #8
 8003164:	9303      	str	r3, [sp, #12]
 8003166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003168:	444b      	add	r3, r9
 800316a:	9309      	str	r3, [sp, #36]	; 0x24
 800316c:	e76d      	b.n	800304a <_svfiprintf_r+0x4a>
 800316e:	fb05 3202 	mla	r2, r5, r2, r3
 8003172:	2001      	movs	r0, #1
 8003174:	460f      	mov	r7, r1
 8003176:	e7a6      	b.n	80030c6 <_svfiprintf_r+0xc6>
 8003178:	2300      	movs	r3, #0
 800317a:	250a      	movs	r5, #10
 800317c:	4619      	mov	r1, r3
 800317e:	3701      	adds	r7, #1
 8003180:	9305      	str	r3, [sp, #20]
 8003182:	4638      	mov	r0, r7
 8003184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003188:	3a30      	subs	r2, #48	; 0x30
 800318a:	2a09      	cmp	r2, #9
 800318c:	d903      	bls.n	8003196 <_svfiprintf_r+0x196>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0c8      	beq.n	8003124 <_svfiprintf_r+0x124>
 8003192:	9105      	str	r1, [sp, #20]
 8003194:	e7c6      	b.n	8003124 <_svfiprintf_r+0x124>
 8003196:	fb05 2101 	mla	r1, r5, r1, r2
 800319a:	2301      	movs	r3, #1
 800319c:	4607      	mov	r7, r0
 800319e:	e7f0      	b.n	8003182 <_svfiprintf_r+0x182>
 80031a0:	ab03      	add	r3, sp, #12
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	4622      	mov	r2, r4
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <_svfiprintf_r+0x1ec>)
 80031a8:	a904      	add	r1, sp, #16
 80031aa:	4640      	mov	r0, r8
 80031ac:	f3af 8000 	nop.w
 80031b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031b4:	4681      	mov	r9, r0
 80031b6:	d1d6      	bne.n	8003166 <_svfiprintf_r+0x166>
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	065b      	lsls	r3, r3, #25
 80031bc:	f53f af35 	bmi.w	800302a <_svfiprintf_r+0x2a>
 80031c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031c2:	b01d      	add	sp, #116	; 0x74
 80031c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031c8:	ab03      	add	r3, sp, #12
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	4622      	mov	r2, r4
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <_svfiprintf_r+0x1ec>)
 80031d0:	a904      	add	r1, sp, #16
 80031d2:	4640      	mov	r0, r8
 80031d4:	f000 f882 	bl	80032dc <_printf_i>
 80031d8:	e7ea      	b.n	80031b0 <_svfiprintf_r+0x1b0>
 80031da:	bf00      	nop
 80031dc:	0800382c 	.word	0x0800382c
 80031e0:	08003832 	.word	0x08003832
 80031e4:	08003836 	.word	0x08003836
 80031e8:	00000000 	.word	0x00000000
 80031ec:	08002f4d 	.word	0x08002f4d

080031f0 <_printf_common>:
 80031f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031f4:	4691      	mov	r9, r2
 80031f6:	461f      	mov	r7, r3
 80031f8:	688a      	ldr	r2, [r1, #8]
 80031fa:	690b      	ldr	r3, [r1, #16]
 80031fc:	4606      	mov	r6, r0
 80031fe:	4293      	cmp	r3, r2
 8003200:	bfb8      	it	lt
 8003202:	4613      	movlt	r3, r2
 8003204:	f8c9 3000 	str.w	r3, [r9]
 8003208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800320c:	460c      	mov	r4, r1
 800320e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003212:	b112      	cbz	r2, 800321a <_printf_common+0x2a>
 8003214:	3301      	adds	r3, #1
 8003216:	f8c9 3000 	str.w	r3, [r9]
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	0699      	lsls	r1, r3, #26
 800321e:	bf42      	ittt	mi
 8003220:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003224:	3302      	addmi	r3, #2
 8003226:	f8c9 3000 	strmi.w	r3, [r9]
 800322a:	6825      	ldr	r5, [r4, #0]
 800322c:	f015 0506 	ands.w	r5, r5, #6
 8003230:	d107      	bne.n	8003242 <_printf_common+0x52>
 8003232:	f104 0a19 	add.w	sl, r4, #25
 8003236:	68e3      	ldr	r3, [r4, #12]
 8003238:	f8d9 2000 	ldr.w	r2, [r9]
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	42ab      	cmp	r3, r5
 8003240:	dc29      	bgt.n	8003296 <_printf_common+0xa6>
 8003242:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	3300      	adds	r3, #0
 800324a:	bf18      	it	ne
 800324c:	2301      	movne	r3, #1
 800324e:	0692      	lsls	r2, r2, #26
 8003250:	d42e      	bmi.n	80032b0 <_printf_common+0xc0>
 8003252:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003256:	4639      	mov	r1, r7
 8003258:	4630      	mov	r0, r6
 800325a:	47c0      	blx	r8
 800325c:	3001      	adds	r0, #1
 800325e:	d021      	beq.n	80032a4 <_printf_common+0xb4>
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	68e5      	ldr	r5, [r4, #12]
 8003264:	f003 0306 	and.w	r3, r3, #6
 8003268:	2b04      	cmp	r3, #4
 800326a:	bf18      	it	ne
 800326c:	2500      	movne	r5, #0
 800326e:	f8d9 2000 	ldr.w	r2, [r9]
 8003272:	f04f 0900 	mov.w	r9, #0
 8003276:	bf08      	it	eq
 8003278:	1aad      	subeq	r5, r5, r2
 800327a:	68a3      	ldr	r3, [r4, #8]
 800327c:	6922      	ldr	r2, [r4, #16]
 800327e:	bf08      	it	eq
 8003280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003284:	4293      	cmp	r3, r2
 8003286:	bfc4      	itt	gt
 8003288:	1a9b      	subgt	r3, r3, r2
 800328a:	18ed      	addgt	r5, r5, r3
 800328c:	341a      	adds	r4, #26
 800328e:	454d      	cmp	r5, r9
 8003290:	d11a      	bne.n	80032c8 <_printf_common+0xd8>
 8003292:	2000      	movs	r0, #0
 8003294:	e008      	b.n	80032a8 <_printf_common+0xb8>
 8003296:	2301      	movs	r3, #1
 8003298:	4652      	mov	r2, sl
 800329a:	4639      	mov	r1, r7
 800329c:	4630      	mov	r0, r6
 800329e:	47c0      	blx	r8
 80032a0:	3001      	adds	r0, #1
 80032a2:	d103      	bne.n	80032ac <_printf_common+0xbc>
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ac:	3501      	adds	r5, #1
 80032ae:	e7c2      	b.n	8003236 <_printf_common+0x46>
 80032b0:	2030      	movs	r0, #48	; 0x30
 80032b2:	18e1      	adds	r1, r4, r3
 80032b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032be:	4422      	add	r2, r4
 80032c0:	3302      	adds	r3, #2
 80032c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032c6:	e7c4      	b.n	8003252 <_printf_common+0x62>
 80032c8:	2301      	movs	r3, #1
 80032ca:	4622      	mov	r2, r4
 80032cc:	4639      	mov	r1, r7
 80032ce:	4630      	mov	r0, r6
 80032d0:	47c0      	blx	r8
 80032d2:	3001      	adds	r0, #1
 80032d4:	d0e6      	beq.n	80032a4 <_printf_common+0xb4>
 80032d6:	f109 0901 	add.w	r9, r9, #1
 80032da:	e7d8      	b.n	800328e <_printf_common+0x9e>

080032dc <_printf_i>:
 80032dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80032e4:	460c      	mov	r4, r1
 80032e6:	7e09      	ldrb	r1, [r1, #24]
 80032e8:	b085      	sub	sp, #20
 80032ea:	296e      	cmp	r1, #110	; 0x6e
 80032ec:	4617      	mov	r7, r2
 80032ee:	4606      	mov	r6, r0
 80032f0:	4698      	mov	r8, r3
 80032f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80032f4:	f000 80b3 	beq.w	800345e <_printf_i+0x182>
 80032f8:	d822      	bhi.n	8003340 <_printf_i+0x64>
 80032fa:	2963      	cmp	r1, #99	; 0x63
 80032fc:	d036      	beq.n	800336c <_printf_i+0x90>
 80032fe:	d80a      	bhi.n	8003316 <_printf_i+0x3a>
 8003300:	2900      	cmp	r1, #0
 8003302:	f000 80b9 	beq.w	8003478 <_printf_i+0x19c>
 8003306:	2958      	cmp	r1, #88	; 0x58
 8003308:	f000 8083 	beq.w	8003412 <_printf_i+0x136>
 800330c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003310:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003314:	e032      	b.n	800337c <_printf_i+0xa0>
 8003316:	2964      	cmp	r1, #100	; 0x64
 8003318:	d001      	beq.n	800331e <_printf_i+0x42>
 800331a:	2969      	cmp	r1, #105	; 0x69
 800331c:	d1f6      	bne.n	800330c <_printf_i+0x30>
 800331e:	6820      	ldr	r0, [r4, #0]
 8003320:	6813      	ldr	r3, [r2, #0]
 8003322:	0605      	lsls	r5, r0, #24
 8003324:	f103 0104 	add.w	r1, r3, #4
 8003328:	d52a      	bpl.n	8003380 <_printf_i+0xa4>
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6011      	str	r1, [r2, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da03      	bge.n	800333a <_printf_i+0x5e>
 8003332:	222d      	movs	r2, #45	; 0x2d
 8003334:	425b      	negs	r3, r3
 8003336:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800333a:	486f      	ldr	r0, [pc, #444]	; (80034f8 <_printf_i+0x21c>)
 800333c:	220a      	movs	r2, #10
 800333e:	e039      	b.n	80033b4 <_printf_i+0xd8>
 8003340:	2973      	cmp	r1, #115	; 0x73
 8003342:	f000 809d 	beq.w	8003480 <_printf_i+0x1a4>
 8003346:	d808      	bhi.n	800335a <_printf_i+0x7e>
 8003348:	296f      	cmp	r1, #111	; 0x6f
 800334a:	d020      	beq.n	800338e <_printf_i+0xb2>
 800334c:	2970      	cmp	r1, #112	; 0x70
 800334e:	d1dd      	bne.n	800330c <_printf_i+0x30>
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	f043 0320 	orr.w	r3, r3, #32
 8003356:	6023      	str	r3, [r4, #0]
 8003358:	e003      	b.n	8003362 <_printf_i+0x86>
 800335a:	2975      	cmp	r1, #117	; 0x75
 800335c:	d017      	beq.n	800338e <_printf_i+0xb2>
 800335e:	2978      	cmp	r1, #120	; 0x78
 8003360:	d1d4      	bne.n	800330c <_printf_i+0x30>
 8003362:	2378      	movs	r3, #120	; 0x78
 8003364:	4865      	ldr	r0, [pc, #404]	; (80034fc <_printf_i+0x220>)
 8003366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800336a:	e055      	b.n	8003418 <_printf_i+0x13c>
 800336c:	6813      	ldr	r3, [r2, #0]
 800336e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003372:	1d19      	adds	r1, r3, #4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6011      	str	r1, [r2, #0]
 8003378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800337c:	2301      	movs	r3, #1
 800337e:	e08c      	b.n	800349a <_printf_i+0x1be>
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003386:	6011      	str	r1, [r2, #0]
 8003388:	bf18      	it	ne
 800338a:	b21b      	sxthne	r3, r3
 800338c:	e7cf      	b.n	800332e <_printf_i+0x52>
 800338e:	6813      	ldr	r3, [r2, #0]
 8003390:	6825      	ldr	r5, [r4, #0]
 8003392:	1d18      	adds	r0, r3, #4
 8003394:	6010      	str	r0, [r2, #0]
 8003396:	0628      	lsls	r0, r5, #24
 8003398:	d501      	bpl.n	800339e <_printf_i+0xc2>
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	e002      	b.n	80033a4 <_printf_i+0xc8>
 800339e:	0668      	lsls	r0, r5, #25
 80033a0:	d5fb      	bpl.n	800339a <_printf_i+0xbe>
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	296f      	cmp	r1, #111	; 0x6f
 80033a6:	bf14      	ite	ne
 80033a8:	220a      	movne	r2, #10
 80033aa:	2208      	moveq	r2, #8
 80033ac:	4852      	ldr	r0, [pc, #328]	; (80034f8 <_printf_i+0x21c>)
 80033ae:	2100      	movs	r1, #0
 80033b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033b4:	6865      	ldr	r5, [r4, #4]
 80033b6:	2d00      	cmp	r5, #0
 80033b8:	60a5      	str	r5, [r4, #8]
 80033ba:	f2c0 8095 	blt.w	80034e8 <_printf_i+0x20c>
 80033be:	6821      	ldr	r1, [r4, #0]
 80033c0:	f021 0104 	bic.w	r1, r1, #4
 80033c4:	6021      	str	r1, [r4, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d13d      	bne.n	8003446 <_printf_i+0x16a>
 80033ca:	2d00      	cmp	r5, #0
 80033cc:	f040 808e 	bne.w	80034ec <_printf_i+0x210>
 80033d0:	4665      	mov	r5, ip
 80033d2:	2a08      	cmp	r2, #8
 80033d4:	d10b      	bne.n	80033ee <_printf_i+0x112>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	07db      	lsls	r3, r3, #31
 80033da:	d508      	bpl.n	80033ee <_printf_i+0x112>
 80033dc:	6923      	ldr	r3, [r4, #16]
 80033de:	6862      	ldr	r2, [r4, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	bfde      	ittt	le
 80033e4:	2330      	movle	r3, #48	; 0x30
 80033e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033ee:	ebac 0305 	sub.w	r3, ip, r5
 80033f2:	6123      	str	r3, [r4, #16]
 80033f4:	f8cd 8000 	str.w	r8, [sp]
 80033f8:	463b      	mov	r3, r7
 80033fa:	aa03      	add	r2, sp, #12
 80033fc:	4621      	mov	r1, r4
 80033fe:	4630      	mov	r0, r6
 8003400:	f7ff fef6 	bl	80031f0 <_printf_common>
 8003404:	3001      	adds	r0, #1
 8003406:	d14d      	bne.n	80034a4 <_printf_i+0x1c8>
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	b005      	add	sp, #20
 800340e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003412:	4839      	ldr	r0, [pc, #228]	; (80034f8 <_printf_i+0x21c>)
 8003414:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003418:	6813      	ldr	r3, [r2, #0]
 800341a:	6821      	ldr	r1, [r4, #0]
 800341c:	1d1d      	adds	r5, r3, #4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6015      	str	r5, [r2, #0]
 8003422:	060a      	lsls	r2, r1, #24
 8003424:	d50b      	bpl.n	800343e <_printf_i+0x162>
 8003426:	07ca      	lsls	r2, r1, #31
 8003428:	bf44      	itt	mi
 800342a:	f041 0120 	orrmi.w	r1, r1, #32
 800342e:	6021      	strmi	r1, [r4, #0]
 8003430:	b91b      	cbnz	r3, 800343a <_printf_i+0x15e>
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	f022 0220 	bic.w	r2, r2, #32
 8003438:	6022      	str	r2, [r4, #0]
 800343a:	2210      	movs	r2, #16
 800343c:	e7b7      	b.n	80033ae <_printf_i+0xd2>
 800343e:	064d      	lsls	r5, r1, #25
 8003440:	bf48      	it	mi
 8003442:	b29b      	uxthmi	r3, r3
 8003444:	e7ef      	b.n	8003426 <_printf_i+0x14a>
 8003446:	4665      	mov	r5, ip
 8003448:	fbb3 f1f2 	udiv	r1, r3, r2
 800344c:	fb02 3311 	mls	r3, r2, r1, r3
 8003450:	5cc3      	ldrb	r3, [r0, r3]
 8003452:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003456:	460b      	mov	r3, r1
 8003458:	2900      	cmp	r1, #0
 800345a:	d1f5      	bne.n	8003448 <_printf_i+0x16c>
 800345c:	e7b9      	b.n	80033d2 <_printf_i+0xf6>
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	6825      	ldr	r5, [r4, #0]
 8003462:	1d18      	adds	r0, r3, #4
 8003464:	6961      	ldr	r1, [r4, #20]
 8003466:	6010      	str	r0, [r2, #0]
 8003468:	0628      	lsls	r0, r5, #24
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	d501      	bpl.n	8003472 <_printf_i+0x196>
 800346e:	6019      	str	r1, [r3, #0]
 8003470:	e002      	b.n	8003478 <_printf_i+0x19c>
 8003472:	066a      	lsls	r2, r5, #25
 8003474:	d5fb      	bpl.n	800346e <_printf_i+0x192>
 8003476:	8019      	strh	r1, [r3, #0]
 8003478:	2300      	movs	r3, #0
 800347a:	4665      	mov	r5, ip
 800347c:	6123      	str	r3, [r4, #16]
 800347e:	e7b9      	b.n	80033f4 <_printf_i+0x118>
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	1d19      	adds	r1, r3, #4
 8003484:	6011      	str	r1, [r2, #0]
 8003486:	681d      	ldr	r5, [r3, #0]
 8003488:	6862      	ldr	r2, [r4, #4]
 800348a:	2100      	movs	r1, #0
 800348c:	4628      	mov	r0, r5
 800348e:	f000 f837 	bl	8003500 <memchr>
 8003492:	b108      	cbz	r0, 8003498 <_printf_i+0x1bc>
 8003494:	1b40      	subs	r0, r0, r5
 8003496:	6060      	str	r0, [r4, #4]
 8003498:	6863      	ldr	r3, [r4, #4]
 800349a:	6123      	str	r3, [r4, #16]
 800349c:	2300      	movs	r3, #0
 800349e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034a2:	e7a7      	b.n	80033f4 <_printf_i+0x118>
 80034a4:	6923      	ldr	r3, [r4, #16]
 80034a6:	462a      	mov	r2, r5
 80034a8:	4639      	mov	r1, r7
 80034aa:	4630      	mov	r0, r6
 80034ac:	47c0      	blx	r8
 80034ae:	3001      	adds	r0, #1
 80034b0:	d0aa      	beq.n	8003408 <_printf_i+0x12c>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	079b      	lsls	r3, r3, #30
 80034b6:	d413      	bmi.n	80034e0 <_printf_i+0x204>
 80034b8:	68e0      	ldr	r0, [r4, #12]
 80034ba:	9b03      	ldr	r3, [sp, #12]
 80034bc:	4298      	cmp	r0, r3
 80034be:	bfb8      	it	lt
 80034c0:	4618      	movlt	r0, r3
 80034c2:	e7a3      	b.n	800340c <_printf_i+0x130>
 80034c4:	2301      	movs	r3, #1
 80034c6:	464a      	mov	r2, r9
 80034c8:	4639      	mov	r1, r7
 80034ca:	4630      	mov	r0, r6
 80034cc:	47c0      	blx	r8
 80034ce:	3001      	adds	r0, #1
 80034d0:	d09a      	beq.n	8003408 <_printf_i+0x12c>
 80034d2:	3501      	adds	r5, #1
 80034d4:	68e3      	ldr	r3, [r4, #12]
 80034d6:	9a03      	ldr	r2, [sp, #12]
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	42ab      	cmp	r3, r5
 80034dc:	dcf2      	bgt.n	80034c4 <_printf_i+0x1e8>
 80034de:	e7eb      	b.n	80034b8 <_printf_i+0x1dc>
 80034e0:	2500      	movs	r5, #0
 80034e2:	f104 0919 	add.w	r9, r4, #25
 80034e6:	e7f5      	b.n	80034d4 <_printf_i+0x1f8>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ac      	bne.n	8003446 <_printf_i+0x16a>
 80034ec:	7803      	ldrb	r3, [r0, #0]
 80034ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034f6:	e76c      	b.n	80033d2 <_printf_i+0xf6>
 80034f8:	0800383d 	.word	0x0800383d
 80034fc:	0800384e 	.word	0x0800384e

08003500 <memchr>:
 8003500:	b510      	push	{r4, lr}
 8003502:	b2c9      	uxtb	r1, r1
 8003504:	4402      	add	r2, r0
 8003506:	4290      	cmp	r0, r2
 8003508:	4603      	mov	r3, r0
 800350a:	d101      	bne.n	8003510 <memchr+0x10>
 800350c:	2300      	movs	r3, #0
 800350e:	e003      	b.n	8003518 <memchr+0x18>
 8003510:	781c      	ldrb	r4, [r3, #0]
 8003512:	3001      	adds	r0, #1
 8003514:	428c      	cmp	r4, r1
 8003516:	d1f6      	bne.n	8003506 <memchr+0x6>
 8003518:	4618      	mov	r0, r3
 800351a:	bd10      	pop	{r4, pc}

0800351c <memcpy>:
 800351c:	b510      	push	{r4, lr}
 800351e:	1e43      	subs	r3, r0, #1
 8003520:	440a      	add	r2, r1
 8003522:	4291      	cmp	r1, r2
 8003524:	d100      	bne.n	8003528 <memcpy+0xc>
 8003526:	bd10      	pop	{r4, pc}
 8003528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800352c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003530:	e7f7      	b.n	8003522 <memcpy+0x6>

08003532 <memmove>:
 8003532:	4288      	cmp	r0, r1
 8003534:	b510      	push	{r4, lr}
 8003536:	eb01 0302 	add.w	r3, r1, r2
 800353a:	d807      	bhi.n	800354c <memmove+0x1a>
 800353c:	1e42      	subs	r2, r0, #1
 800353e:	4299      	cmp	r1, r3
 8003540:	d00a      	beq.n	8003558 <memmove+0x26>
 8003542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003546:	f802 4f01 	strb.w	r4, [r2, #1]!
 800354a:	e7f8      	b.n	800353e <memmove+0xc>
 800354c:	4283      	cmp	r3, r0
 800354e:	d9f5      	bls.n	800353c <memmove+0xa>
 8003550:	1881      	adds	r1, r0, r2
 8003552:	1ad2      	subs	r2, r2, r3
 8003554:	42d3      	cmn	r3, r2
 8003556:	d100      	bne.n	800355a <memmove+0x28>
 8003558:	bd10      	pop	{r4, pc}
 800355a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800355e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003562:	e7f7      	b.n	8003554 <memmove+0x22>

08003564 <_free_r>:
 8003564:	b538      	push	{r3, r4, r5, lr}
 8003566:	4605      	mov	r5, r0
 8003568:	2900      	cmp	r1, #0
 800356a:	d043      	beq.n	80035f4 <_free_r+0x90>
 800356c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003570:	1f0c      	subs	r4, r1, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	bfb8      	it	lt
 8003576:	18e4      	addlt	r4, r4, r3
 8003578:	f000 f8d0 	bl	800371c <__malloc_lock>
 800357c:	4a1e      	ldr	r2, [pc, #120]	; (80035f8 <_free_r+0x94>)
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	4610      	mov	r0, r2
 8003582:	b933      	cbnz	r3, 8003592 <_free_r+0x2e>
 8003584:	6063      	str	r3, [r4, #4]
 8003586:	6014      	str	r4, [r2, #0]
 8003588:	4628      	mov	r0, r5
 800358a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800358e:	f000 b8c6 	b.w	800371e <__malloc_unlock>
 8003592:	42a3      	cmp	r3, r4
 8003594:	d90b      	bls.n	80035ae <_free_r+0x4a>
 8003596:	6821      	ldr	r1, [r4, #0]
 8003598:	1862      	adds	r2, r4, r1
 800359a:	4293      	cmp	r3, r2
 800359c:	bf01      	itttt	eq
 800359e:	681a      	ldreq	r2, [r3, #0]
 80035a0:	685b      	ldreq	r3, [r3, #4]
 80035a2:	1852      	addeq	r2, r2, r1
 80035a4:	6022      	streq	r2, [r4, #0]
 80035a6:	6063      	str	r3, [r4, #4]
 80035a8:	6004      	str	r4, [r0, #0]
 80035aa:	e7ed      	b.n	8003588 <_free_r+0x24>
 80035ac:	4613      	mov	r3, r2
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	b10a      	cbz	r2, 80035b6 <_free_r+0x52>
 80035b2:	42a2      	cmp	r2, r4
 80035b4:	d9fa      	bls.n	80035ac <_free_r+0x48>
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	1858      	adds	r0, r3, r1
 80035ba:	42a0      	cmp	r0, r4
 80035bc:	d10b      	bne.n	80035d6 <_free_r+0x72>
 80035be:	6820      	ldr	r0, [r4, #0]
 80035c0:	4401      	add	r1, r0
 80035c2:	1858      	adds	r0, r3, r1
 80035c4:	4282      	cmp	r2, r0
 80035c6:	6019      	str	r1, [r3, #0]
 80035c8:	d1de      	bne.n	8003588 <_free_r+0x24>
 80035ca:	6810      	ldr	r0, [r2, #0]
 80035cc:	6852      	ldr	r2, [r2, #4]
 80035ce:	4401      	add	r1, r0
 80035d0:	6019      	str	r1, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	e7d8      	b.n	8003588 <_free_r+0x24>
 80035d6:	d902      	bls.n	80035de <_free_r+0x7a>
 80035d8:	230c      	movs	r3, #12
 80035da:	602b      	str	r3, [r5, #0]
 80035dc:	e7d4      	b.n	8003588 <_free_r+0x24>
 80035de:	6820      	ldr	r0, [r4, #0]
 80035e0:	1821      	adds	r1, r4, r0
 80035e2:	428a      	cmp	r2, r1
 80035e4:	bf01      	itttt	eq
 80035e6:	6811      	ldreq	r1, [r2, #0]
 80035e8:	6852      	ldreq	r2, [r2, #4]
 80035ea:	1809      	addeq	r1, r1, r0
 80035ec:	6021      	streq	r1, [r4, #0]
 80035ee:	6062      	str	r2, [r4, #4]
 80035f0:	605c      	str	r4, [r3, #4]
 80035f2:	e7c9      	b.n	8003588 <_free_r+0x24>
 80035f4:	bd38      	pop	{r3, r4, r5, pc}
 80035f6:	bf00      	nop
 80035f8:	20000090 	.word	0x20000090

080035fc <_malloc_r>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	1ccd      	adds	r5, r1, #3
 8003600:	f025 0503 	bic.w	r5, r5, #3
 8003604:	3508      	adds	r5, #8
 8003606:	2d0c      	cmp	r5, #12
 8003608:	bf38      	it	cc
 800360a:	250c      	movcc	r5, #12
 800360c:	2d00      	cmp	r5, #0
 800360e:	4606      	mov	r6, r0
 8003610:	db01      	blt.n	8003616 <_malloc_r+0x1a>
 8003612:	42a9      	cmp	r1, r5
 8003614:	d903      	bls.n	800361e <_malloc_r+0x22>
 8003616:	230c      	movs	r3, #12
 8003618:	6033      	str	r3, [r6, #0]
 800361a:	2000      	movs	r0, #0
 800361c:	bd70      	pop	{r4, r5, r6, pc}
 800361e:	f000 f87d 	bl	800371c <__malloc_lock>
 8003622:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <_malloc_r+0xac>)
 8003624:	6814      	ldr	r4, [r2, #0]
 8003626:	4621      	mov	r1, r4
 8003628:	b991      	cbnz	r1, 8003650 <_malloc_r+0x54>
 800362a:	4c20      	ldr	r4, [pc, #128]	; (80036ac <_malloc_r+0xb0>)
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	b91b      	cbnz	r3, 8003638 <_malloc_r+0x3c>
 8003630:	4630      	mov	r0, r6
 8003632:	f000 f863 	bl	80036fc <_sbrk_r>
 8003636:	6020      	str	r0, [r4, #0]
 8003638:	4629      	mov	r1, r5
 800363a:	4630      	mov	r0, r6
 800363c:	f000 f85e 	bl	80036fc <_sbrk_r>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d124      	bne.n	800368e <_malloc_r+0x92>
 8003644:	230c      	movs	r3, #12
 8003646:	4630      	mov	r0, r6
 8003648:	6033      	str	r3, [r6, #0]
 800364a:	f000 f868 	bl	800371e <__malloc_unlock>
 800364e:	e7e4      	b.n	800361a <_malloc_r+0x1e>
 8003650:	680b      	ldr	r3, [r1, #0]
 8003652:	1b5b      	subs	r3, r3, r5
 8003654:	d418      	bmi.n	8003688 <_malloc_r+0x8c>
 8003656:	2b0b      	cmp	r3, #11
 8003658:	d90f      	bls.n	800367a <_malloc_r+0x7e>
 800365a:	600b      	str	r3, [r1, #0]
 800365c:	18cc      	adds	r4, r1, r3
 800365e:	50cd      	str	r5, [r1, r3]
 8003660:	4630      	mov	r0, r6
 8003662:	f000 f85c 	bl	800371e <__malloc_unlock>
 8003666:	f104 000b 	add.w	r0, r4, #11
 800366a:	1d23      	adds	r3, r4, #4
 800366c:	f020 0007 	bic.w	r0, r0, #7
 8003670:	1ac3      	subs	r3, r0, r3
 8003672:	d0d3      	beq.n	800361c <_malloc_r+0x20>
 8003674:	425a      	negs	r2, r3
 8003676:	50e2      	str	r2, [r4, r3]
 8003678:	e7d0      	b.n	800361c <_malloc_r+0x20>
 800367a:	684b      	ldr	r3, [r1, #4]
 800367c:	428c      	cmp	r4, r1
 800367e:	bf16      	itet	ne
 8003680:	6063      	strne	r3, [r4, #4]
 8003682:	6013      	streq	r3, [r2, #0]
 8003684:	460c      	movne	r4, r1
 8003686:	e7eb      	b.n	8003660 <_malloc_r+0x64>
 8003688:	460c      	mov	r4, r1
 800368a:	6849      	ldr	r1, [r1, #4]
 800368c:	e7cc      	b.n	8003628 <_malloc_r+0x2c>
 800368e:	1cc4      	adds	r4, r0, #3
 8003690:	f024 0403 	bic.w	r4, r4, #3
 8003694:	42a0      	cmp	r0, r4
 8003696:	d005      	beq.n	80036a4 <_malloc_r+0xa8>
 8003698:	1a21      	subs	r1, r4, r0
 800369a:	4630      	mov	r0, r6
 800369c:	f000 f82e 	bl	80036fc <_sbrk_r>
 80036a0:	3001      	adds	r0, #1
 80036a2:	d0cf      	beq.n	8003644 <_malloc_r+0x48>
 80036a4:	6025      	str	r5, [r4, #0]
 80036a6:	e7db      	b.n	8003660 <_malloc_r+0x64>
 80036a8:	20000090 	.word	0x20000090
 80036ac:	20000094 	.word	0x20000094

080036b0 <_realloc_r>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	4607      	mov	r7, r0
 80036b4:	4614      	mov	r4, r2
 80036b6:	460e      	mov	r6, r1
 80036b8:	b921      	cbnz	r1, 80036c4 <_realloc_r+0x14>
 80036ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036be:	4611      	mov	r1, r2
 80036c0:	f7ff bf9c 	b.w	80035fc <_malloc_r>
 80036c4:	b922      	cbnz	r2, 80036d0 <_realloc_r+0x20>
 80036c6:	f7ff ff4d 	bl	8003564 <_free_r>
 80036ca:	4625      	mov	r5, r4
 80036cc:	4628      	mov	r0, r5
 80036ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d0:	f000 f826 	bl	8003720 <_malloc_usable_size_r>
 80036d4:	42a0      	cmp	r0, r4
 80036d6:	d20f      	bcs.n	80036f8 <_realloc_r+0x48>
 80036d8:	4621      	mov	r1, r4
 80036da:	4638      	mov	r0, r7
 80036dc:	f7ff ff8e 	bl	80035fc <_malloc_r>
 80036e0:	4605      	mov	r5, r0
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d0f2      	beq.n	80036cc <_realloc_r+0x1c>
 80036e6:	4631      	mov	r1, r6
 80036e8:	4622      	mov	r2, r4
 80036ea:	f7ff ff17 	bl	800351c <memcpy>
 80036ee:	4631      	mov	r1, r6
 80036f0:	4638      	mov	r0, r7
 80036f2:	f7ff ff37 	bl	8003564 <_free_r>
 80036f6:	e7e9      	b.n	80036cc <_realloc_r+0x1c>
 80036f8:	4635      	mov	r5, r6
 80036fa:	e7e7      	b.n	80036cc <_realloc_r+0x1c>

080036fc <_sbrk_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	2300      	movs	r3, #0
 8003700:	4c05      	ldr	r4, [pc, #20]	; (8003718 <_sbrk_r+0x1c>)
 8003702:	4605      	mov	r5, r0
 8003704:	4608      	mov	r0, r1
 8003706:	6023      	str	r3, [r4, #0]
 8003708:	f7fd ff32 	bl	8001570 <_sbrk>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d102      	bne.n	8003716 <_sbrk_r+0x1a>
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	b103      	cbz	r3, 8003716 <_sbrk_r+0x1a>
 8003714:	602b      	str	r3, [r5, #0]
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	20000140 	.word	0x20000140

0800371c <__malloc_lock>:
 800371c:	4770      	bx	lr

0800371e <__malloc_unlock>:
 800371e:	4770      	bx	lr

08003720 <_malloc_usable_size_r>:
 8003720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003724:	1f18      	subs	r0, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	bfbc      	itt	lt
 800372a:	580b      	ldrlt	r3, [r1, r0]
 800372c:	18c0      	addlt	r0, r0, r3
 800372e:	4770      	bx	lr

08003730 <_init>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr

0800373c <_fini>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	bf00      	nop
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr

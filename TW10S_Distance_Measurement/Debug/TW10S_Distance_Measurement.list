
TW10S_Distance_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000284c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a64  08002a64  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a64  08002a64  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a64  08002a64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a64  08002a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08002adc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002adc  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078ea  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001743  00000000  00000000  00027983  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f8  00000000  00000000  000290c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  000297c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000170b2  00000000  00000000  00029df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067c8  00000000  00000000  00040ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000822b6  00000000  00000000  0004766a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de8  00000000  00000000  000c999c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002940 	.word	0x08002940

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002940 	.word	0x08002940

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <TW10S_deleteBuffer>:

TW10S_Struct tw10s;
extern UART_HandleTypeDef huart1;

void TW10S_deleteBuffer(char* buffer)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	tw10s.count = 0;
 8000164:	4b0c      	ldr	r3, [pc, #48]	; (8000198 <TW10S_deleteBuffer+0x3c>)
 8000166:	2200      	movs	r2, #0
 8000168:	761a      	strb	r2, [r3, #24]
	for(int i=0;i<strlen(buffer);i++)
 800016a:	2300      	movs	r3, #0
 800016c:	60fb      	str	r3, [r7, #12]
 800016e:	e007      	b.n	8000180 <TW10S_deleteBuffer+0x24>
	{
		buffer[i] = 0;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	4413      	add	r3, r2
 8000176:	2200      	movs	r2, #0
 8000178:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<strlen(buffer);i++)
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	3301      	adds	r3, #1
 800017e:	60fb      	str	r3, [r7, #12]
 8000180:	6878      	ldr	r0, [r7, #4]
 8000182:	f7ff ffe3 	bl	800014c <strlen>
 8000186:	4602      	mov	r2, r0
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	429a      	cmp	r2, r3
 800018c:	d8f0      	bhi.n	8000170 <TW10S_deleteBuffer+0x14>
	}

}
 800018e:	bf00      	nop
 8000190:	3710      	adds	r7, #16
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	20000098 	.word	0x20000098

0800019c <TW10S_sendCommand>:

uint8_t TW10S_sendCommand(char* command, char* response, uint32_t timeout)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b088      	sub	sp, #32
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	607a      	str	r2, [r7, #4]
	uint8_t result = 0;
 80001a8:	2300      	movs	r3, #0
 80001aa:	77fb      	strb	r3, [r7, #31]
	TW10S_deleteBuffer((char*)&tw10s.buffer);
 80001ac:	483e      	ldr	r0, [pc, #248]	; (80002a8 <TW10S_sendCommand+0x10c>)
 80001ae:	f7ff ffd5 	bl	800015c <TW10S_deleteBuffer>
	uint32_t time = HAL_GetTick();
 80001b2:	f000 fbb7 	bl	8000924 <HAL_GetTick>
 80001b6:	61b8      	str	r0, [r7, #24]
	uint32_t time1 = HAL_GetTick();
 80001b8:	f000 fbb4 	bl	8000924 <HAL_GetTick>
 80001bc:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), 2000);
 80001be:	68f8      	ldr	r0, [r7, #12]
 80001c0:	f7ff ffc4 	bl	800014c <strlen>
 80001c4:	4603      	mov	r3, r0
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80001cc:	68f9      	ldr	r1, [r7, #12]
 80001ce:	4837      	ldr	r0, [pc, #220]	; (80002ac <TW10S_sendCommand+0x110>)
 80001d0:	f001 fb1b 	bl	800180a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",strlen("\r\n"),2000);
 80001d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80001d8:	2202      	movs	r2, #2
 80001da:	4935      	ldr	r1, [pc, #212]	; (80002b0 <TW10S_sendCommand+0x114>)
 80001dc:	4833      	ldr	r0, [pc, #204]	; (80002ac <TW10S_sendCommand+0x110>)
 80001de:	f001 fb14 	bl	800180a <HAL_UART_Transmit>
	while(result == 0)
 80001e2:	e059      	b.n	8000298 <TW10S_sendCommand+0xfc>
	{
		while(HAL_UART_Receive(&huart1, tw10s.rx_data,1,1000) != HAL_OK)
		{
			if(HAL_GetTick() - time > timeout)
 80001e4:	f000 fb9e 	bl	8000924 <HAL_GetTick>
 80001e8:	4602      	mov	r2, r0
 80001ea:	69bb      	ldr	r3, [r7, #24]
 80001ec:	1ad3      	subs	r3, r2, r3
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d201      	bcs.n	80001f8 <TW10S_sendCommand+0x5c>
			{
				return 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	e053      	b.n	80002a0 <TW10S_sendCommand+0x104>
		while(HAL_UART_Receive(&huart1, tw10s.rx_data,1,1000) != HAL_OK)
 80001f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001fc:	2201      	movs	r2, #1
 80001fe:	492d      	ldr	r1, [pc, #180]	; (80002b4 <TW10S_sendCommand+0x118>)
 8000200:	482a      	ldr	r0, [pc, #168]	; (80002ac <TW10S_sendCommand+0x110>)
 8000202:	f001 fb94 	bl	800192e <HAL_UART_Receive>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d1eb      	bne.n	80001e4 <TW10S_sendCommand+0x48>
			}
		}
		time = HAL_GetTick();
 800020c:	f000 fb8a 	bl	8000924 <HAL_GetTick>
 8000210:	61b8      	str	r0, [r7, #24]
		tw10s.buffer[tw10s.count++] = tw10s.rx_data[0];
 8000212:	4b29      	ldr	r3, [pc, #164]	; (80002b8 <TW10S_sendCommand+0x11c>)
 8000214:	7e1b      	ldrb	r3, [r3, #24]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	b2d1      	uxtb	r1, r2
 800021a:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <TW10S_sendCommand+0x11c>)
 800021c:	7611      	strb	r1, [r2, #24]
 800021e:	4619      	mov	r1, r3
 8000220:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <TW10S_sendCommand+0x11c>)
 8000222:	78da      	ldrb	r2, [r3, #3]
 8000224:	4b24      	ldr	r3, [pc, #144]	; (80002b8 <TW10S_sendCommand+0x11c>)
 8000226:	440b      	add	r3, r1
 8000228:	711a      	strb	r2, [r3, #4]
		while(HAL_GetTick() - time < timeout)
 800022a:	e02d      	b.n	8000288 <TW10S_sendCommand+0xec>
		{
			if(HAL_UART_Receive(&huart1, tw10s.rx_data, 1, 1000) == HAL_OK)
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4920      	ldr	r1, [pc, #128]	; (80002b4 <TW10S_sendCommand+0x118>)
 8000234:	481d      	ldr	r0, [pc, #116]	; (80002ac <TW10S_sendCommand+0x110>)
 8000236:	f001 fb7a 	bl	800192e <HAL_UART_Receive>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d10f      	bne.n	8000260 <TW10S_sendCommand+0xc4>
			{
				tw10s.buffer[tw10s.count++] = tw10s.rx_data[0];
 8000240:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <TW10S_sendCommand+0x11c>)
 8000242:	7e1b      	ldrb	r3, [r3, #24]
 8000244:	1c5a      	adds	r2, r3, #1
 8000246:	b2d1      	uxtb	r1, r2
 8000248:	4a1b      	ldr	r2, [pc, #108]	; (80002b8 <TW10S_sendCommand+0x11c>)
 800024a:	7611      	strb	r1, [r2, #24]
 800024c:	4619      	mov	r1, r3
 800024e:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <TW10S_sendCommand+0x11c>)
 8000250:	78da      	ldrb	r2, [r3, #3]
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <TW10S_sendCommand+0x11c>)
 8000254:	440b      	add	r3, r1
 8000256:	711a      	strb	r2, [r3, #4]
				time1 = HAL_GetTick();
 8000258:	f000 fb64 	bl	8000924 <HAL_GetTick>
 800025c:	6178      	str	r0, [r7, #20]
 800025e:	e013      	b.n	8000288 <TW10S_sendCommand+0xec>
			}
			else
			{
				if(HAL_GetTick() - time1 > 100)
 8000260:	f000 fb60 	bl	8000924 <HAL_GetTick>
 8000264:	4602      	mov	r2, r0
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	1ad3      	subs	r3, r2, r3
 800026a:	2b64      	cmp	r3, #100	; 0x64
 800026c:	d90c      	bls.n	8000288 <TW10S_sendCommand+0xec>
				{
					if(strstr((char*)tw10s.buffer,response) != NULL)
 800026e:	68b9      	ldr	r1, [r7, #8]
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <TW10S_sendCommand+0x10c>)
 8000272:	f001 ff59 	bl	8002128 <strstr>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d002      	beq.n	8000282 <TW10S_sendCommand+0xe6>
					{
						result = 1;
 800027c:	2301      	movs	r3, #1
 800027e:	77fb      	strb	r3, [r7, #31]
 8000280:	e00a      	b.n	8000298 <TW10S_sendCommand+0xfc>
					}
					else
					{
						result = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	77fb      	strb	r3, [r7, #31]
					}
					break;
 8000286:	e007      	b.n	8000298 <TW10S_sendCommand+0xfc>
		while(HAL_GetTick() - time < timeout)
 8000288:	f000 fb4c 	bl	8000924 <HAL_GetTick>
 800028c:	4602      	mov	r2, r0
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	1ad3      	subs	r3, r2, r3
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	d8c9      	bhi.n	800022c <TW10S_sendCommand+0x90>
	while(result == 0)
 8000298:	7ffb      	ldrb	r3, [r7, #31]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0ac      	beq.n	80001f8 <TW10S_sendCommand+0x5c>
				}
			}
		}
	}
	return result;
 800029e:	7ffb      	ldrb	r3, [r7, #31]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3720      	adds	r7, #32
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000009c 	.word	0x2000009c
 80002ac:	200000b4 	.word	0x200000b4
 80002b0:	08002958 	.word	0x08002958
 80002b4:	2000009b 	.word	0x2000009b
 80002b8:	20000098 	.word	0x20000098

080002bc <stopMeasure>:

void stopMeasure()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	TW10S_sendCommand("iHALT", "STOP OK", 2000);
 80002c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80002c4:	4902      	ldr	r1, [pc, #8]	; (80002d0 <stopMeasure+0x14>)
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <stopMeasure+0x18>)
 80002c8:	f7ff ff68 	bl	800019c <TW10S_sendCommand>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	0800295c 	.word	0x0800295c
 80002d4:	08002964 	.word	0x08002964

080002d8 <laserOn>:

void laserOn()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	TW10S_sendCommand("iLD:1", "LASER OPEN", 2000);
 80002dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80002e0:	4902      	ldr	r1, [pc, #8]	; (80002ec <laserOn+0x14>)
 80002e2:	4803      	ldr	r0, [pc, #12]	; (80002f0 <laserOn+0x18>)
 80002e4:	f7ff ff5a 	bl	800019c <TW10S_sendCommand>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	0800296c 	.word	0x0800296c
 80002f0:	08002978 	.word	0x08002978

080002f4 <setOffset>:
{
	TW10S_sendCommand("iLD:0", "LASER CLOSE", 2000);
}

void setOffset(uint8_t offset)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	char buff[20] = {0};
 80002fe:	f107 030c 	add.w	r3, r7, #12
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]
	sprintf(buff,"iSET:1,%d", offset);
 800030e:	79fa      	ldrb	r2, [r7, #7]
 8000310:	f107 030c 	add.w	r3, r7, #12
 8000314:	4907      	ldr	r1, [pc, #28]	; (8000334 <setOffset+0x40>)
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fee6 	bl	80020e8 <siprintf>
	TW10S_sendCommand(buff, "OK", 2000);
 800031c:	f107 030c 	add.w	r3, r7, #12
 8000320:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000324:	4904      	ldr	r1, [pc, #16]	; (8000338 <setOffset+0x44>)
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff38 	bl	800019c <TW10S_sendCommand>
}
 800032c:	bf00      	nop
 800032e:	3720      	adds	r7, #32
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	08002994 	.word	0x08002994
 8000338:	080029a0 	.word	0x080029a0

0800033c <setRange>:

void setRange(uint16_t range)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	80fb      	strh	r3, [r7, #6]
	char buff[20] = {0};
 8000346:	f107 030c 	add.w	r3, r7, #12
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]
	sprintf(buff,"iSET:2,%d", range);
 8000356:	88fa      	ldrh	r2, [r7, #6]
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	4907      	ldr	r1, [pc, #28]	; (800037c <setRange+0x40>)
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fec2 	bl	80020e8 <siprintf>
	TW10S_sendCommand(buff, "OK", 2000);
 8000364:	f107 030c 	add.w	r3, r7, #12
 8000368:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800036c:	4904      	ldr	r1, [pc, #16]	; (8000380 <setRange+0x44>)
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff14 	bl	800019c <TW10S_sendCommand>
}
 8000374:	bf00      	nop
 8000376:	3720      	adds	r7, #32
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	080029a4 	.word	0x080029a4
 8000380:	080029a0 	.word	0x080029a0

08000384 <setBaudrate>:

void setBaudrate(uint32_t baudrate)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	char buff[20] = {0};
 800038c:	f107 030c 	add.w	r3, r7, #12
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
	sprintf(buff,"iSET:3,%ld",baudrate);
 800039c:	f107 030c 	add.w	r3, r7, #12
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	4908      	ldr	r1, [pc, #32]	; (80003c4 <setBaudrate+0x40>)
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 fe9f 	bl	80020e8 <siprintf>
	TW10S_sendCommand(buff, "OK", 2000);
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003b2:	4905      	ldr	r1, [pc, #20]	; (80003c8 <setBaudrate+0x44>)
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff fef1 	bl	800019c <TW10S_sendCommand>
}
 80003ba:	bf00      	nop
 80003bc:	3720      	adds	r7, #32
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	080029b0 	.word	0x080029b0
 80003c8:	080029a0 	.word	0x080029a0

080003cc <TW10S_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern TW10S_Struct tw10s;

void TW10S_init()
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	stopMeasure();
 80003d0:	f7ff ff74 	bl	80002bc <stopMeasure>
	HAL_Delay(300);
 80003d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003d8:	f000 faae 	bl	8000938 <HAL_Delay>
	laserOn();
 80003dc:	f7ff ff7c 	bl	80002d8 <laserOn>
	HAL_Delay(300);
 80003e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003e4:	f000 faa8 	bl	8000938 <HAL_Delay>
	setOffset(-10);
 80003e8:	20f6      	movs	r0, #246	; 0xf6
 80003ea:	f7ff ff83 	bl	80002f4 <setOffset>
	HAL_Delay(300);
 80003ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003f2:	f000 faa1 	bl	8000938 <HAL_Delay>
	setRange(40000);
 80003f6:	f649 4040 	movw	r0, #40000	; 0x9c40
 80003fa:	f7ff ff9f 	bl	800033c <setRange>
	HAL_Delay(300);
 80003fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000402:	f000 fa99 	bl	8000938 <HAL_Delay>
	setBaudrate(38400);
 8000406:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 800040a:	f7ff ffbb 	bl	8000384 <setBaudrate>
	HAL_Delay(300);
 800040e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000412:	f000 fa91 	bl	8000938 <HAL_Delay>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000420:	f000 fa28 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000424:	f000 f814 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000428:	f000 f8ac 	bl	8000584 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800042c:	f000 f856 	bl	80004dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000430:	f000 f87e 	bl	8000530 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	TW10S_init();
 8000434:	f7ff ffca 	bl	80003cc <TW10S_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TW10S_sendCommand("iSM", "", 1000);
 8000438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800043c:	4902      	ldr	r1, [pc, #8]	; (8000448 <main+0x2c>)
 800043e:	4803      	ldr	r0, [pc, #12]	; (800044c <main+0x30>)
 8000440:	f7ff feac 	bl	800019c <TW10S_sendCommand>
 8000444:	e7f8      	b.n	8000438 <main+0x1c>
 8000446:	bf00      	nop
 8000448:	080029fc 	.word	0x080029fc
 800044c:	08002a00 	.word	0x08002a00

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b090      	sub	sp, #64	; 0x40
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0318 	add.w	r3, r7, #24
 800045a:	2228      	movs	r2, #40	; 0x28
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f001 fe3a 	bl	80020d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000472:	2301      	movs	r3, #1
 8000474:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000480:	2301      	movs	r3, #1
 8000482:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000484:	2302      	movs	r3, #2
 8000486:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800048e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000492:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000494:	f107 0318 	add.w	r3, r7, #24
 8000498:	4618      	mov	r0, r3
 800049a:	f000 fd4d 	bl	8000f38 <HAL_RCC_OscConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004a4:	f000 f890 	bl	80005c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a8:	230f      	movs	r3, #15
 80004aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ac:	2302      	movs	r3, #2
 80004ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2102      	movs	r1, #2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 ffb8 	bl	8001438 <HAL_RCC_ClockConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ce:	f000 f87b 	bl	80005c8 <Error_Handler>
  }
}
 80004d2:	bf00      	nop
 80004d4:	3740      	adds	r7, #64	; 0x40
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <MX_USART1_UART_Init+0x50>)
 80004e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 80004e8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 8000502:	220c      	movs	r2, #12
 8000504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_USART1_UART_Init+0x4c>)
 8000514:	f001 f92c 	bl	8001770 <HAL_UART_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800051e:	f000 f853 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200000b4 	.word	0x200000b4
 800052c:	40013800 	.word	0x40013800

08000530 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <MX_USART2_UART_Init+0x50>)
 8000538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <MX_USART2_UART_Init+0x4c>)
 800053c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_USART2_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_USART2_UART_Init+0x4c>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000568:	f001 f902 	bl	8001770 <HAL_UART_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000572:	f000 f829 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200000f4 	.word	0x200000f4
 8000580:	40004400 	.word	0x40004400

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_GPIO_Init+0x40>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <MX_GPIO_Init+0x40>)
 8000590:	f043 0320 	orr.w	r3, r3, #32
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_GPIO_Init+0x40>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0320 	and.w	r3, r3, #32
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_GPIO_Init+0x40>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <MX_GPIO_Init+0x40>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <MX_GPIO_Init+0x40>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ce:	e7fe      	b.n	80005ce <Error_Handler+0x6>

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <HAL_MspInit+0x5c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_MspInit+0x5c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_MspInit+0x5c>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_MspInit+0x5c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_MspInit+0x60>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_MspInit+0x60>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	40010000 	.word	0x40010000

08000634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0318 	add.w	r3, r7, #24
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a3b      	ldr	r2, [pc, #236]	; (800073c <HAL_UART_MspInit+0x108>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d13a      	bne.n	80006ca <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000654:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <HAL_UART_MspInit+0x10c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a39      	ldr	r2, [pc, #228]	; (8000740 <HAL_UART_MspInit+0x10c>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b37      	ldr	r3, [pc, #220]	; (8000740 <HAL_UART_MspInit+0x10c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b34      	ldr	r3, [pc, #208]	; (8000740 <HAL_UART_MspInit+0x10c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a33      	ldr	r2, [pc, #204]	; (8000740 <HAL_UART_MspInit+0x10c>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b31      	ldr	r3, [pc, #196]	; (8000740 <HAL_UART_MspInit+0x10c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	4619      	mov	r1, r3
 8000698:	482a      	ldr	r0, [pc, #168]	; (8000744 <HAL_UART_MspInit+0x110>)
 800069a:	f000 faf3 	bl	8000c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800069e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0318 	add.w	r3, r7, #24
 80006b0:	4619      	mov	r1, r3
 80006b2:	4824      	ldr	r0, [pc, #144]	; (8000744 <HAL_UART_MspInit+0x110>)
 80006b4:	f000 fae6 	bl	8000c84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2101      	movs	r1, #1
 80006bc:	2025      	movs	r0, #37	; 0x25
 80006be:	f000 fa34 	bl	8000b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006c2:	2025      	movs	r0, #37	; 0x25
 80006c4:	f000 fa4d 	bl	8000b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006c8:	e034      	b.n	8000734 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a1e      	ldr	r2, [pc, #120]	; (8000748 <HAL_UART_MspInit+0x114>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d12f      	bne.n	8000734 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006de:	61d3      	str	r3, [r2, #28]
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a13      	ldr	r2, [pc, #76]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000704:	2304      	movs	r3, #4
 8000706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	4619      	mov	r1, r3
 8000716:	480b      	ldr	r0, [pc, #44]	; (8000744 <HAL_UART_MspInit+0x110>)
 8000718:	f000 fab4 	bl	8000c84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800071c:	2308      	movs	r3, #8
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0318 	add.w	r3, r7, #24
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <HAL_UART_MspInit+0x110>)
 8000730:	f000 faa8 	bl	8000c84 <HAL_GPIO_Init>
}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013800 	.word	0x40013800
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800
 8000748:	40004400 	.word	0x40004400

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <MemManage_Handler+0x4>

0800075e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <UsageFault_Handler+0x4>

0800076a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000792:	f000 f8b5 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <USART1_IRQHandler+0x10>)
 80007a2:	f001 f963 	bl	8001a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000b4 	.word	0x200000b4

080007b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <_sbrk+0x5c>)
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <_sbrk+0x60>)
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <_sbrk+0x64>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <_sbrk+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d207      	bcs.n	80007f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e0:	f001 fc50 	bl	8002084 <__errno>
 80007e4:	4602      	mov	r2, r0
 80007e6:	230c      	movs	r3, #12
 80007e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	e009      	b.n	8000804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <_sbrk+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <_sbrk+0x64>)
 8000800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20005000 	.word	0x20005000
 8000810:	00000400 	.word	0x00000400
 8000814:	2000008c 	.word	0x2000008c
 8000818:	20000140 	.word	0x20000140

0800081c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000828:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800082a:	e003      	b.n	8000834 <LoopCopyDataInit>

0800082c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800082e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000830:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000832:	3104      	adds	r1, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000838:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800083c:	d3f6      	bcc.n	800082c <CopyDataInit>
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000840:	e002      	b.n	8000848 <LoopFillZerobss>

08000842 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000844:	f842 3b04 	str.w	r3, [r2], #4

08000848 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800084a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800084c:	d3f9      	bcc.n	8000842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800084e:	f7ff ffe5 	bl	800081c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000852:	f001 fc1d 	bl	8002090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f7ff fde1 	bl	800041c <main>
  bx lr
 800085a:	4770      	bx	lr
  ldr r3, =_sidata
 800085c:	08002a6c 	.word	0x08002a6c
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000864:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000868:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800086c:	2000013c 	.word	0x2000013c

08000870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_2_IRQHandler>
	...

08000874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_Init+0x28>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_Init+0x28>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 f945 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088a:	2000      	movs	r0, #0
 800088c:	f000 f808 	bl	80008a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000890:	f7ff fe9e 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40022000 	.word	0x40022000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x54>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x58>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f95d 	bl	8000b7e <HAL_SYSTICK_Config>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00e      	b.n	80008ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d80a      	bhi.n	80008ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f000 f925 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_InitTick+0x5c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a03      	ldr	r2, [pc, #12]	; (8000920 <HAL_IncTick+0x20>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000008 	.word	0x20000008
 8000920:	20000134 	.word	0x20000134

08000924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	; (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000134 	.word	0x20000134

08000938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000940:	f7ff fff0 	bl	8000924 <HAL_GetTick>
 8000944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000950:	d005      	beq.n	800095e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_Delay+0x40>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095e:	bf00      	nop
 8000960:	f7ff ffe0 	bl	8000924 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d8f7      	bhi.n	8000960 <HAL_Delay+0x28>
  {
  }
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000008 	.word	0x20000008

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4906      	ldr	r1, [pc, #24]	; (8000a14 <__NVIC_EnableIRQ+0x34>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff90 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff2d 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff42 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff35 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffa2 	bl	8000ad0 <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d005      	beq.n	8000bba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e051      	b.n	8000c5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 020e 	bic.w	r2, r2, #14
 8000bc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0201 	bic.w	r2, r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_DMA_Abort_IT+0xd0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d029      	beq.n	8000c38 <HAL_DMA_Abort_IT+0xa0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a20      	ldr	r2, [pc, #128]	; (8000c6c <HAL_DMA_Abort_IT+0xd4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d022      	beq.n	8000c34 <HAL_DMA_Abort_IT+0x9c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <HAL_DMA_Abort_IT+0xd8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d01a      	beq.n	8000c2e <HAL_DMA_Abort_IT+0x96>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <HAL_DMA_Abort_IT+0xdc>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d012      	beq.n	8000c28 <HAL_DMA_Abort_IT+0x90>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <HAL_DMA_Abort_IT+0xe0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d00a      	beq.n	8000c22 <HAL_DMA_Abort_IT+0x8a>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <HAL_DMA_Abort_IT+0xe4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d102      	bne.n	8000c1c <HAL_DMA_Abort_IT+0x84>
 8000c16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c1a:	e00e      	b.n	8000c3a <HAL_DMA_Abort_IT+0xa2>
 8000c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c20:	e00b      	b.n	8000c3a <HAL_DMA_Abort_IT+0xa2>
 8000c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c26:	e008      	b.n	8000c3a <HAL_DMA_Abort_IT+0xa2>
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	e005      	b.n	8000c3a <HAL_DMA_Abort_IT+0xa2>
 8000c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c32:	e002      	b.n	8000c3a <HAL_DMA_Abort_IT+0xa2>
 8000c34:	2310      	movs	r3, #16
 8000c36:	e000      	b.n	8000c3a <HAL_DMA_Abort_IT+0xa2>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	4a11      	ldr	r2, [pc, #68]	; (8000c80 <HAL_DMA_Abort_IT+0xe8>)
 8000c3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	4798      	blx	r3
    } 
  }
  return status;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40020008 	.word	0x40020008
 8000c6c:	4002001c 	.word	0x4002001c
 8000c70:	40020030 	.word	0x40020030
 8000c74:	40020044 	.word	0x40020044
 8000c78:	40020058 	.word	0x40020058
 8000c7c:	4002006c 	.word	0x4002006c
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b08b      	sub	sp, #44	; 0x2c
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e127      	b.n	8000ee8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f040 8116 	bne.w	8000ee2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b12      	cmp	r3, #18
 8000cbc:	d034      	beq.n	8000d28 <HAL_GPIO_Init+0xa4>
 8000cbe:	2b12      	cmp	r3, #18
 8000cc0:	d80d      	bhi.n	8000cde <HAL_GPIO_Init+0x5a>
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d02b      	beq.n	8000d1e <HAL_GPIO_Init+0x9a>
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d804      	bhi.n	8000cd4 <HAL_GPIO_Init+0x50>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d031      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d01c      	beq.n	8000d0c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cd2:	e048      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d043      	beq.n	8000d60 <HAL_GPIO_Init+0xdc>
 8000cd8:	2b11      	cmp	r3, #17
 8000cda:	d01b      	beq.n	8000d14 <HAL_GPIO_Init+0x90>
          break;
 8000cdc:	e043      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cde:	4a89      	ldr	r2, [pc, #548]	; (8000f04 <HAL_GPIO_Init+0x280>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d026      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
 8000ce4:	4a87      	ldr	r2, [pc, #540]	; (8000f04 <HAL_GPIO_Init+0x280>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d806      	bhi.n	8000cf8 <HAL_GPIO_Init+0x74>
 8000cea:	4a87      	ldr	r2, [pc, #540]	; (8000f08 <HAL_GPIO_Init+0x284>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d020      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
 8000cf0:	4a86      	ldr	r2, [pc, #536]	; (8000f0c <HAL_GPIO_Init+0x288>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d01d      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
          break;
 8000cf6:	e036      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cf8:	4a85      	ldr	r2, [pc, #532]	; (8000f10 <HAL_GPIO_Init+0x28c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d019      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
 8000cfe:	4a85      	ldr	r2, [pc, #532]	; (8000f14 <HAL_GPIO_Init+0x290>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d016      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
 8000d04:	4a84      	ldr	r2, [pc, #528]	; (8000f18 <HAL_GPIO_Init+0x294>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
          break;
 8000d0a:	e02c      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	623b      	str	r3, [r7, #32]
          break;
 8000d12:	e028      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e023      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	3308      	adds	r3, #8
 8000d24:	623b      	str	r3, [r7, #32]
          break;
 8000d26:	e01e      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	330c      	adds	r3, #12
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	e019      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	623b      	str	r3, [r7, #32]
          break;
 8000d3e:	e012      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d105      	bne.n	8000d54 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69fa      	ldr	r2, [r7, #28]
 8000d50:	611a      	str	r2, [r3, #16]
          break;
 8000d52:	e008      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d54:	2308      	movs	r3, #8
 8000d56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	615a      	str	r2, [r3, #20]
          break;
 8000d5e:	e002      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
          break;
 8000d64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	2bff      	cmp	r3, #255	; 0xff
 8000d6a:	d801      	bhi.n	8000d70 <HAL_GPIO_Init+0xec>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	e001      	b.n	8000d74 <HAL_GPIO_Init+0xf0>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3304      	adds	r3, #4
 8000d74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	2bff      	cmp	r3, #255	; 0xff
 8000d7a:	d802      	bhi.n	8000d82 <HAL_GPIO_Init+0xfe>
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	e002      	b.n	8000d88 <HAL_GPIO_Init+0x104>
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	3b08      	subs	r3, #8
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	210f      	movs	r1, #15
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	401a      	ands	r2, r3
 8000d9a:	6a39      	ldr	r1, [r7, #32]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	431a      	orrs	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 8096 	beq.w	8000ee2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000db6:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <HAL_GPIO_Init+0x298>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a58      	ldr	r2, [pc, #352]	; (8000f1c <HAL_GPIO_Init+0x298>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b56      	ldr	r3, [pc, #344]	; (8000f1c <HAL_GPIO_Init+0x298>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dce:	4a54      	ldr	r2, [pc, #336]	; (8000f20 <HAL_GPIO_Init+0x29c>)
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4013      	ands	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4b      	ldr	r2, [pc, #300]	; (8000f24 <HAL_GPIO_Init+0x2a0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_GPIO_Init+0x19e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4a      	ldr	r2, [pc, #296]	; (8000f28 <HAL_GPIO_Init+0x2a4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00d      	beq.n	8000e1e <HAL_GPIO_Init+0x19a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a49      	ldr	r2, [pc, #292]	; (8000f2c <HAL_GPIO_Init+0x2a8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <HAL_GPIO_Init+0x196>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a48      	ldr	r2, [pc, #288]	; (8000f30 <HAL_GPIO_Init+0x2ac>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_GPIO_Init+0x192>
 8000e12:	2303      	movs	r3, #3
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x1a0>
 8000e16:	2304      	movs	r3, #4
 8000e18:	e004      	b.n	8000e24 <HAL_GPIO_Init+0x1a0>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_Init+0x1a0>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x1a0>
 8000e22:	2300      	movs	r3, #0
 8000e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e26:	f002 0203 	and.w	r2, r2, #3
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	4093      	lsls	r3, r2
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e34:	493a      	ldr	r1, [pc, #232]	; (8000f20 <HAL_GPIO_Init+0x29c>)
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e4e:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4938      	ldr	r1, [pc, #224]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	600b      	str	r3, [r1, #0]
 8000e5a:	e006      	b.n	8000e6a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	4933      	ldr	r1, [pc, #204]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e76:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	492e      	ldr	r1, [pc, #184]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	604b      	str	r3, [r1, #4]
 8000e82:	e006      	b.n	8000e92 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	4929      	ldr	r1, [pc, #164]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000e8e:	4013      	ands	r3, r2
 8000e90:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e9e:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	4924      	ldr	r1, [pc, #144]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	608b      	str	r3, [r1, #8]
 8000eaa:	e006      	b.n	8000eba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	491f      	ldr	r1, [pc, #124]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d006      	beq.n	8000ed4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	491a      	ldr	r1, [pc, #104]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	60cb      	str	r3, [r1, #12]
 8000ed2:	e006      	b.n	8000ee2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	4915      	ldr	r1, [pc, #84]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f47f aed0 	bne.w	8000c98 <HAL_GPIO_Init+0x14>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	372c      	adds	r7, #44	; 0x2c
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	10210000 	.word	0x10210000
 8000f08:	10110000 	.word	0x10110000
 8000f0c:	10120000 	.word	0x10120000
 8000f10:	10310000 	.word	0x10310000
 8000f14:	10320000 	.word	0x10320000
 8000f18:	10220000 	.word	0x10220000
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000
 8000f24:	40010800 	.word	0x40010800
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	40011000 	.word	0x40011000
 8000f30:	40011400 	.word	0x40011400
 8000f34:	40010400 	.word	0x40010400

08000f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e26c      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8087 	beq.w	8001066 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f58:	4b92      	ldr	r3, [pc, #584]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 030c 	and.w	r3, r3, #12
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d00c      	beq.n	8000f7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f64:	4b8f      	ldr	r3, [pc, #572]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 030c 	and.w	r3, r3, #12
 8000f6c:	2b08      	cmp	r3, #8
 8000f6e:	d112      	bne.n	8000f96 <HAL_RCC_OscConfig+0x5e>
 8000f70:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7c:	d10b      	bne.n	8000f96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7e:	4b89      	ldr	r3, [pc, #548]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d06c      	beq.n	8001064 <HAL_RCC_OscConfig+0x12c>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d168      	bne.n	8001064 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e246      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9e:	d106      	bne.n	8000fae <HAL_RCC_OscConfig+0x76>
 8000fa0:	4b80      	ldr	r3, [pc, #512]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a7f      	ldr	r2, [pc, #508]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e02e      	b.n	800100c <HAL_RCC_OscConfig+0xd4>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10c      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x98>
 8000fb6:	4b7b      	ldr	r3, [pc, #492]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a7a      	ldr	r2, [pc, #488]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b78      	ldr	r3, [pc, #480]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a77      	ldr	r2, [pc, #476]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e01d      	b.n	800100c <HAL_RCC_OscConfig+0xd4>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0xbc>
 8000fda:	4b72      	ldr	r3, [pc, #456]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a71      	ldr	r2, [pc, #452]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	4b6f      	ldr	r3, [pc, #444]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a6e      	ldr	r2, [pc, #440]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e00b      	b.n	800100c <HAL_RCC_OscConfig+0xd4>
 8000ff4:	4b6b      	ldr	r3, [pc, #428]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a6a      	ldr	r2, [pc, #424]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b68      	ldr	r3, [pc, #416]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a67      	ldr	r2, [pc, #412]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8001006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fc86 	bl	8000924 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff fc82 	bl	8000924 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e1fa      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0xe4>
 800103a:	e014      	b.n	8001066 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fc72 	bl	8000924 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001044:	f7ff fc6e 	bl	8000924 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b64      	cmp	r3, #100	; 0x64
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e1e6      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	4b53      	ldr	r3, [pc, #332]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x10c>
 8001062:	e000      	b.n	8001066 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d063      	beq.n	800113a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001072:	4b4c      	ldr	r3, [pc, #304]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00b      	beq.n	8001096 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800107e:	4b49      	ldr	r3, [pc, #292]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b08      	cmp	r3, #8
 8001088:	d11c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x18c>
 800108a:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d116      	bne.n	80010c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001096:	4b43      	ldr	r3, [pc, #268]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <HAL_RCC_OscConfig+0x176>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d001      	beq.n	80010ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e1ba      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ae:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4939      	ldr	r1, [pc, #228]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c2:	e03a      	b.n	800113a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d020      	beq.n	800110e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_RCC_OscConfig+0x270>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fc27 	bl	8000924 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fc23 	bl	8000924 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e19b      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f0      	beq.n	80010da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4927      	ldr	r1, [pc, #156]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8001108:	4313      	orrs	r3, r2
 800110a:	600b      	str	r3, [r1, #0]
 800110c:	e015      	b.n	800113a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110e:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <HAL_RCC_OscConfig+0x270>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fc06 	bl	8000924 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111c:	f7ff fc02 	bl	8000924 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e17a      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d03a      	beq.n	80011bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d019      	beq.n	8001182 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_RCC_OscConfig+0x274>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001154:	f7ff fbe6 	bl	8000924 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115c:	f7ff fbe2 	bl	8000924 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e15a      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_RCC_OscConfig+0x26c>)
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 fada 	bl	8001734 <RCC_Delay>
 8001180:	e01c      	b.n	80011bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_RCC_OscConfig+0x274>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001188:	f7ff fbcc 	bl	8000924 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118e:	e00f      	b.n	80011b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fbc8 	bl	8000924 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d908      	bls.n	80011b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e140      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	42420000 	.word	0x42420000
 80011ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b0:	4b9e      	ldr	r3, [pc, #632]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1e9      	bne.n	8001190 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80a6 	beq.w	8001316 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ce:	4b97      	ldr	r3, [pc, #604]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10d      	bne.n	80011f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b94      	ldr	r3, [pc, #592]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a93      	ldr	r2, [pc, #588]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b91      	ldr	r3, [pc, #580]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f2:	2301      	movs	r3, #1
 80011f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f6:	4b8e      	ldr	r3, [pc, #568]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d118      	bne.n	8001234 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001202:	4b8b      	ldr	r3, [pc, #556]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a8a      	ldr	r2, [pc, #552]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120e:	f7ff fb89 	bl	8000924 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001216:	f7ff fb85 	bl	8000924 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b64      	cmp	r3, #100	; 0x64
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e0fd      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	4b81      	ldr	r3, [pc, #516]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d106      	bne.n	800124a <HAL_RCC_OscConfig+0x312>
 800123c:	4b7b      	ldr	r3, [pc, #492]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4a7a      	ldr	r2, [pc, #488]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6213      	str	r3, [r2, #32]
 8001248:	e02d      	b.n	80012a6 <HAL_RCC_OscConfig+0x36e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x334>
 8001252:	4b76      	ldr	r3, [pc, #472]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4a75      	ldr	r2, [pc, #468]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6213      	str	r3, [r2, #32]
 800125e:	4b73      	ldr	r3, [pc, #460]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4a72      	ldr	r2, [pc, #456]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001264:	f023 0304 	bic.w	r3, r3, #4
 8001268:	6213      	str	r3, [r2, #32]
 800126a:	e01c      	b.n	80012a6 <HAL_RCC_OscConfig+0x36e>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b05      	cmp	r3, #5
 8001272:	d10c      	bne.n	800128e <HAL_RCC_OscConfig+0x356>
 8001274:	4b6d      	ldr	r3, [pc, #436]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	4a6c      	ldr	r2, [pc, #432]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6213      	str	r3, [r2, #32]
 8001280:	4b6a      	ldr	r3, [pc, #424]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4a69      	ldr	r2, [pc, #420]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6213      	str	r3, [r2, #32]
 800128c:	e00b      	b.n	80012a6 <HAL_RCC_OscConfig+0x36e>
 800128e:	4b67      	ldr	r3, [pc, #412]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4a66      	ldr	r2, [pc, #408]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6213      	str	r3, [r2, #32]
 800129a:	4b64      	ldr	r3, [pc, #400]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4a63      	ldr	r2, [pc, #396]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	f023 0304 	bic.w	r3, r3, #4
 80012a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d015      	beq.n	80012da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ae:	f7ff fb39 	bl	8000924 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b4:	e00a      	b.n	80012cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b6:	f7ff fb35 	bl	8000924 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e0ab      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012cc:	4b57      	ldr	r3, [pc, #348]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0ee      	beq.n	80012b6 <HAL_RCC_OscConfig+0x37e>
 80012d8:	e014      	b.n	8001304 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fb23 	bl	8000924 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff fb1f 	bl	8000924 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e095      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f8:	4b4c      	ldr	r3, [pc, #304]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1ee      	bne.n	80012e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d105      	bne.n	8001316 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130a:	4b48      	ldr	r3, [pc, #288]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a47      	ldr	r2, [pc, #284]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001314:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8081 	beq.w	8001422 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001320:	4b42      	ldr	r3, [pc, #264]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d061      	beq.n	80013f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d146      	bne.n	80013c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001334:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <HAL_RCC_OscConfig+0x4fc>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff faf3 	bl	8000924 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff faef 	bl	8000924 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e067      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001354:	4b35      	ldr	r3, [pc, #212]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d108      	bne.n	800137c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	492d      	ldr	r1, [pc, #180]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a19      	ldr	r1, [r3, #32]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	430b      	orrs	r3, r1
 800138e:	4927      	ldr	r1, [pc, #156]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_RCC_OscConfig+0x4fc>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fac3 	bl	8000924 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff fabf 	bl	8000924 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e037      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x46a>
 80013c0:	e02f      	b.n	8001422 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_RCC_OscConfig+0x4fc>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff faac 	bl	8000924 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d0:	f7ff faa8 	bl	8000924 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e020      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x498>
 80013ee:	e018      	b.n	8001422 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e013      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	429a      	cmp	r2, r3
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000
 8001430:	40007000 	.word	0x40007000
 8001434:	42420060 	.word	0x42420060

08001438 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0d0      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800144c:	4b6a      	ldr	r3, [pc, #424]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d910      	bls.n	800147c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 0207 	bic.w	r2, r3, #7
 8001462:	4965      	ldr	r1, [pc, #404]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0b8      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001494:	4b59      	ldr	r3, [pc, #356]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a58      	ldr	r2, [pc, #352]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800149e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a52      	ldr	r2, [pc, #328]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b8:	4b50      	ldr	r3, [pc, #320]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	494d      	ldr	r1, [pc, #308]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d040      	beq.n	8001558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b47      	ldr	r3, [pc, #284]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d115      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e07f      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f6:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e073      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e06b      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001516:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f023 0203 	bic.w	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4936      	ldr	r1, [pc, #216]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001528:	f7ff f9fc 	bl	8000924 <HAL_GetTick>
 800152c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	e00a      	b.n	8001546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001530:	f7ff f9f8 	bl	8000924 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e053      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 020c 	and.w	r2, r3, #12
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	429a      	cmp	r2, r3
 8001556:	d1eb      	bne.n	8001530 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d210      	bcs.n	8001588 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 0207 	bic.w	r2, r3, #7
 800156e:	4922      	ldr	r1, [pc, #136]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e032      	b.n	80015ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4916      	ldr	r1, [pc, #88]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015c6:	f000 f821 	bl	800160c <HAL_RCC_GetSysClockFreq>
 80015ca:	4601      	mov	r1, r0
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_RCC_ClockConfig+0x1c8>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	fa21 f303 	lsr.w	r3, r1, r3
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_RCC_ClockConfig+0x1cc>)
 80015e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_RCC_ClockConfig+0x1d0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff f95a 	bl	80008a0 <HAL_InitTick>

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40022000 	.word	0x40022000
 80015fc:	40021000 	.word	0x40021000
 8001600:	08002a18 	.word	0x08002a18
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004

0800160c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800160c:	b490      	push	{r4, r7}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001614:	1d3c      	adds	r4, r7, #4
 8001616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800161c:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001636:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b04      	cmp	r3, #4
 8001644:	d002      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x40>
 8001646:	2b08      	cmp	r3, #8
 8001648:	d003      	beq.n	8001652 <HAL_RCC_GetSysClockFreq+0x46>
 800164a:	e02d      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800164e:	623b      	str	r3, [r7, #32]
      break;
 8001650:	e02d      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800165e:	4413      	add	r3, r2
 8001660:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001664:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	0c5b      	lsrs	r3, r3, #17
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800167e:	4413      	add	r3, r2
 8001680:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001684:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800168a:	fb02 f203 	mul.w	r2, r2, r3
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
 8001696:	e004      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	623b      	str	r3, [r7, #32]
      break;
 80016a6:	e002      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016aa:	623b      	str	r3, [r7, #32]
      break;
 80016ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ae:	6a3b      	ldr	r3, [r7, #32]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc90      	pop	{r4, r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	08002a04 	.word	0x08002a04
 80016c0:	08002a14 	.word	0x08002a14
 80016c4:	40021000 	.word	0x40021000
 80016c8:	007a1200 	.word	0x007a1200
 80016cc:	003d0900 	.word	0x003d0900

080016d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d4:	4b02      	ldr	r3, [pc, #8]	; (80016e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000000 	.word	0x20000000

080016e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016e8:	f7ff fff2 	bl	80016d0 <HAL_RCC_GetHCLKFreq>
 80016ec:	4601      	mov	r1, r0
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	4a03      	ldr	r2, [pc, #12]	; (8001708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fa:	5cd3      	ldrb	r3, [r2, r3]
 80016fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001700:	4618      	mov	r0, r3
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	08002a28 	.word	0x08002a28

0800170c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001710:	f7ff ffde 	bl	80016d0 <HAL_RCC_GetHCLKFreq>
 8001714:	4601      	mov	r1, r0
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	0adb      	lsrs	r3, r3, #11
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	4a03      	ldr	r2, [pc, #12]	; (8001730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	08002a28 	.word	0x08002a28

08001734 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <RCC_Delay+0x34>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <RCC_Delay+0x38>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0a5b      	lsrs	r3, r3, #9
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001750:	bf00      	nop
  }
  while (Delay --);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	60fa      	str	r2, [r7, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f9      	bne.n	8001750 <RCC_Delay+0x1c>
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000000 	.word	0x20000000
 800176c:	10624dd3 	.word	0x10624dd3

08001770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e03f      	b.n	8001802 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe ff4c 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2224      	movs	r2, #36	; 0x24
 80017a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fbd7 	bl	8001f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2220      	movs	r2, #32
 80017f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2220      	movs	r2, #32
 80017fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b08a      	sub	sp, #40	; 0x28
 800180e:	af02      	add	r7, sp, #8
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4613      	mov	r3, r2
 8001818:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b20      	cmp	r3, #32
 8001828:	d17c      	bne.n	8001924 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HAL_UART_Transmit+0x2c>
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e075      	b.n	8001926 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_UART_Transmit+0x3e>
 8001844:	2302      	movs	r3, #2
 8001846:	e06e      	b.n	8001926 <HAL_UART_Transmit+0x11c>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2221      	movs	r2, #33	; 0x21
 800185a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800185e:	f7ff f861 	bl	8000924 <HAL_GetTick>
 8001862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	88fa      	ldrh	r2, [r7, #6]
 800186e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001878:	d108      	bne.n	800188c <HAL_UART_Transmit+0x82>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d104      	bne.n	800188c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	e003      	b.n	8001894 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800189c:	e02a      	b.n	80018f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2200      	movs	r2, #0
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f9fa 	bl	8001ca2 <UART_WaitOnFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e036      	b.n	8001926 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10b      	bne.n	80018d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	3302      	adds	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	e007      	b.n	80018e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	781a      	ldrb	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	3301      	adds	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1cf      	bne.n	800189e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2200      	movs	r2, #0
 8001906:	2140      	movs	r1, #64	; 0x40
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f9ca 	bl	8001ca2 <UART_WaitOnFlagUntilTimeout>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e006      	b.n	8001926 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e000      	b.n	8001926 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
  }
}
 8001926:	4618      	mov	r0, r3
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b08a      	sub	sp, #40	; 0x28
 8001932:	af02      	add	r7, sp, #8
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4613      	mov	r3, r2
 800193c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b20      	cmp	r3, #32
 800194c:	f040 8089 	bne.w	8001a62 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_UART_Receive+0x2e>
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e081      	b.n	8001a64 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_UART_Receive+0x40>
 800196a:	2302      	movs	r3, #2
 800196c:	e07a      	b.n	8001a64 <HAL_UART_Receive+0x136>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2222      	movs	r2, #34	; 0x22
 8001980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001984:	f7fe ffce 	bl	8000924 <HAL_GetTick>
 8001988:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800199e:	d108      	bne.n	80019b2 <HAL_UART_Receive+0x84>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d104      	bne.n	80019b2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	e003      	b.n	80019ba <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80019c2:	e043      	b.n	8001a4c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2200      	movs	r2, #0
 80019cc:	2120      	movs	r1, #32
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f967 	bl	8001ca2 <UART_WaitOnFlagUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e042      	b.n	8001a64 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10c      	bne.n	80019fe <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	3302      	adds	r3, #2
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	e01f      	b.n	8001a3e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a06:	d007      	beq.n	8001a18 <HAL_UART_Receive+0xea>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_UART_Receive+0xf8>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e008      	b.n	8001a38 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1b6      	bne.n	80019c4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001a62:	2302      	movs	r3, #2
  }
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10d      	bne.n	8001abe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_UART_IRQHandler+0x52>
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f9d5 	bl	8001e66 <UART_Receive_IT>
      return;
 8001abc:	e0d1      	b.n	8001c62 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80b0 	beq.w	8001c26 <HAL_UART_IRQHandler+0x1ba>
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_UART_IRQHandler+0x70>
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80a5 	beq.w	8001c26 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <HAL_UART_IRQHandler+0x90>
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af4:	f043 0201 	orr.w	r2, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00a      	beq.n	8001b1c <HAL_UART_IRQHandler+0xb0>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b14:	f043 0202 	orr.w	r2, r3, #2
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_UART_IRQHandler+0xd0>
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b34:	f043 0204 	orr.w	r2, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00f      	beq.n	8001b66 <HAL_UART_IRQHandler+0xfa>
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d104      	bne.n	8001b5a <HAL_UART_IRQHandler+0xee>
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5e:	f043 0208 	orr.w	r2, r3, #8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d078      	beq.n	8001c60 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_UART_IRQHandler+0x11c>
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f96f 	bl	8001e66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf14      	ite	ne
 8001b96:	2301      	movne	r3, #1
 8001b98:	2300      	moveq	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d102      	bne.n	8001bb0 <HAL_UART_IRQHandler+0x144>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d031      	beq.n	8001c14 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8c0 	bl	8001d36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d023      	beq.n	8001c0c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bd2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <HAL_UART_IRQHandler+0x1fc>)
 8001be2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe ffd5 	bl	8000b98 <HAL_DMA_Abort_IT>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d016      	beq.n	8001c22 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c02:	e00e      	b.n	8001c22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f843 	bl	8001c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c0a:	e00a      	b.n	8001c22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f83f 	bl	8001c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c12:	e006      	b.n	8001c22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f83b 	bl	8001c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001c20:	e01e      	b.n	8001c60 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c22:	bf00      	nop
    return;
 8001c24:	e01c      	b.n	8001c60 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_UART_IRQHandler+0x1d6>
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f8ac 	bl	8001d98 <UART_Transmit_IT>
    return;
 8001c40:	e00f      	b.n	8001c62 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00a      	beq.n	8001c62 <HAL_UART_IRQHandler+0x1f6>
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8ed 	bl	8001e36 <UART_EndTransmit_IT>
    return;
 8001c5c:	bf00      	nop
 8001c5e:	e000      	b.n	8001c62 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001c60:	bf00      	nop
  }
}
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	08001d71 	.word	0x08001d71

08001c6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb2:	e02c      	b.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d028      	beq.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cc2:	f7fe fe2f 	bl	8000924 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d21d      	bcs.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ce0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e00f      	b.n	8001d2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d0c3      	beq.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d4c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff ff80 	bl	8001c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b21      	cmp	r3, #33	; 0x21
 8001daa:	d13e      	bne.n	8001e2a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db4:	d114      	bne.n	8001de0 <UART_Transmit_IT+0x48>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d110      	bne.n	8001de0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	1c9a      	adds	r2, r3, #2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	621a      	str	r2, [r3, #32]
 8001dde:	e008      	b.n	8001df2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	1c59      	adds	r1, r3, #1
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6211      	str	r1, [r2, #32]
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e2a:	2302      	movs	r3, #2
  }
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff08 	bl	8001c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b22      	cmp	r3, #34	; 0x22
 8001e78:	d170      	bne.n	8001f5c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e82:	d117      	bne.n	8001eb4 <UART_Receive_IT+0x4e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d113      	bne.n	8001eb4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	1c9a      	adds	r2, r3, #2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb2:	e026      	b.n	8001f02 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec6:	d007      	beq.n	8001ed8 <UART_Receive_IT+0x72>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <UART_Receive_IT+0x80>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d106      	bne.n	8001ee6 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	e008      	b.n	8001ef8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d120      	bne.n	8001f58 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0220 	bic.w	r2, r2, #32
 8001f24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0201 	bic.w	r2, r2, #1
 8001f44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fe95 	bl	8001c7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e002      	b.n	8001f5e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e000      	b.n	8001f5e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fa2:	f023 030c 	bic.w	r3, r3, #12
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2c      	ldr	r2, [pc, #176]	; (800207c <UART_SetConfig+0x114>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d103      	bne.n	8001fd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fd0:	f7ff fb9c 	bl	800170c <HAL_RCC_GetPCLK2Freq>
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	e002      	b.n	8001fde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fd8:	f7ff fb84 	bl	80016e4 <HAL_RCC_GetPCLK1Freq>
 8001fdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009a      	lsls	r2, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	4a22      	ldr	r2, [pc, #136]	; (8002080 <UART_SetConfig+0x118>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	0119      	lsls	r1, r3, #4
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	009a      	lsls	r2, r3, #2
 8002008:	441a      	add	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fbb2 f2f3 	udiv	r2, r2, r3
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <UART_SetConfig+0x118>)
 8002016:	fba3 0302 	umull	r0, r3, r3, r2
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2064      	movs	r0, #100	; 0x64
 800201e:	fb00 f303 	mul.w	r3, r0, r3
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	3332      	adds	r3, #50	; 0x32
 8002028:	4a15      	ldr	r2, [pc, #84]	; (8002080 <UART_SetConfig+0x118>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002034:	4419      	add	r1, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009a      	lsls	r2, r3, #2
 8002040:	441a      	add	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fbb2 f2f3 	udiv	r2, r2, r3
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <UART_SetConfig+0x118>)
 800204e:	fba3 0302 	umull	r0, r3, r3, r2
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2064      	movs	r0, #100	; 0x64
 8002056:	fb00 f303 	mul.w	r3, r0, r3
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	3332      	adds	r3, #50	; 0x32
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <UART_SetConfig+0x118>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	f003 020f 	and.w	r2, r3, #15
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	440a      	add	r2, r1
 8002072:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40013800 	.word	0x40013800
 8002080:	51eb851f 	.word	0x51eb851f

08002084 <__errno>:
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <__errno+0x8>)
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	2000000c 	.word	0x2000000c

08002090 <__libc_init_array>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	2500      	movs	r5, #0
 8002094:	4e0c      	ldr	r6, [pc, #48]	; (80020c8 <__libc_init_array+0x38>)
 8002096:	4c0d      	ldr	r4, [pc, #52]	; (80020cc <__libc_init_array+0x3c>)
 8002098:	1ba4      	subs	r4, r4, r6
 800209a:	10a4      	asrs	r4, r4, #2
 800209c:	42a5      	cmp	r5, r4
 800209e:	d109      	bne.n	80020b4 <__libc_init_array+0x24>
 80020a0:	f000 fc4e 	bl	8002940 <_init>
 80020a4:	2500      	movs	r5, #0
 80020a6:	4e0a      	ldr	r6, [pc, #40]	; (80020d0 <__libc_init_array+0x40>)
 80020a8:	4c0a      	ldr	r4, [pc, #40]	; (80020d4 <__libc_init_array+0x44>)
 80020aa:	1ba4      	subs	r4, r4, r6
 80020ac:	10a4      	asrs	r4, r4, #2
 80020ae:	42a5      	cmp	r5, r4
 80020b0:	d105      	bne.n	80020be <__libc_init_array+0x2e>
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020b8:	4798      	blx	r3
 80020ba:	3501      	adds	r5, #1
 80020bc:	e7ee      	b.n	800209c <__libc_init_array+0xc>
 80020be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020c2:	4798      	blx	r3
 80020c4:	3501      	adds	r5, #1
 80020c6:	e7f2      	b.n	80020ae <__libc_init_array+0x1e>
 80020c8:	08002a64 	.word	0x08002a64
 80020cc:	08002a64 	.word	0x08002a64
 80020d0:	08002a64 	.word	0x08002a64
 80020d4:	08002a68 	.word	0x08002a68

080020d8 <memset>:
 80020d8:	4603      	mov	r3, r0
 80020da:	4402      	add	r2, r0
 80020dc:	4293      	cmp	r3, r2
 80020de:	d100      	bne.n	80020e2 <memset+0xa>
 80020e0:	4770      	bx	lr
 80020e2:	f803 1b01 	strb.w	r1, [r3], #1
 80020e6:	e7f9      	b.n	80020dc <memset+0x4>

080020e8 <siprintf>:
 80020e8:	b40e      	push	{r1, r2, r3}
 80020ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020ee:	b500      	push	{lr}
 80020f0:	b09c      	sub	sp, #112	; 0x70
 80020f2:	ab1d      	add	r3, sp, #116	; 0x74
 80020f4:	9002      	str	r0, [sp, #8]
 80020f6:	9006      	str	r0, [sp, #24]
 80020f8:	9107      	str	r1, [sp, #28]
 80020fa:	9104      	str	r1, [sp, #16]
 80020fc:	4808      	ldr	r0, [pc, #32]	; (8002120 <siprintf+0x38>)
 80020fe:	4909      	ldr	r1, [pc, #36]	; (8002124 <siprintf+0x3c>)
 8002100:	f853 2b04 	ldr.w	r2, [r3], #4
 8002104:	9105      	str	r1, [sp, #20]
 8002106:	6800      	ldr	r0, [r0, #0]
 8002108:	a902      	add	r1, sp, #8
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	f000 f880 	bl	8002210 <_svfiprintf_r>
 8002110:	2200      	movs	r2, #0
 8002112:	9b02      	ldr	r3, [sp, #8]
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	b01c      	add	sp, #112	; 0x70
 8002118:	f85d eb04 	ldr.w	lr, [sp], #4
 800211c:	b003      	add	sp, #12
 800211e:	4770      	bx	lr
 8002120:	2000000c 	.word	0x2000000c
 8002124:	ffff0208 	.word	0xffff0208

08002128 <strstr>:
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	7803      	ldrb	r3, [r0, #0]
 800212c:	b17b      	cbz	r3, 800214e <strstr+0x26>
 800212e:	4604      	mov	r4, r0
 8002130:	7823      	ldrb	r3, [r4, #0]
 8002132:	4620      	mov	r0, r4
 8002134:	1c66      	adds	r6, r4, #1
 8002136:	b17b      	cbz	r3, 8002158 <strstr+0x30>
 8002138:	1e4a      	subs	r2, r1, #1
 800213a:	1e63      	subs	r3, r4, #1
 800213c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8002140:	b14d      	cbz	r5, 8002156 <strstr+0x2e>
 8002142:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002146:	4634      	mov	r4, r6
 8002148:	42af      	cmp	r7, r5
 800214a:	d0f7      	beq.n	800213c <strstr+0x14>
 800214c:	e7f0      	b.n	8002130 <strstr+0x8>
 800214e:	780b      	ldrb	r3, [r1, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf18      	it	ne
 8002154:	2000      	movne	r0, #0
 8002156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002158:	4618      	mov	r0, r3
 800215a:	e7fc      	b.n	8002156 <strstr+0x2e>

0800215c <__ssputs_r>:
 800215c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002160:	688e      	ldr	r6, [r1, #8]
 8002162:	4682      	mov	sl, r0
 8002164:	429e      	cmp	r6, r3
 8002166:	460c      	mov	r4, r1
 8002168:	4690      	mov	r8, r2
 800216a:	4699      	mov	r9, r3
 800216c:	d837      	bhi.n	80021de <__ssputs_r+0x82>
 800216e:	898a      	ldrh	r2, [r1, #12]
 8002170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002174:	d031      	beq.n	80021da <__ssputs_r+0x7e>
 8002176:	2302      	movs	r3, #2
 8002178:	6825      	ldr	r5, [r4, #0]
 800217a:	6909      	ldr	r1, [r1, #16]
 800217c:	1a6f      	subs	r7, r5, r1
 800217e:	6965      	ldr	r5, [r4, #20]
 8002180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002184:	fb95 f5f3 	sdiv	r5, r5, r3
 8002188:	f109 0301 	add.w	r3, r9, #1
 800218c:	443b      	add	r3, r7
 800218e:	429d      	cmp	r5, r3
 8002190:	bf38      	it	cc
 8002192:	461d      	movcc	r5, r3
 8002194:	0553      	lsls	r3, r2, #21
 8002196:	d530      	bpl.n	80021fa <__ssputs_r+0x9e>
 8002198:	4629      	mov	r1, r5
 800219a:	f000 fb37 	bl	800280c <_malloc_r>
 800219e:	4606      	mov	r6, r0
 80021a0:	b950      	cbnz	r0, 80021b8 <__ssputs_r+0x5c>
 80021a2:	230c      	movs	r3, #12
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f8ca 3000 	str.w	r3, [sl]
 80021ac:	89a3      	ldrh	r3, [r4, #12]
 80021ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b2:	81a3      	strh	r3, [r4, #12]
 80021b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021b8:	463a      	mov	r2, r7
 80021ba:	6921      	ldr	r1, [r4, #16]
 80021bc:	f000 fab6 	bl	800272c <memcpy>
 80021c0:	89a3      	ldrh	r3, [r4, #12]
 80021c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80021c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ca:	81a3      	strh	r3, [r4, #12]
 80021cc:	6126      	str	r6, [r4, #16]
 80021ce:	443e      	add	r6, r7
 80021d0:	6026      	str	r6, [r4, #0]
 80021d2:	464e      	mov	r6, r9
 80021d4:	6165      	str	r5, [r4, #20]
 80021d6:	1bed      	subs	r5, r5, r7
 80021d8:	60a5      	str	r5, [r4, #8]
 80021da:	454e      	cmp	r6, r9
 80021dc:	d900      	bls.n	80021e0 <__ssputs_r+0x84>
 80021de:	464e      	mov	r6, r9
 80021e0:	4632      	mov	r2, r6
 80021e2:	4641      	mov	r1, r8
 80021e4:	6820      	ldr	r0, [r4, #0]
 80021e6:	f000 faac 	bl	8002742 <memmove>
 80021ea:	68a3      	ldr	r3, [r4, #8]
 80021ec:	2000      	movs	r0, #0
 80021ee:	1b9b      	subs	r3, r3, r6
 80021f0:	60a3      	str	r3, [r4, #8]
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	441e      	add	r6, r3
 80021f6:	6026      	str	r6, [r4, #0]
 80021f8:	e7dc      	b.n	80021b4 <__ssputs_r+0x58>
 80021fa:	462a      	mov	r2, r5
 80021fc:	f000 fb60 	bl	80028c0 <_realloc_r>
 8002200:	4606      	mov	r6, r0
 8002202:	2800      	cmp	r0, #0
 8002204:	d1e2      	bne.n	80021cc <__ssputs_r+0x70>
 8002206:	6921      	ldr	r1, [r4, #16]
 8002208:	4650      	mov	r0, sl
 800220a:	f000 fab3 	bl	8002774 <_free_r>
 800220e:	e7c8      	b.n	80021a2 <__ssputs_r+0x46>

08002210 <_svfiprintf_r>:
 8002210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002214:	461d      	mov	r5, r3
 8002216:	898b      	ldrh	r3, [r1, #12]
 8002218:	b09d      	sub	sp, #116	; 0x74
 800221a:	061f      	lsls	r7, r3, #24
 800221c:	4680      	mov	r8, r0
 800221e:	460c      	mov	r4, r1
 8002220:	4616      	mov	r6, r2
 8002222:	d50f      	bpl.n	8002244 <_svfiprintf_r+0x34>
 8002224:	690b      	ldr	r3, [r1, #16]
 8002226:	b96b      	cbnz	r3, 8002244 <_svfiprintf_r+0x34>
 8002228:	2140      	movs	r1, #64	; 0x40
 800222a:	f000 faef 	bl	800280c <_malloc_r>
 800222e:	6020      	str	r0, [r4, #0]
 8002230:	6120      	str	r0, [r4, #16]
 8002232:	b928      	cbnz	r0, 8002240 <_svfiprintf_r+0x30>
 8002234:	230c      	movs	r3, #12
 8002236:	f8c8 3000 	str.w	r3, [r8]
 800223a:	f04f 30ff 	mov.w	r0, #4294967295
 800223e:	e0c8      	b.n	80023d2 <_svfiprintf_r+0x1c2>
 8002240:	2340      	movs	r3, #64	; 0x40
 8002242:	6163      	str	r3, [r4, #20]
 8002244:	2300      	movs	r3, #0
 8002246:	9309      	str	r3, [sp, #36]	; 0x24
 8002248:	2320      	movs	r3, #32
 800224a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800224e:	2330      	movs	r3, #48	; 0x30
 8002250:	f04f 0b01 	mov.w	fp, #1
 8002254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002258:	9503      	str	r5, [sp, #12]
 800225a:	4637      	mov	r7, r6
 800225c:	463d      	mov	r5, r7
 800225e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002262:	b10b      	cbz	r3, 8002268 <_svfiprintf_r+0x58>
 8002264:	2b25      	cmp	r3, #37	; 0x25
 8002266:	d13e      	bne.n	80022e6 <_svfiprintf_r+0xd6>
 8002268:	ebb7 0a06 	subs.w	sl, r7, r6
 800226c:	d00b      	beq.n	8002286 <_svfiprintf_r+0x76>
 800226e:	4653      	mov	r3, sl
 8002270:	4632      	mov	r2, r6
 8002272:	4621      	mov	r1, r4
 8002274:	4640      	mov	r0, r8
 8002276:	f7ff ff71 	bl	800215c <__ssputs_r>
 800227a:	3001      	adds	r0, #1
 800227c:	f000 80a4 	beq.w	80023c8 <_svfiprintf_r+0x1b8>
 8002280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002282:	4453      	add	r3, sl
 8002284:	9309      	str	r3, [sp, #36]	; 0x24
 8002286:	783b      	ldrb	r3, [r7, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 809d 	beq.w	80023c8 <_svfiprintf_r+0x1b8>
 800228e:	2300      	movs	r3, #0
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002298:	9304      	str	r3, [sp, #16]
 800229a:	9307      	str	r3, [sp, #28]
 800229c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022a0:	931a      	str	r3, [sp, #104]	; 0x68
 80022a2:	462f      	mov	r7, r5
 80022a4:	2205      	movs	r2, #5
 80022a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80022aa:	4850      	ldr	r0, [pc, #320]	; (80023ec <_svfiprintf_r+0x1dc>)
 80022ac:	f000 fa30 	bl	8002710 <memchr>
 80022b0:	9b04      	ldr	r3, [sp, #16]
 80022b2:	b9d0      	cbnz	r0, 80022ea <_svfiprintf_r+0xda>
 80022b4:	06d9      	lsls	r1, r3, #27
 80022b6:	bf44      	itt	mi
 80022b8:	2220      	movmi	r2, #32
 80022ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022be:	071a      	lsls	r2, r3, #28
 80022c0:	bf44      	itt	mi
 80022c2:	222b      	movmi	r2, #43	; 0x2b
 80022c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022c8:	782a      	ldrb	r2, [r5, #0]
 80022ca:	2a2a      	cmp	r2, #42	; 0x2a
 80022cc:	d015      	beq.n	80022fa <_svfiprintf_r+0xea>
 80022ce:	462f      	mov	r7, r5
 80022d0:	2000      	movs	r0, #0
 80022d2:	250a      	movs	r5, #10
 80022d4:	9a07      	ldr	r2, [sp, #28]
 80022d6:	4639      	mov	r1, r7
 80022d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022dc:	3b30      	subs	r3, #48	; 0x30
 80022de:	2b09      	cmp	r3, #9
 80022e0:	d94d      	bls.n	800237e <_svfiprintf_r+0x16e>
 80022e2:	b1b8      	cbz	r0, 8002314 <_svfiprintf_r+0x104>
 80022e4:	e00f      	b.n	8002306 <_svfiprintf_r+0xf6>
 80022e6:	462f      	mov	r7, r5
 80022e8:	e7b8      	b.n	800225c <_svfiprintf_r+0x4c>
 80022ea:	4a40      	ldr	r2, [pc, #256]	; (80023ec <_svfiprintf_r+0x1dc>)
 80022ec:	463d      	mov	r5, r7
 80022ee:	1a80      	subs	r0, r0, r2
 80022f0:	fa0b f000 	lsl.w	r0, fp, r0
 80022f4:	4318      	orrs	r0, r3
 80022f6:	9004      	str	r0, [sp, #16]
 80022f8:	e7d3      	b.n	80022a2 <_svfiprintf_r+0x92>
 80022fa:	9a03      	ldr	r2, [sp, #12]
 80022fc:	1d11      	adds	r1, r2, #4
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	9103      	str	r1, [sp, #12]
 8002302:	2a00      	cmp	r2, #0
 8002304:	db01      	blt.n	800230a <_svfiprintf_r+0xfa>
 8002306:	9207      	str	r2, [sp, #28]
 8002308:	e004      	b.n	8002314 <_svfiprintf_r+0x104>
 800230a:	4252      	negs	r2, r2
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	9207      	str	r2, [sp, #28]
 8002312:	9304      	str	r3, [sp, #16]
 8002314:	783b      	ldrb	r3, [r7, #0]
 8002316:	2b2e      	cmp	r3, #46	; 0x2e
 8002318:	d10c      	bne.n	8002334 <_svfiprintf_r+0x124>
 800231a:	787b      	ldrb	r3, [r7, #1]
 800231c:	2b2a      	cmp	r3, #42	; 0x2a
 800231e:	d133      	bne.n	8002388 <_svfiprintf_r+0x178>
 8002320:	9b03      	ldr	r3, [sp, #12]
 8002322:	3702      	adds	r7, #2
 8002324:	1d1a      	adds	r2, r3, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	9203      	str	r2, [sp, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	bfb8      	it	lt
 800232e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002332:	9305      	str	r3, [sp, #20]
 8002334:	4d2e      	ldr	r5, [pc, #184]	; (80023f0 <_svfiprintf_r+0x1e0>)
 8002336:	2203      	movs	r2, #3
 8002338:	7839      	ldrb	r1, [r7, #0]
 800233a:	4628      	mov	r0, r5
 800233c:	f000 f9e8 	bl	8002710 <memchr>
 8002340:	b138      	cbz	r0, 8002352 <_svfiprintf_r+0x142>
 8002342:	2340      	movs	r3, #64	; 0x40
 8002344:	1b40      	subs	r0, r0, r5
 8002346:	fa03 f000 	lsl.w	r0, r3, r0
 800234a:	9b04      	ldr	r3, [sp, #16]
 800234c:	3701      	adds	r7, #1
 800234e:	4303      	orrs	r3, r0
 8002350:	9304      	str	r3, [sp, #16]
 8002352:	7839      	ldrb	r1, [r7, #0]
 8002354:	2206      	movs	r2, #6
 8002356:	4827      	ldr	r0, [pc, #156]	; (80023f4 <_svfiprintf_r+0x1e4>)
 8002358:	1c7e      	adds	r6, r7, #1
 800235a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800235e:	f000 f9d7 	bl	8002710 <memchr>
 8002362:	2800      	cmp	r0, #0
 8002364:	d038      	beq.n	80023d8 <_svfiprintf_r+0x1c8>
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <_svfiprintf_r+0x1e8>)
 8002368:	bb13      	cbnz	r3, 80023b0 <_svfiprintf_r+0x1a0>
 800236a:	9b03      	ldr	r3, [sp, #12]
 800236c:	3307      	adds	r3, #7
 800236e:	f023 0307 	bic.w	r3, r3, #7
 8002372:	3308      	adds	r3, #8
 8002374:	9303      	str	r3, [sp, #12]
 8002376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002378:	444b      	add	r3, r9
 800237a:	9309      	str	r3, [sp, #36]	; 0x24
 800237c:	e76d      	b.n	800225a <_svfiprintf_r+0x4a>
 800237e:	fb05 3202 	mla	r2, r5, r2, r3
 8002382:	2001      	movs	r0, #1
 8002384:	460f      	mov	r7, r1
 8002386:	e7a6      	b.n	80022d6 <_svfiprintf_r+0xc6>
 8002388:	2300      	movs	r3, #0
 800238a:	250a      	movs	r5, #10
 800238c:	4619      	mov	r1, r3
 800238e:	3701      	adds	r7, #1
 8002390:	9305      	str	r3, [sp, #20]
 8002392:	4638      	mov	r0, r7
 8002394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002398:	3a30      	subs	r2, #48	; 0x30
 800239a:	2a09      	cmp	r2, #9
 800239c:	d903      	bls.n	80023a6 <_svfiprintf_r+0x196>
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0c8      	beq.n	8002334 <_svfiprintf_r+0x124>
 80023a2:	9105      	str	r1, [sp, #20]
 80023a4:	e7c6      	b.n	8002334 <_svfiprintf_r+0x124>
 80023a6:	fb05 2101 	mla	r1, r5, r1, r2
 80023aa:	2301      	movs	r3, #1
 80023ac:	4607      	mov	r7, r0
 80023ae:	e7f0      	b.n	8002392 <_svfiprintf_r+0x182>
 80023b0:	ab03      	add	r3, sp, #12
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	4622      	mov	r2, r4
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <_svfiprintf_r+0x1ec>)
 80023b8:	a904      	add	r1, sp, #16
 80023ba:	4640      	mov	r0, r8
 80023bc:	f3af 8000 	nop.w
 80023c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80023c4:	4681      	mov	r9, r0
 80023c6:	d1d6      	bne.n	8002376 <_svfiprintf_r+0x166>
 80023c8:	89a3      	ldrh	r3, [r4, #12]
 80023ca:	065b      	lsls	r3, r3, #25
 80023cc:	f53f af35 	bmi.w	800223a <_svfiprintf_r+0x2a>
 80023d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023d2:	b01d      	add	sp, #116	; 0x74
 80023d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d8:	ab03      	add	r3, sp, #12
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	4622      	mov	r2, r4
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <_svfiprintf_r+0x1ec>)
 80023e0:	a904      	add	r1, sp, #16
 80023e2:	4640      	mov	r0, r8
 80023e4:	f000 f882 	bl	80024ec <_printf_i>
 80023e8:	e7ea      	b.n	80023c0 <_svfiprintf_r+0x1b0>
 80023ea:	bf00      	nop
 80023ec:	08002a30 	.word	0x08002a30
 80023f0:	08002a36 	.word	0x08002a36
 80023f4:	08002a3a 	.word	0x08002a3a
 80023f8:	00000000 	.word	0x00000000
 80023fc:	0800215d 	.word	0x0800215d

08002400 <_printf_common>:
 8002400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002404:	4691      	mov	r9, r2
 8002406:	461f      	mov	r7, r3
 8002408:	688a      	ldr	r2, [r1, #8]
 800240a:	690b      	ldr	r3, [r1, #16]
 800240c:	4606      	mov	r6, r0
 800240e:	4293      	cmp	r3, r2
 8002410:	bfb8      	it	lt
 8002412:	4613      	movlt	r3, r2
 8002414:	f8c9 3000 	str.w	r3, [r9]
 8002418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800241c:	460c      	mov	r4, r1
 800241e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002422:	b112      	cbz	r2, 800242a <_printf_common+0x2a>
 8002424:	3301      	adds	r3, #1
 8002426:	f8c9 3000 	str.w	r3, [r9]
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	0699      	lsls	r1, r3, #26
 800242e:	bf42      	ittt	mi
 8002430:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002434:	3302      	addmi	r3, #2
 8002436:	f8c9 3000 	strmi.w	r3, [r9]
 800243a:	6825      	ldr	r5, [r4, #0]
 800243c:	f015 0506 	ands.w	r5, r5, #6
 8002440:	d107      	bne.n	8002452 <_printf_common+0x52>
 8002442:	f104 0a19 	add.w	sl, r4, #25
 8002446:	68e3      	ldr	r3, [r4, #12]
 8002448:	f8d9 2000 	ldr.w	r2, [r9]
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	42ab      	cmp	r3, r5
 8002450:	dc29      	bgt.n	80024a6 <_printf_common+0xa6>
 8002452:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	3300      	adds	r3, #0
 800245a:	bf18      	it	ne
 800245c:	2301      	movne	r3, #1
 800245e:	0692      	lsls	r2, r2, #26
 8002460:	d42e      	bmi.n	80024c0 <_printf_common+0xc0>
 8002462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002466:	4639      	mov	r1, r7
 8002468:	4630      	mov	r0, r6
 800246a:	47c0      	blx	r8
 800246c:	3001      	adds	r0, #1
 800246e:	d021      	beq.n	80024b4 <_printf_common+0xb4>
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	68e5      	ldr	r5, [r4, #12]
 8002474:	f003 0306 	and.w	r3, r3, #6
 8002478:	2b04      	cmp	r3, #4
 800247a:	bf18      	it	ne
 800247c:	2500      	movne	r5, #0
 800247e:	f8d9 2000 	ldr.w	r2, [r9]
 8002482:	f04f 0900 	mov.w	r9, #0
 8002486:	bf08      	it	eq
 8002488:	1aad      	subeq	r5, r5, r2
 800248a:	68a3      	ldr	r3, [r4, #8]
 800248c:	6922      	ldr	r2, [r4, #16]
 800248e:	bf08      	it	eq
 8002490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002494:	4293      	cmp	r3, r2
 8002496:	bfc4      	itt	gt
 8002498:	1a9b      	subgt	r3, r3, r2
 800249a:	18ed      	addgt	r5, r5, r3
 800249c:	341a      	adds	r4, #26
 800249e:	454d      	cmp	r5, r9
 80024a0:	d11a      	bne.n	80024d8 <_printf_common+0xd8>
 80024a2:	2000      	movs	r0, #0
 80024a4:	e008      	b.n	80024b8 <_printf_common+0xb8>
 80024a6:	2301      	movs	r3, #1
 80024a8:	4652      	mov	r2, sl
 80024aa:	4639      	mov	r1, r7
 80024ac:	4630      	mov	r0, r6
 80024ae:	47c0      	blx	r8
 80024b0:	3001      	adds	r0, #1
 80024b2:	d103      	bne.n	80024bc <_printf_common+0xbc>
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024bc:	3501      	adds	r5, #1
 80024be:	e7c2      	b.n	8002446 <_printf_common+0x46>
 80024c0:	2030      	movs	r0, #48	; 0x30
 80024c2:	18e1      	adds	r1, r4, r3
 80024c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024ce:	4422      	add	r2, r4
 80024d0:	3302      	adds	r3, #2
 80024d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024d6:	e7c4      	b.n	8002462 <_printf_common+0x62>
 80024d8:	2301      	movs	r3, #1
 80024da:	4622      	mov	r2, r4
 80024dc:	4639      	mov	r1, r7
 80024de:	4630      	mov	r0, r6
 80024e0:	47c0      	blx	r8
 80024e2:	3001      	adds	r0, #1
 80024e4:	d0e6      	beq.n	80024b4 <_printf_common+0xb4>
 80024e6:	f109 0901 	add.w	r9, r9, #1
 80024ea:	e7d8      	b.n	800249e <_printf_common+0x9e>

080024ec <_printf_i>:
 80024ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80024f4:	460c      	mov	r4, r1
 80024f6:	7e09      	ldrb	r1, [r1, #24]
 80024f8:	b085      	sub	sp, #20
 80024fa:	296e      	cmp	r1, #110	; 0x6e
 80024fc:	4617      	mov	r7, r2
 80024fe:	4606      	mov	r6, r0
 8002500:	4698      	mov	r8, r3
 8002502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002504:	f000 80b3 	beq.w	800266e <_printf_i+0x182>
 8002508:	d822      	bhi.n	8002550 <_printf_i+0x64>
 800250a:	2963      	cmp	r1, #99	; 0x63
 800250c:	d036      	beq.n	800257c <_printf_i+0x90>
 800250e:	d80a      	bhi.n	8002526 <_printf_i+0x3a>
 8002510:	2900      	cmp	r1, #0
 8002512:	f000 80b9 	beq.w	8002688 <_printf_i+0x19c>
 8002516:	2958      	cmp	r1, #88	; 0x58
 8002518:	f000 8083 	beq.w	8002622 <_printf_i+0x136>
 800251c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002520:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002524:	e032      	b.n	800258c <_printf_i+0xa0>
 8002526:	2964      	cmp	r1, #100	; 0x64
 8002528:	d001      	beq.n	800252e <_printf_i+0x42>
 800252a:	2969      	cmp	r1, #105	; 0x69
 800252c:	d1f6      	bne.n	800251c <_printf_i+0x30>
 800252e:	6820      	ldr	r0, [r4, #0]
 8002530:	6813      	ldr	r3, [r2, #0]
 8002532:	0605      	lsls	r5, r0, #24
 8002534:	f103 0104 	add.w	r1, r3, #4
 8002538:	d52a      	bpl.n	8002590 <_printf_i+0xa4>
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6011      	str	r1, [r2, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	da03      	bge.n	800254a <_printf_i+0x5e>
 8002542:	222d      	movs	r2, #45	; 0x2d
 8002544:	425b      	negs	r3, r3
 8002546:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800254a:	486f      	ldr	r0, [pc, #444]	; (8002708 <_printf_i+0x21c>)
 800254c:	220a      	movs	r2, #10
 800254e:	e039      	b.n	80025c4 <_printf_i+0xd8>
 8002550:	2973      	cmp	r1, #115	; 0x73
 8002552:	f000 809d 	beq.w	8002690 <_printf_i+0x1a4>
 8002556:	d808      	bhi.n	800256a <_printf_i+0x7e>
 8002558:	296f      	cmp	r1, #111	; 0x6f
 800255a:	d020      	beq.n	800259e <_printf_i+0xb2>
 800255c:	2970      	cmp	r1, #112	; 0x70
 800255e:	d1dd      	bne.n	800251c <_printf_i+0x30>
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	f043 0320 	orr.w	r3, r3, #32
 8002566:	6023      	str	r3, [r4, #0]
 8002568:	e003      	b.n	8002572 <_printf_i+0x86>
 800256a:	2975      	cmp	r1, #117	; 0x75
 800256c:	d017      	beq.n	800259e <_printf_i+0xb2>
 800256e:	2978      	cmp	r1, #120	; 0x78
 8002570:	d1d4      	bne.n	800251c <_printf_i+0x30>
 8002572:	2378      	movs	r3, #120	; 0x78
 8002574:	4865      	ldr	r0, [pc, #404]	; (800270c <_printf_i+0x220>)
 8002576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800257a:	e055      	b.n	8002628 <_printf_i+0x13c>
 800257c:	6813      	ldr	r3, [r2, #0]
 800257e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002582:	1d19      	adds	r1, r3, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6011      	str	r1, [r2, #0]
 8002588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800258c:	2301      	movs	r3, #1
 800258e:	e08c      	b.n	80026aa <_printf_i+0x1be>
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002596:	6011      	str	r1, [r2, #0]
 8002598:	bf18      	it	ne
 800259a:	b21b      	sxthne	r3, r3
 800259c:	e7cf      	b.n	800253e <_printf_i+0x52>
 800259e:	6813      	ldr	r3, [r2, #0]
 80025a0:	6825      	ldr	r5, [r4, #0]
 80025a2:	1d18      	adds	r0, r3, #4
 80025a4:	6010      	str	r0, [r2, #0]
 80025a6:	0628      	lsls	r0, r5, #24
 80025a8:	d501      	bpl.n	80025ae <_printf_i+0xc2>
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	e002      	b.n	80025b4 <_printf_i+0xc8>
 80025ae:	0668      	lsls	r0, r5, #25
 80025b0:	d5fb      	bpl.n	80025aa <_printf_i+0xbe>
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	296f      	cmp	r1, #111	; 0x6f
 80025b6:	bf14      	ite	ne
 80025b8:	220a      	movne	r2, #10
 80025ba:	2208      	moveq	r2, #8
 80025bc:	4852      	ldr	r0, [pc, #328]	; (8002708 <_printf_i+0x21c>)
 80025be:	2100      	movs	r1, #0
 80025c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025c4:	6865      	ldr	r5, [r4, #4]
 80025c6:	2d00      	cmp	r5, #0
 80025c8:	60a5      	str	r5, [r4, #8]
 80025ca:	f2c0 8095 	blt.w	80026f8 <_printf_i+0x20c>
 80025ce:	6821      	ldr	r1, [r4, #0]
 80025d0:	f021 0104 	bic.w	r1, r1, #4
 80025d4:	6021      	str	r1, [r4, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d13d      	bne.n	8002656 <_printf_i+0x16a>
 80025da:	2d00      	cmp	r5, #0
 80025dc:	f040 808e 	bne.w	80026fc <_printf_i+0x210>
 80025e0:	4665      	mov	r5, ip
 80025e2:	2a08      	cmp	r2, #8
 80025e4:	d10b      	bne.n	80025fe <_printf_i+0x112>
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	07db      	lsls	r3, r3, #31
 80025ea:	d508      	bpl.n	80025fe <_printf_i+0x112>
 80025ec:	6923      	ldr	r3, [r4, #16]
 80025ee:	6862      	ldr	r2, [r4, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	bfde      	ittt	le
 80025f4:	2330      	movle	r3, #48	; 0x30
 80025f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80025fe:	ebac 0305 	sub.w	r3, ip, r5
 8002602:	6123      	str	r3, [r4, #16]
 8002604:	f8cd 8000 	str.w	r8, [sp]
 8002608:	463b      	mov	r3, r7
 800260a:	aa03      	add	r2, sp, #12
 800260c:	4621      	mov	r1, r4
 800260e:	4630      	mov	r0, r6
 8002610:	f7ff fef6 	bl	8002400 <_printf_common>
 8002614:	3001      	adds	r0, #1
 8002616:	d14d      	bne.n	80026b4 <_printf_i+0x1c8>
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	b005      	add	sp, #20
 800261e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002622:	4839      	ldr	r0, [pc, #228]	; (8002708 <_printf_i+0x21c>)
 8002624:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002628:	6813      	ldr	r3, [r2, #0]
 800262a:	6821      	ldr	r1, [r4, #0]
 800262c:	1d1d      	adds	r5, r3, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6015      	str	r5, [r2, #0]
 8002632:	060a      	lsls	r2, r1, #24
 8002634:	d50b      	bpl.n	800264e <_printf_i+0x162>
 8002636:	07ca      	lsls	r2, r1, #31
 8002638:	bf44      	itt	mi
 800263a:	f041 0120 	orrmi.w	r1, r1, #32
 800263e:	6021      	strmi	r1, [r4, #0]
 8002640:	b91b      	cbnz	r3, 800264a <_printf_i+0x15e>
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	f022 0220 	bic.w	r2, r2, #32
 8002648:	6022      	str	r2, [r4, #0]
 800264a:	2210      	movs	r2, #16
 800264c:	e7b7      	b.n	80025be <_printf_i+0xd2>
 800264e:	064d      	lsls	r5, r1, #25
 8002650:	bf48      	it	mi
 8002652:	b29b      	uxthmi	r3, r3
 8002654:	e7ef      	b.n	8002636 <_printf_i+0x14a>
 8002656:	4665      	mov	r5, ip
 8002658:	fbb3 f1f2 	udiv	r1, r3, r2
 800265c:	fb02 3311 	mls	r3, r2, r1, r3
 8002660:	5cc3      	ldrb	r3, [r0, r3]
 8002662:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002666:	460b      	mov	r3, r1
 8002668:	2900      	cmp	r1, #0
 800266a:	d1f5      	bne.n	8002658 <_printf_i+0x16c>
 800266c:	e7b9      	b.n	80025e2 <_printf_i+0xf6>
 800266e:	6813      	ldr	r3, [r2, #0]
 8002670:	6825      	ldr	r5, [r4, #0]
 8002672:	1d18      	adds	r0, r3, #4
 8002674:	6961      	ldr	r1, [r4, #20]
 8002676:	6010      	str	r0, [r2, #0]
 8002678:	0628      	lsls	r0, r5, #24
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	d501      	bpl.n	8002682 <_printf_i+0x196>
 800267e:	6019      	str	r1, [r3, #0]
 8002680:	e002      	b.n	8002688 <_printf_i+0x19c>
 8002682:	066a      	lsls	r2, r5, #25
 8002684:	d5fb      	bpl.n	800267e <_printf_i+0x192>
 8002686:	8019      	strh	r1, [r3, #0]
 8002688:	2300      	movs	r3, #0
 800268a:	4665      	mov	r5, ip
 800268c:	6123      	str	r3, [r4, #16]
 800268e:	e7b9      	b.n	8002604 <_printf_i+0x118>
 8002690:	6813      	ldr	r3, [r2, #0]
 8002692:	1d19      	adds	r1, r3, #4
 8002694:	6011      	str	r1, [r2, #0]
 8002696:	681d      	ldr	r5, [r3, #0]
 8002698:	6862      	ldr	r2, [r4, #4]
 800269a:	2100      	movs	r1, #0
 800269c:	4628      	mov	r0, r5
 800269e:	f000 f837 	bl	8002710 <memchr>
 80026a2:	b108      	cbz	r0, 80026a8 <_printf_i+0x1bc>
 80026a4:	1b40      	subs	r0, r0, r5
 80026a6:	6060      	str	r0, [r4, #4]
 80026a8:	6863      	ldr	r3, [r4, #4]
 80026aa:	6123      	str	r3, [r4, #16]
 80026ac:	2300      	movs	r3, #0
 80026ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026b2:	e7a7      	b.n	8002604 <_printf_i+0x118>
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	462a      	mov	r2, r5
 80026b8:	4639      	mov	r1, r7
 80026ba:	4630      	mov	r0, r6
 80026bc:	47c0      	blx	r8
 80026be:	3001      	adds	r0, #1
 80026c0:	d0aa      	beq.n	8002618 <_printf_i+0x12c>
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	079b      	lsls	r3, r3, #30
 80026c6:	d413      	bmi.n	80026f0 <_printf_i+0x204>
 80026c8:	68e0      	ldr	r0, [r4, #12]
 80026ca:	9b03      	ldr	r3, [sp, #12]
 80026cc:	4298      	cmp	r0, r3
 80026ce:	bfb8      	it	lt
 80026d0:	4618      	movlt	r0, r3
 80026d2:	e7a3      	b.n	800261c <_printf_i+0x130>
 80026d4:	2301      	movs	r3, #1
 80026d6:	464a      	mov	r2, r9
 80026d8:	4639      	mov	r1, r7
 80026da:	4630      	mov	r0, r6
 80026dc:	47c0      	blx	r8
 80026de:	3001      	adds	r0, #1
 80026e0:	d09a      	beq.n	8002618 <_printf_i+0x12c>
 80026e2:	3501      	adds	r5, #1
 80026e4:	68e3      	ldr	r3, [r4, #12]
 80026e6:	9a03      	ldr	r2, [sp, #12]
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	42ab      	cmp	r3, r5
 80026ec:	dcf2      	bgt.n	80026d4 <_printf_i+0x1e8>
 80026ee:	e7eb      	b.n	80026c8 <_printf_i+0x1dc>
 80026f0:	2500      	movs	r5, #0
 80026f2:	f104 0919 	add.w	r9, r4, #25
 80026f6:	e7f5      	b.n	80026e4 <_printf_i+0x1f8>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ac      	bne.n	8002656 <_printf_i+0x16a>
 80026fc:	7803      	ldrb	r3, [r0, #0]
 80026fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002706:	e76c      	b.n	80025e2 <_printf_i+0xf6>
 8002708:	08002a41 	.word	0x08002a41
 800270c:	08002a52 	.word	0x08002a52

08002710 <memchr>:
 8002710:	b510      	push	{r4, lr}
 8002712:	b2c9      	uxtb	r1, r1
 8002714:	4402      	add	r2, r0
 8002716:	4290      	cmp	r0, r2
 8002718:	4603      	mov	r3, r0
 800271a:	d101      	bne.n	8002720 <memchr+0x10>
 800271c:	2300      	movs	r3, #0
 800271e:	e003      	b.n	8002728 <memchr+0x18>
 8002720:	781c      	ldrb	r4, [r3, #0]
 8002722:	3001      	adds	r0, #1
 8002724:	428c      	cmp	r4, r1
 8002726:	d1f6      	bne.n	8002716 <memchr+0x6>
 8002728:	4618      	mov	r0, r3
 800272a:	bd10      	pop	{r4, pc}

0800272c <memcpy>:
 800272c:	b510      	push	{r4, lr}
 800272e:	1e43      	subs	r3, r0, #1
 8002730:	440a      	add	r2, r1
 8002732:	4291      	cmp	r1, r2
 8002734:	d100      	bne.n	8002738 <memcpy+0xc>
 8002736:	bd10      	pop	{r4, pc}
 8002738:	f811 4b01 	ldrb.w	r4, [r1], #1
 800273c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002740:	e7f7      	b.n	8002732 <memcpy+0x6>

08002742 <memmove>:
 8002742:	4288      	cmp	r0, r1
 8002744:	b510      	push	{r4, lr}
 8002746:	eb01 0302 	add.w	r3, r1, r2
 800274a:	d807      	bhi.n	800275c <memmove+0x1a>
 800274c:	1e42      	subs	r2, r0, #1
 800274e:	4299      	cmp	r1, r3
 8002750:	d00a      	beq.n	8002768 <memmove+0x26>
 8002752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002756:	f802 4f01 	strb.w	r4, [r2, #1]!
 800275a:	e7f8      	b.n	800274e <memmove+0xc>
 800275c:	4283      	cmp	r3, r0
 800275e:	d9f5      	bls.n	800274c <memmove+0xa>
 8002760:	1881      	adds	r1, r0, r2
 8002762:	1ad2      	subs	r2, r2, r3
 8002764:	42d3      	cmn	r3, r2
 8002766:	d100      	bne.n	800276a <memmove+0x28>
 8002768:	bd10      	pop	{r4, pc}
 800276a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800276e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002772:	e7f7      	b.n	8002764 <memmove+0x22>

08002774 <_free_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4605      	mov	r5, r0
 8002778:	2900      	cmp	r1, #0
 800277a:	d043      	beq.n	8002804 <_free_r+0x90>
 800277c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002780:	1f0c      	subs	r4, r1, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	bfb8      	it	lt
 8002786:	18e4      	addlt	r4, r4, r3
 8002788:	f000 f8d0 	bl	800292c <__malloc_lock>
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <_free_r+0x94>)
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	4610      	mov	r0, r2
 8002792:	b933      	cbnz	r3, 80027a2 <_free_r+0x2e>
 8002794:	6063      	str	r3, [r4, #4]
 8002796:	6014      	str	r4, [r2, #0]
 8002798:	4628      	mov	r0, r5
 800279a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800279e:	f000 b8c6 	b.w	800292e <__malloc_unlock>
 80027a2:	42a3      	cmp	r3, r4
 80027a4:	d90b      	bls.n	80027be <_free_r+0x4a>
 80027a6:	6821      	ldr	r1, [r4, #0]
 80027a8:	1862      	adds	r2, r4, r1
 80027aa:	4293      	cmp	r3, r2
 80027ac:	bf01      	itttt	eq
 80027ae:	681a      	ldreq	r2, [r3, #0]
 80027b0:	685b      	ldreq	r3, [r3, #4]
 80027b2:	1852      	addeq	r2, r2, r1
 80027b4:	6022      	streq	r2, [r4, #0]
 80027b6:	6063      	str	r3, [r4, #4]
 80027b8:	6004      	str	r4, [r0, #0]
 80027ba:	e7ed      	b.n	8002798 <_free_r+0x24>
 80027bc:	4613      	mov	r3, r2
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	b10a      	cbz	r2, 80027c6 <_free_r+0x52>
 80027c2:	42a2      	cmp	r2, r4
 80027c4:	d9fa      	bls.n	80027bc <_free_r+0x48>
 80027c6:	6819      	ldr	r1, [r3, #0]
 80027c8:	1858      	adds	r0, r3, r1
 80027ca:	42a0      	cmp	r0, r4
 80027cc:	d10b      	bne.n	80027e6 <_free_r+0x72>
 80027ce:	6820      	ldr	r0, [r4, #0]
 80027d0:	4401      	add	r1, r0
 80027d2:	1858      	adds	r0, r3, r1
 80027d4:	4282      	cmp	r2, r0
 80027d6:	6019      	str	r1, [r3, #0]
 80027d8:	d1de      	bne.n	8002798 <_free_r+0x24>
 80027da:	6810      	ldr	r0, [r2, #0]
 80027dc:	6852      	ldr	r2, [r2, #4]
 80027de:	4401      	add	r1, r0
 80027e0:	6019      	str	r1, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	e7d8      	b.n	8002798 <_free_r+0x24>
 80027e6:	d902      	bls.n	80027ee <_free_r+0x7a>
 80027e8:	230c      	movs	r3, #12
 80027ea:	602b      	str	r3, [r5, #0]
 80027ec:	e7d4      	b.n	8002798 <_free_r+0x24>
 80027ee:	6820      	ldr	r0, [r4, #0]
 80027f0:	1821      	adds	r1, r4, r0
 80027f2:	428a      	cmp	r2, r1
 80027f4:	bf01      	itttt	eq
 80027f6:	6811      	ldreq	r1, [r2, #0]
 80027f8:	6852      	ldreq	r2, [r2, #4]
 80027fa:	1809      	addeq	r1, r1, r0
 80027fc:	6021      	streq	r1, [r4, #0]
 80027fe:	6062      	str	r2, [r4, #4]
 8002800:	605c      	str	r4, [r3, #4]
 8002802:	e7c9      	b.n	8002798 <_free_r+0x24>
 8002804:	bd38      	pop	{r3, r4, r5, pc}
 8002806:	bf00      	nop
 8002808:	20000090 	.word	0x20000090

0800280c <_malloc_r>:
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	1ccd      	adds	r5, r1, #3
 8002810:	f025 0503 	bic.w	r5, r5, #3
 8002814:	3508      	adds	r5, #8
 8002816:	2d0c      	cmp	r5, #12
 8002818:	bf38      	it	cc
 800281a:	250c      	movcc	r5, #12
 800281c:	2d00      	cmp	r5, #0
 800281e:	4606      	mov	r6, r0
 8002820:	db01      	blt.n	8002826 <_malloc_r+0x1a>
 8002822:	42a9      	cmp	r1, r5
 8002824:	d903      	bls.n	800282e <_malloc_r+0x22>
 8002826:	230c      	movs	r3, #12
 8002828:	6033      	str	r3, [r6, #0]
 800282a:	2000      	movs	r0, #0
 800282c:	bd70      	pop	{r4, r5, r6, pc}
 800282e:	f000 f87d 	bl	800292c <__malloc_lock>
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <_malloc_r+0xac>)
 8002834:	6814      	ldr	r4, [r2, #0]
 8002836:	4621      	mov	r1, r4
 8002838:	b991      	cbnz	r1, 8002860 <_malloc_r+0x54>
 800283a:	4c20      	ldr	r4, [pc, #128]	; (80028bc <_malloc_r+0xb0>)
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	b91b      	cbnz	r3, 8002848 <_malloc_r+0x3c>
 8002840:	4630      	mov	r0, r6
 8002842:	f000 f863 	bl	800290c <_sbrk_r>
 8002846:	6020      	str	r0, [r4, #0]
 8002848:	4629      	mov	r1, r5
 800284a:	4630      	mov	r0, r6
 800284c:	f000 f85e 	bl	800290c <_sbrk_r>
 8002850:	1c43      	adds	r3, r0, #1
 8002852:	d124      	bne.n	800289e <_malloc_r+0x92>
 8002854:	230c      	movs	r3, #12
 8002856:	4630      	mov	r0, r6
 8002858:	6033      	str	r3, [r6, #0]
 800285a:	f000 f868 	bl	800292e <__malloc_unlock>
 800285e:	e7e4      	b.n	800282a <_malloc_r+0x1e>
 8002860:	680b      	ldr	r3, [r1, #0]
 8002862:	1b5b      	subs	r3, r3, r5
 8002864:	d418      	bmi.n	8002898 <_malloc_r+0x8c>
 8002866:	2b0b      	cmp	r3, #11
 8002868:	d90f      	bls.n	800288a <_malloc_r+0x7e>
 800286a:	600b      	str	r3, [r1, #0]
 800286c:	18cc      	adds	r4, r1, r3
 800286e:	50cd      	str	r5, [r1, r3]
 8002870:	4630      	mov	r0, r6
 8002872:	f000 f85c 	bl	800292e <__malloc_unlock>
 8002876:	f104 000b 	add.w	r0, r4, #11
 800287a:	1d23      	adds	r3, r4, #4
 800287c:	f020 0007 	bic.w	r0, r0, #7
 8002880:	1ac3      	subs	r3, r0, r3
 8002882:	d0d3      	beq.n	800282c <_malloc_r+0x20>
 8002884:	425a      	negs	r2, r3
 8002886:	50e2      	str	r2, [r4, r3]
 8002888:	e7d0      	b.n	800282c <_malloc_r+0x20>
 800288a:	684b      	ldr	r3, [r1, #4]
 800288c:	428c      	cmp	r4, r1
 800288e:	bf16      	itet	ne
 8002890:	6063      	strne	r3, [r4, #4]
 8002892:	6013      	streq	r3, [r2, #0]
 8002894:	460c      	movne	r4, r1
 8002896:	e7eb      	b.n	8002870 <_malloc_r+0x64>
 8002898:	460c      	mov	r4, r1
 800289a:	6849      	ldr	r1, [r1, #4]
 800289c:	e7cc      	b.n	8002838 <_malloc_r+0x2c>
 800289e:	1cc4      	adds	r4, r0, #3
 80028a0:	f024 0403 	bic.w	r4, r4, #3
 80028a4:	42a0      	cmp	r0, r4
 80028a6:	d005      	beq.n	80028b4 <_malloc_r+0xa8>
 80028a8:	1a21      	subs	r1, r4, r0
 80028aa:	4630      	mov	r0, r6
 80028ac:	f000 f82e 	bl	800290c <_sbrk_r>
 80028b0:	3001      	adds	r0, #1
 80028b2:	d0cf      	beq.n	8002854 <_malloc_r+0x48>
 80028b4:	6025      	str	r5, [r4, #0]
 80028b6:	e7db      	b.n	8002870 <_malloc_r+0x64>
 80028b8:	20000090 	.word	0x20000090
 80028bc:	20000094 	.word	0x20000094

080028c0 <_realloc_r>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	4607      	mov	r7, r0
 80028c4:	4614      	mov	r4, r2
 80028c6:	460e      	mov	r6, r1
 80028c8:	b921      	cbnz	r1, 80028d4 <_realloc_r+0x14>
 80028ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80028ce:	4611      	mov	r1, r2
 80028d0:	f7ff bf9c 	b.w	800280c <_malloc_r>
 80028d4:	b922      	cbnz	r2, 80028e0 <_realloc_r+0x20>
 80028d6:	f7ff ff4d 	bl	8002774 <_free_r>
 80028da:	4625      	mov	r5, r4
 80028dc:	4628      	mov	r0, r5
 80028de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e0:	f000 f826 	bl	8002930 <_malloc_usable_size_r>
 80028e4:	42a0      	cmp	r0, r4
 80028e6:	d20f      	bcs.n	8002908 <_realloc_r+0x48>
 80028e8:	4621      	mov	r1, r4
 80028ea:	4638      	mov	r0, r7
 80028ec:	f7ff ff8e 	bl	800280c <_malloc_r>
 80028f0:	4605      	mov	r5, r0
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d0f2      	beq.n	80028dc <_realloc_r+0x1c>
 80028f6:	4631      	mov	r1, r6
 80028f8:	4622      	mov	r2, r4
 80028fa:	f7ff ff17 	bl	800272c <memcpy>
 80028fe:	4631      	mov	r1, r6
 8002900:	4638      	mov	r0, r7
 8002902:	f7ff ff37 	bl	8002774 <_free_r>
 8002906:	e7e9      	b.n	80028dc <_realloc_r+0x1c>
 8002908:	4635      	mov	r5, r6
 800290a:	e7e7      	b.n	80028dc <_realloc_r+0x1c>

0800290c <_sbrk_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	2300      	movs	r3, #0
 8002910:	4c05      	ldr	r4, [pc, #20]	; (8002928 <_sbrk_r+0x1c>)
 8002912:	4605      	mov	r5, r0
 8002914:	4608      	mov	r0, r1
 8002916:	6023      	str	r3, [r4, #0]
 8002918:	f7fd ff4a 	bl	80007b0 <_sbrk>
 800291c:	1c43      	adds	r3, r0, #1
 800291e:	d102      	bne.n	8002926 <_sbrk_r+0x1a>
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	b103      	cbz	r3, 8002926 <_sbrk_r+0x1a>
 8002924:	602b      	str	r3, [r5, #0]
 8002926:	bd38      	pop	{r3, r4, r5, pc}
 8002928:	20000138 	.word	0x20000138

0800292c <__malloc_lock>:
 800292c:	4770      	bx	lr

0800292e <__malloc_unlock>:
 800292e:	4770      	bx	lr

08002930 <_malloc_usable_size_r>:
 8002930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002934:	1f18      	subs	r0, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	bfbc      	itt	lt
 800293a:	580b      	ldrlt	r3, [r1, r0]
 800293c:	18c0      	addlt	r0, r0, r3
 800293e:	4770      	bx	lr

08002940 <_init>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	bf00      	nop
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr

0800294c <_fini>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr


TW10S_Distance_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003490  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d8  080036d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036d8  080036d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036d8  080036d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036d8  080036d8  000136d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08003750  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003750  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aed1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b9e  00000000  00000000  0002af6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002cb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000950  00000000  00000000  0002d518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001779e  00000000  00000000  0002de68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c85  00000000  00000000  00045606  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084bbb  00000000  00000000  0004e28b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2e46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be0  00000000  00000000  000d2ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003584 	.word	0x08003584

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003584 	.word	0x08003584

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_sendCommand>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly



void LCD_sendCommand (char cmd)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f023 030f 	bic.w	r3, r3, #15
 800016c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	011b      	lsls	r3, r3, #4
 8000172:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	f043 030c 	orr.w	r3, r3, #12
 800017a:	b2db      	uxtb	r3, r3
 800017c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800017e:	7bfb      	ldrb	r3, [r7, #15]
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	b2db      	uxtb	r3, r3
 8000186:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000188:	7bbb      	ldrb	r3, [r7, #14]
 800018a:	f043 030c 	orr.w	r3, r3, #12
 800018e:	b2db      	uxtb	r3, r3
 8000190:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000192:	7bbb      	ldrb	r3, [r7, #14]
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800019c:	f107 0208 	add.w	r2, r7, #8
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2304      	movs	r3, #4
 80001a6:	214e      	movs	r1, #78	; 0x4e
 80001a8:	4803      	ldr	r0, [pc, #12]	; (80001b8 <LCD_sendCommand+0x5c>)
 80001aa:	f001 f9e1 	bl	8001570 <HAL_I2C_Master_Transmit>
}
 80001ae:	bf00      	nop
 80001b0:	3710      	adds	r7, #16
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	200000b4 	.word	0x200000b4

080001bc <LCD_sendData>:

void LCD_sendData (char data)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af02      	add	r7, sp, #8
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	f023 030f 	bic.w	r3, r3, #15
 80001cc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	011b      	lsls	r3, r3, #4
 80001d2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	f043 030d 	orr.w	r3, r3, #13
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0309 	orr.w	r3, r3, #9
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001e8:	7bbb      	ldrb	r3, [r7, #14]
 80001ea:	f043 030d 	orr.w	r3, r3, #13
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0309 	orr.w	r3, r3, #9
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	2364      	movs	r3, #100	; 0x64
 8000202:	9300      	str	r3, [sp, #0]
 8000204:	2304      	movs	r3, #4
 8000206:	214e      	movs	r1, #78	; 0x4e
 8000208:	4803      	ldr	r0, [pc, #12]	; (8000218 <LCD_sendData+0x5c>)
 800020a:	f001 f9b1 	bl	8001570 <HAL_I2C_Master_Transmit>
}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	200000b4 	.word	0x200000b4

0800021c <LCD_init>:

void LCD_init (void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	LCD_sendCommand (0x33); /* set 4-bits interface */
 8000220:	2033      	movs	r0, #51	; 0x33
 8000222:	f7ff ff9b 	bl	800015c <LCD_sendCommand>
	LCD_sendCommand (0x32);
 8000226:	2032      	movs	r0, #50	; 0x32
 8000228:	f7ff ff98 	bl	800015c <LCD_sendCommand>
	HAL_Delay(50);
 800022c:	2032      	movs	r0, #50	; 0x32
 800022e:	f000 fd45 	bl	8000cbc <HAL_Delay>
	LCD_sendCommand (0x28); /* start to set LCD function */
 8000232:	2028      	movs	r0, #40	; 0x28
 8000234:	f7ff ff92 	bl	800015c <LCD_sendCommand>
	HAL_Delay(50);
 8000238:	2032      	movs	r0, #50	; 0x32
 800023a:	f000 fd3f 	bl	8000cbc <HAL_Delay>
	LCD_sendCommand (0x01); /* clear display */
 800023e:	2001      	movs	r0, #1
 8000240:	f7ff ff8c 	bl	800015c <LCD_sendCommand>
	HAL_Delay(50);
 8000244:	2032      	movs	r0, #50	; 0x32
 8000246:	f000 fd39 	bl	8000cbc <HAL_Delay>
	LCD_sendCommand (0x06); /* set entry mode */
 800024a:	2006      	movs	r0, #6
 800024c:	f7ff ff86 	bl	800015c <LCD_sendCommand>
	HAL_Delay(50);
 8000250:	2032      	movs	r0, #50	; 0x32
 8000252:	f000 fd33 	bl	8000cbc <HAL_Delay>
	LCD_sendCommand (0x0c); /* set display to on */
 8000256:	200c      	movs	r0, #12
 8000258:	f7ff ff80 	bl	800015c <LCD_sendCommand>
	HAL_Delay(50);
 800025c:	2032      	movs	r0, #50	; 0x32
 800025e:	f000 fd2d 	bl	8000cbc <HAL_Delay>
	LCD_sendCommand (0x02); /* move cursor to home and set data address to 0 */
 8000262:	2002      	movs	r0, #2
 8000264:	f7ff ff7a 	bl	800015c <LCD_sendCommand>
	HAL_Delay(50);
 8000268:	2032      	movs	r0, #50	; 0x32
 800026a:	f000 fd27 	bl	8000cbc <HAL_Delay>
	LCD_sendCommand (0x80);
 800026e:	2080      	movs	r0, #128	; 0x80
 8000270:	f7ff ff74 	bl	800015c <LCD_sendCommand>
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}

08000278 <LCD_print>:

void LCD_print (char *str)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	while (*str) LCD_sendData (*str++);
 8000280:	e006      	b.n	8000290 <LCD_print+0x18>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	607a      	str	r2, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	4618      	mov	r0, r3
 800028c:	f7ff ff96 	bl	80001bc <LCD_sendData>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d1f4      	bne.n	8000282 <LCD_print+0xa>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <LCD_clearDisplay>:

void LCD_clearDisplay (void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	LCD_sendCommand (0x01); //clear display
 80002a4:	2001      	movs	r0, #1
 80002a6:	f7ff ff59 	bl	800015c <LCD_sendCommand>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}

080002ae <LCD_setCursor>:

void LCD_setCursor (int row, int col)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b084      	sub	sp, #16
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d108      	bne.n	80002d0 <LCD_setCursor+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	4413      	add	r3, r2
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	337f      	adds	r3, #127	; 0x7f
 80002cc:	73fb      	strb	r3, [r7, #15]
 80002ce:	e008      	b.n	80002e2 <LCD_setCursor+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	3340      	adds	r3, #64	; 0x40
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002de:	b25b      	sxtb	r3, r3
 80002e0:	73fb      	strb	r3, [r7, #15]
	}
	LCD_sendCommand(pos_Addr);
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f7ff ff39 	bl	800015c <LCD_sendCommand>
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <TW10S_deleteBuffer>:
	return result;
}

/* Delete TW10S buffer */
void TW10S_deleteBuffer(char* buffer)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	tw10s.count = 0;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <TW10S_deleteBuffer+0x3c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	765a      	strb	r2, [r3, #25]
	for(int i=0;i<strlen(buffer);i++)
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	e007      	b.n	8000318 <TW10S_deleteBuffer+0x24>
	{
		buffer[i] = 0;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<strlen(buffer);i++)
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	3301      	adds	r3, #1
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ff17 	bl	800014c <strlen>
 800031e:	4602      	mov	r2, r0
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	429a      	cmp	r2, r3
 8000324:	d8f0      	bhi.n	8000308 <TW10S_deleteBuffer+0x14>
	}

}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000098 	.word	0x20000098

08000334 <TW10S_sendCommand>:

/* TW10S send command */
uint8_t TW10S_sendCommand(char* command, char* response, uint32_t timeout)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
	uint8_t result = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	77fb      	strb	r3, [r7, #31]
	TW10S_deleteBuffer((char*)&tw10s.buffer);
 8000344:	483e      	ldr	r0, [pc, #248]	; (8000440 <TW10S_sendCommand+0x10c>)
 8000346:	f7ff ffd5 	bl	80002f4 <TW10S_deleteBuffer>
	uint32_t time = HAL_GetTick();
 800034a:	f000 fcad 	bl	8000ca8 <HAL_GetTick>
 800034e:	61b8      	str	r0, [r7, #24]
	uint32_t time1 = HAL_GetTick();
 8000350:	f000 fcaa 	bl	8000ca8 <HAL_GetTick>
 8000354:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), 2000);
 8000356:	68f8      	ldr	r0, [r7, #12]
 8000358:	f7ff fef8 	bl	800014c <strlen>
 800035c:	4603      	mov	r3, r0
 800035e:	b29a      	uxth	r2, r3
 8000360:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000364:	68f9      	ldr	r1, [r7, #12]
 8000366:	4837      	ldr	r0, [pc, #220]	; (8000444 <TW10S_sendCommand+0x110>)
 8000368:	f002 f871 	bl	800244e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",strlen("\r\n"),2000);
 800036c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000370:	2202      	movs	r2, #2
 8000372:	4935      	ldr	r1, [pc, #212]	; (8000448 <TW10S_sendCommand+0x114>)
 8000374:	4833      	ldr	r0, [pc, #204]	; (8000444 <TW10S_sendCommand+0x110>)
 8000376:	f002 f86a 	bl	800244e <HAL_UART_Transmit>
	while(result == 0)
 800037a:	e059      	b.n	8000430 <TW10S_sendCommand+0xfc>
	{
		while(HAL_UART_Receive(&huart1, tw10s.rx_data,1,1000) != HAL_OK)
		{
			if(HAL_GetTick() - time > timeout)
 800037c:	f000 fc94 	bl	8000ca8 <HAL_GetTick>
 8000380:	4602      	mov	r2, r0
 8000382:	69bb      	ldr	r3, [r7, #24]
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	d201      	bcs.n	8000390 <TW10S_sendCommand+0x5c>
			{
				return 0;
 800038c:	2300      	movs	r3, #0
 800038e:	e053      	b.n	8000438 <TW10S_sendCommand+0x104>
		while(HAL_UART_Receive(&huart1, tw10s.rx_data,1,1000) != HAL_OK)
 8000390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000394:	2201      	movs	r2, #1
 8000396:	492d      	ldr	r1, [pc, #180]	; (800044c <TW10S_sendCommand+0x118>)
 8000398:	482a      	ldr	r0, [pc, #168]	; (8000444 <TW10S_sendCommand+0x110>)
 800039a:	f002 f8ea 	bl	8002572 <HAL_UART_Receive>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1eb      	bne.n	800037c <TW10S_sendCommand+0x48>
			}
		}
		time = HAL_GetTick();
 80003a4:	f000 fc80 	bl	8000ca8 <HAL_GetTick>
 80003a8:	61b8      	str	r0, [r7, #24]
		tw10s.buffer[tw10s.count++] = tw10s.rx_data[0];
 80003aa:	4b29      	ldr	r3, [pc, #164]	; (8000450 <TW10S_sendCommand+0x11c>)
 80003ac:	7e5b      	ldrb	r3, [r3, #25]
 80003ae:	1c5a      	adds	r2, r3, #1
 80003b0:	b2d1      	uxtb	r1, r2
 80003b2:	4a27      	ldr	r2, [pc, #156]	; (8000450 <TW10S_sendCommand+0x11c>)
 80003b4:	7651      	strb	r1, [r2, #25]
 80003b6:	4619      	mov	r1, r3
 80003b8:	4b25      	ldr	r3, [pc, #148]	; (8000450 <TW10S_sendCommand+0x11c>)
 80003ba:	791a      	ldrb	r2, [r3, #4]
 80003bc:	4b24      	ldr	r3, [pc, #144]	; (8000450 <TW10S_sendCommand+0x11c>)
 80003be:	440b      	add	r3, r1
 80003c0:	715a      	strb	r2, [r3, #5]
		while(HAL_GetTick() - time < timeout)
 80003c2:	e02d      	b.n	8000420 <TW10S_sendCommand+0xec>
		{
			if(HAL_UART_Receive(&huart1, tw10s.rx_data, 1, 1000) == HAL_OK)
 80003c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c8:	2201      	movs	r2, #1
 80003ca:	4920      	ldr	r1, [pc, #128]	; (800044c <TW10S_sendCommand+0x118>)
 80003cc:	481d      	ldr	r0, [pc, #116]	; (8000444 <TW10S_sendCommand+0x110>)
 80003ce:	f002 f8d0 	bl	8002572 <HAL_UART_Receive>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d10f      	bne.n	80003f8 <TW10S_sendCommand+0xc4>
			{
				tw10s.buffer[tw10s.count++] = tw10s.rx_data[0];
 80003d8:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <TW10S_sendCommand+0x11c>)
 80003da:	7e5b      	ldrb	r3, [r3, #25]
 80003dc:	1c5a      	adds	r2, r3, #1
 80003de:	b2d1      	uxtb	r1, r2
 80003e0:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <TW10S_sendCommand+0x11c>)
 80003e2:	7651      	strb	r1, [r2, #25]
 80003e4:	4619      	mov	r1, r3
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <TW10S_sendCommand+0x11c>)
 80003e8:	791a      	ldrb	r2, [r3, #4]
 80003ea:	4b19      	ldr	r3, [pc, #100]	; (8000450 <TW10S_sendCommand+0x11c>)
 80003ec:	440b      	add	r3, r1
 80003ee:	715a      	strb	r2, [r3, #5]
				time1 = HAL_GetTick();
 80003f0:	f000 fc5a 	bl	8000ca8 <HAL_GetTick>
 80003f4:	6178      	str	r0, [r7, #20]
 80003f6:	e013      	b.n	8000420 <TW10S_sendCommand+0xec>
			}
			else
			{
				if(HAL_GetTick() - time1 > 100)
 80003f8:	f000 fc56 	bl	8000ca8 <HAL_GetTick>
 80003fc:	4602      	mov	r2, r0
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	2b64      	cmp	r3, #100	; 0x64
 8000404:	d90c      	bls.n	8000420 <TW10S_sendCommand+0xec>
				{
					if(strstr((char*)tw10s.buffer,response) != NULL)
 8000406:	68b9      	ldr	r1, [r7, #8]
 8000408:	480d      	ldr	r0, [pc, #52]	; (8000440 <TW10S_sendCommand+0x10c>)
 800040a:	f002 fcaf 	bl	8002d6c <strstr>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d002      	beq.n	800041a <TW10S_sendCommand+0xe6>
					{
						result = 1;
 8000414:	2301      	movs	r3, #1
 8000416:	77fb      	strb	r3, [r7, #31]
 8000418:	e00a      	b.n	8000430 <TW10S_sendCommand+0xfc>
					}
					else
					{
						result = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	77fb      	strb	r3, [r7, #31]
					}
					break;
 800041e:	e007      	b.n	8000430 <TW10S_sendCommand+0xfc>
		while(HAL_GetTick() - time < timeout)
 8000420:	f000 fc42 	bl	8000ca8 <HAL_GetTick>
 8000424:	4602      	mov	r2, r0
 8000426:	69bb      	ldr	r3, [r7, #24]
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	429a      	cmp	r2, r3
 800042e:	d8c9      	bhi.n	80003c4 <TW10S_sendCommand+0x90>
	while(result == 0)
 8000430:	7ffb      	ldrb	r3, [r7, #31]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0ac      	beq.n	8000390 <TW10S_sendCommand+0x5c>
				}
			}
		}
	}
	return result;
 8000436:	7ffb      	ldrb	r3, [r7, #31]
}
 8000438:	4618      	mov	r0, r3
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	2000009d 	.word	0x2000009d
 8000444:	2000010c 	.word	0x2000010c
 8000448:	0800359c 	.word	0x0800359c
 800044c:	2000009c 	.word	0x2000009c
 8000450:	20000098 	.word	0x20000098

08000454 <stopMeasure>:

/* Stop measuring Command */
void stopMeasure()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	TW10S_sendCommand("iHALT", "STOP OK", 2000);
 8000458:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800045c:	4902      	ldr	r1, [pc, #8]	; (8000468 <stopMeasure+0x14>)
 800045e:	4803      	ldr	r0, [pc, #12]	; (800046c <stopMeasure+0x18>)
 8000460:	f7ff ff68 	bl	8000334 <TW10S_sendCommand>
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	080035a0 	.word	0x080035a0
 800046c:	080035a8 	.word	0x080035a8

08000470 <laserOn>:

/* Turn on laser command */
void laserOn()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	TW10S_sendCommand("iLD:1", "LASER OPEN", 2000);
 8000474:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000478:	4904      	ldr	r1, [pc, #16]	; (800048c <laserOn+0x1c>)
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <laserOn+0x20>)
 800047c:	f7ff ff5a 	bl	8000334 <TW10S_sendCommand>
	tw10s.laser = 1;
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <laserOn+0x24>)
 8000482:	2201      	movs	r2, #1
 8000484:	705a      	strb	r2, [r3, #1]
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	080035b0 	.word	0x080035b0
 8000490:	080035bc 	.word	0x080035bc
 8000494:	20000098 	.word	0x20000098

08000498 <setOffset>:
	tw10s.laser = 0;
}

/* Set offset distance for device */
void setOffset(uint8_t offset)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	char buff[20] = {0};
 80004a2:	f107 030c 	add.w	r3, r7, #12
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]
	sprintf(buff,"iSET:1,%d", offset);
 80004b2:	79fa      	ldrb	r2, [r7, #7]
 80004b4:	f107 030c 	add.w	r3, r7, #12
 80004b8:	4907      	ldr	r1, [pc, #28]	; (80004d8 <setOffset+0x40>)
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fc36 	bl	8002d2c <siprintf>
	TW10S_sendCommand(buff, "OK", 2000);
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80004c8:	4904      	ldr	r1, [pc, #16]	; (80004dc <setOffset+0x44>)
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ff32 	bl	8000334 <TW10S_sendCommand>
}
 80004d0:	bf00      	nop
 80004d2:	3720      	adds	r7, #32
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	080035d8 	.word	0x080035d8
 80004dc:	080035e4 	.word	0x080035e4

080004e0 <setRange>:

/* Set range for measuring */
void setRange(uint16_t range)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	80fb      	strh	r3, [r7, #6]
	char buff[20] = {0};
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]
	sprintf(buff,"iSET:2,%d", range);
 80004fa:	88fa      	ldrh	r2, [r7, #6]
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <setRange+0x40>)
 8000502:	4618      	mov	r0, r3
 8000504:	f002 fc12 	bl	8002d2c <siprintf>
	TW10S_sendCommand(buff, "OK", 2000);
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000510:	4904      	ldr	r1, [pc, #16]	; (8000524 <setRange+0x44>)
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff0e 	bl	8000334 <TW10S_sendCommand>
}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	080035e8 	.word	0x080035e8
 8000524:	080035e4 	.word	0x080035e4

08000528 <setBaudrate>:

/* Set baudrate for UART protocol */
void setBaudrate(uint32_t baudrate)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	char buff[20] = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
	sprintf(buff,"iSET:3,%ld",baudrate);
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4908      	ldr	r1, [pc, #32]	; (8000568 <setBaudrate+0x40>)
 8000548:	4618      	mov	r0, r3
 800054a:	f002 fbef 	bl	8002d2c <siprintf>
	TW10S_sendCommand(buff, "OK", 2000);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000556:	4905      	ldr	r1, [pc, #20]	; (800056c <setBaudrate+0x44>)
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff feeb 	bl	8000334 <TW10S_sendCommand>
}
 800055e:	bf00      	nop
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	080035f4 	.word	0x080035f4
 800056c:	080035e4 	.word	0x080035e4

08000570 <setMode>:
	TW10S_sendCommand(buff, "OK", 2000);
}

/* Set mode for taking data retrun */
void setMode(uint8_t mode)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	tw10s.mode = mode;
 800057a:	4a04      	ldr	r2, [pc, #16]	; (800058c <setMode+0x1c>)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	7093      	strb	r3, [r2, #2]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000098 	.word	0x20000098

08000590 <TW10S_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern TW10S_Struct tw10s;

void TW10S_init()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	stopMeasure();
 8000594:	f7ff ff5e 	bl	8000454 <stopMeasure>
	HAL_Delay(300);
 8000598:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800059c:	f000 fb8e 	bl	8000cbc <HAL_Delay>
	laserOn();
 80005a0:	f7ff ff66 	bl	8000470 <laserOn>
	HAL_Delay(300);
 80005a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005a8:	f000 fb88 	bl	8000cbc <HAL_Delay>
	setOffset(-10);
 80005ac:	20f6      	movs	r0, #246	; 0xf6
 80005ae:	f7ff ff73 	bl	8000498 <setOffset>
	HAL_Delay(300);
 80005b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005b6:	f000 fb81 	bl	8000cbc <HAL_Delay>
	setRange(40000);
 80005ba:	f649 4040 	movw	r0, #40000	; 0x9c40
 80005be:	f7ff ff8f 	bl	80004e0 <setRange>
	HAL_Delay(300);
 80005c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005c6:	f000 fb79 	bl	8000cbc <HAL_Delay>
	setBaudrate(38400);
 80005ca:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 80005ce:	f7ff ffab 	bl	8000528 <setBaudrate>
	HAL_Delay(300);
 80005d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005d6:	f000 fb71 	bl	8000cbc <HAL_Delay>
	setMode(SINGLE_MODE);
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff ffc8 	bl	8000570 <setMode>
	LCD_init();
 80005e0:	f7ff fe1c 	bl	800021c <LCD_init>
	HAL_Delay(200);
 80005e4:	20c8      	movs	r0, #200	; 0xc8
 80005e6:	f000 fb69 	bl	8000cbc <HAL_Delay>
	LCD_clearDisplay();
 80005ea:	f7ff fe59 	bl	80002a0 <LCD_clearDisplay>
	HAL_Delay(200);
 80005ee:	20c8      	movs	r0, #200	; 0xc8
 80005f0:	f000 fb64 	bl	8000cbc <HAL_Delay>
	LCD_setCursor(1, 0);
 80005f4:	2100      	movs	r1, #0
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fe59 	bl	80002ae <LCD_setCursor>
	HAL_Delay(200);
 80005fc:	20c8      	movs	r0, #200	; 0xc8
 80005fe:	f000 fb5d 	bl	8000cbc <HAL_Delay>
	LCD_print("GHTK");
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <TW10S_init+0xa0>)
 8000604:	f7ff fe38 	bl	8000278 <LCD_print>
	HAL_Delay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f000 fb56 	bl	8000cbc <HAL_Delay>
	LCD_setCursor(2, 0);
 8000610:	2100      	movs	r1, #0
 8000612:	2002      	movs	r0, #2
 8000614:	f7ff fe4b 	bl	80002ae <LCD_setCursor>
	HAL_Delay(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061c:	f000 fb4e 	bl	8000cbc <HAL_Delay>
	LCD_print("Distance Measure");
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <TW10S_init+0xa4>)
 8000622:	f7ff fe29 	bl	8000278 <LCD_print>
	HAL_Delay(200);
 8000626:	20c8      	movs	r0, #200	; 0xc8
 8000628:	f000 fb48 	bl	8000cbc <HAL_Delay>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	08003654 	.word	0x08003654
 8000634:	0800365c 	.word	0x0800365c

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 fadc 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f824 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 f8ea 	bl	800081c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000648:	f000 f894 	bl	8000774 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f8bc 	bl	80007c8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000650:	f000 f862 	bl	8000718 <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */

  	TW10S_init();
 8000654:	f7ff ff9c 	bl	8000590 <TW10S_init>
//		  distance = getDistance();
//		  break;
//	  }
//	  LCD_clearDisplay();
//	  HAL_Delay(100);
	  LCD_setCursor(0, 1);
 8000658:	2101      	movs	r1, #1
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff fe27 	bl	80002ae <LCD_setCursor>
	  HAL_Delay(100);
 8000660:	2064      	movs	r0, #100	; 0x64
 8000662:	f000 fb2b 	bl	8000cbc <HAL_Delay>
	  TW10S_sendCommand("iSM", "", 1000);
 8000666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800066a:	4905      	ldr	r1, [pc, #20]	; (8000680 <main+0x48>)
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <main+0x4c>)
 800066e:	f7ff fe61 	bl	8000334 <TW10S_sendCommand>
	  LCD_print((char*)tw10s.buffer);
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <main+0x50>)
 8000674:	f7ff fe00 	bl	8000278 <LCD_print>
	  HAL_Delay(200);
 8000678:	20c8      	movs	r0, #200	; 0xc8
 800067a:	f000 fb1f 	bl	8000cbc <HAL_Delay>
	  LCD_setCursor(0, 1);
 800067e:	e7eb      	b.n	8000658 <main+0x20>
 8000680:	08003670 	.word	0x08003670
 8000684:	08003674 	.word	0x08003674
 8000688:	2000009d 	.word	0x2000009d

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	; 0x40
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	2228      	movs	r2, #40	; 0x28
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fb3e 	bl	8002d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fa51 	bl	8001b7c <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006e0:	f000 f8e8 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fcbc 	bl	800207c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800070a:	f000 f8d3 	bl	80008b4 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C2_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <MX_I2C2_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_I2C2_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_I2C2_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C2_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_I2C2_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_I2C2_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_I2C2_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_I2C2_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_I2C2_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_I2C2_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C2_Init+0x50>)
 8000756:	f000 fdd3 	bl	8001300 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f8a8 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000b4 	.word	0x200000b4
 800076c:	40005800 	.word	0x40005800
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_USART1_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000780:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007ac:	f001 fe02 	bl	80023b4 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f87d 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000010c 	.word	0x2000010c
 80007c4:	40013800 	.word	0x40013800

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_USART2_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 8000800:	f001 fdd8 	bl	80023b4 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f853 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000014c 	.word	0x2000014c
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000836:	f043 0320 	orr.w	r3, r3, #32
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_GPIO_Init+0x8c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0320 	and.w	r3, r3, #32
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_GPIO_Init+0x8c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <MX_GPIO_Init+0x8c>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_GPIO_Init+0x8c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0308 	and.w	r3, r3, #8
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : ON_OFF_Pin START_Pin MODE_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin|START_Pin|MODE_Pin;
 8000878:	23e0      	movs	r3, #224	; 0xe0
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_GPIO_Init+0x90>)
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <MX_GPIO_Init+0x94>)
 800088c:	f000 fbbc 	bl	8001008 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2101      	movs	r1, #1
 8000894:	2017      	movs	r0, #23
 8000896:	f000 fb0a 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800089a:	2017      	movs	r0, #23
 800089c:	f000 fb23 	bl	8000ee6 <HAL_NVIC_EnableIRQ>

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	10210000 	.word	0x10210000
 80008b0:	40010800 	.word	0x40010800

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ba:	e7fe      	b.n	80008ba <Error_Handler+0x6>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_MspInit+0x5c>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a14      	ldr	r2, [pc, #80]	; (8000918 <HAL_MspInit+0x5c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_MspInit+0x5c>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x5c>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_MspInit+0x5c>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x5c>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_MspInit+0x60>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <HAL_MspInit+0x60>)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	40021000 	.word	0x40021000
 800091c:	40010000 	.word	0x40010000

08000920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a16      	ldr	r2, [pc, #88]	; (8000994 <HAL_I2C_MspInit+0x74>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d124      	bne.n	800098a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_I2C_MspInit+0x78>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <HAL_I2C_MspInit+0x78>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_I2C_MspInit+0x78>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000958:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800095c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095e:	2312      	movs	r3, #18
 8000960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <HAL_I2C_MspInit+0x7c>)
 800096e:	f000 fb4b 	bl	8001008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_I2C_MspInit+0x78>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_I2C_MspInit+0x78>)
 8000978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_I2C_MspInit+0x78>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40005800 	.word	0x40005800
 8000998:	40021000 	.word	0x40021000
 800099c:	40010c00 	.word	0x40010c00

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a3b      	ldr	r2, [pc, #236]	; (8000aa8 <HAL_UART_MspInit+0x108>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d13a      	bne.n	8000a36 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c0:	4b3a      	ldr	r3, [pc, #232]	; (8000aac <HAL_UART_MspInit+0x10c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a39      	ldr	r2, [pc, #228]	; (8000aac <HAL_UART_MspInit+0x10c>)
 80009c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b37      	ldr	r3, [pc, #220]	; (8000aac <HAL_UART_MspInit+0x10c>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b34      	ldr	r3, [pc, #208]	; (8000aac <HAL_UART_MspInit+0x10c>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a33      	ldr	r2, [pc, #204]	; (8000aac <HAL_UART_MspInit+0x10c>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b31      	ldr	r3, [pc, #196]	; (8000aac <HAL_UART_MspInit+0x10c>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	4619      	mov	r1, r3
 8000a04:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <HAL_UART_MspInit+0x110>)
 8000a06:	f000 faff 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0318 	add.w	r3, r7, #24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4824      	ldr	r0, [pc, #144]	; (8000ab0 <HAL_UART_MspInit+0x110>)
 8000a20:	f000 faf2 	bl	8001008 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2101      	movs	r1, #1
 8000a28:	2025      	movs	r0, #37	; 0x25
 8000a2a:	f000 fa40 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a2e:	2025      	movs	r0, #37	; 0x25
 8000a30:	f000 fa59 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a34:	e034      	b.n	8000aa0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <HAL_UART_MspInit+0x114>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d12f      	bne.n	8000aa0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <HAL_UART_MspInit+0x10c>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	4a19      	ldr	r2, [pc, #100]	; (8000aac <HAL_UART_MspInit+0x10c>)
 8000a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4a:	61d3      	str	r3, [r2, #28]
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_UART_MspInit+0x10c>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_UART_MspInit+0x10c>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <HAL_UART_MspInit+0x10c>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <HAL_UART_MspInit+0x10c>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a70:	2304      	movs	r3, #4
 8000a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <HAL_UART_MspInit+0x110>)
 8000a84:	f000 fac0 	bl	8001008 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <HAL_UART_MspInit+0x110>)
 8000a9c:	f000 fab4 	bl	8001008 <HAL_GPIO_Init>
}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40013800 	.word	0x40013800
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f8c1 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b0a:	2020      	movs	r0, #32
 8000b0c:	f000 fbd6 	bl	80012bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b10:	2040      	movs	r0, #64	; 0x40
 8000b12:	f000 fbd3 	bl	80012bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b16:	2080      	movs	r0, #128	; 0x80
 8000b18:	f000 fbd0 	bl	80012bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <USART1_IRQHandler+0x10>)
 8000b26:	f001 fdc3 	bl	80026b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000010c 	.word	0x2000010c

08000b34 <_sbrk>:
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
 8000b64:	f002 f8b0 	bl	8002cc8 <__errno>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20005000 	.word	0x20005000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	2000008c 	.word	0x2000008c
 8000b9c:	20000198 	.word	0x20000198

08000ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <Reset_Handler>:
 8000bac:	2100      	movs	r1, #0
 8000bae:	e003      	b.n	8000bb8 <LoopCopyDataInit>

08000bb0 <CopyDataInit>:
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <LoopFillZerobss+0x14>)
 8000bb2:	585b      	ldr	r3, [r3, r1]
 8000bb4:	5043      	str	r3, [r0, r1]
 8000bb6:	3104      	adds	r1, #4

08000bb8 <LoopCopyDataInit>:
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <LoopFillZerobss+0x18>)
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <LoopFillZerobss+0x1c>)
 8000bbc:	1842      	adds	r2, r0, r1
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d3f6      	bcc.n	8000bb0 <CopyDataInit>
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopFillZerobss+0x20>)
 8000bc4:	e002      	b.n	8000bcc <LoopFillZerobss>

08000bc6 <FillZerobss>:
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f842 3b04 	str.w	r3, [r2], #4

08000bcc <LoopFillZerobss>:
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <LoopFillZerobss+0x24>)
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d3f9      	bcc.n	8000bc6 <FillZerobss>
 8000bd2:	f7ff ffe5 	bl	8000ba0 <SystemInit>
 8000bd6:	f002 f87d 	bl	8002cd4 <__libc_init_array>
 8000bda:	f7ff fd2d 	bl	8000638 <main>
 8000bde:	4770      	bx	lr
 8000be0:	080036e0 	.word	0x080036e0
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000070 	.word	0x20000070
 8000bec:	20000070 	.word	0x20000070
 8000bf0:	20000198 	.word	0x20000198

08000bf4 <ADC1_2_IRQHandler>:
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f945 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe52 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f95d 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f925 	bl	8000eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000190 	.word	0x20000190

08000ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	20000190 	.word	0x20000190

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff fff0 	bl	8000ca8 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_Delay+0x40>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffe0 	bl	8000ca8 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000008 	.word	0x20000008

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4906      	ldr	r1, [pc, #24]	; (8000d98 <__NVIC_EnableIRQ+0x34>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff90 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff2d 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff42 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff90 	bl	8000df0 <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5f 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff35 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d005      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2204      	movs	r2, #4
 8000f36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e051      	b.n	8000fe2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 020e 	bic.w	r2, r2, #14
 8000f4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0201 	bic.w	r2, r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a22      	ldr	r2, [pc, #136]	; (8000fec <HAL_DMA_Abort_IT+0xd0>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d029      	beq.n	8000fbc <HAL_DMA_Abort_IT+0xa0>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <HAL_DMA_Abort_IT+0xd4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d022      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x9c>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <HAL_DMA_Abort_IT+0xd8>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d01a      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x96>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HAL_DMA_Abort_IT+0xdc>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d012      	beq.n	8000fac <HAL_DMA_Abort_IT+0x90>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <HAL_DMA_Abort_IT+0xe0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d00a      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0x8a>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a1a      	ldr	r2, [pc, #104]	; (8001000 <HAL_DMA_Abort_IT+0xe4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d102      	bne.n	8000fa0 <HAL_DMA_Abort_IT+0x84>
 8000f9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f9e:	e00e      	b.n	8000fbe <HAL_DMA_Abort_IT+0xa2>
 8000fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fa4:	e00b      	b.n	8000fbe <HAL_DMA_Abort_IT+0xa2>
 8000fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000faa:	e008      	b.n	8000fbe <HAL_DMA_Abort_IT+0xa2>
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	e005      	b.n	8000fbe <HAL_DMA_Abort_IT+0xa2>
 8000fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb6:	e002      	b.n	8000fbe <HAL_DMA_Abort_IT+0xa2>
 8000fb8:	2310      	movs	r3, #16
 8000fba:	e000      	b.n	8000fbe <HAL_DMA_Abort_IT+0xa2>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	4a11      	ldr	r2, [pc, #68]	; (8001004 <HAL_DMA_Abort_IT+0xe8>)
 8000fc0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	4798      	blx	r3
    } 
  }
  return status;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40020008 	.word	0x40020008
 8000ff0:	4002001c 	.word	0x4002001c
 8000ff4:	40020030 	.word	0x40020030
 8000ff8:	40020044 	.word	0x40020044
 8000ffc:	40020058 	.word	0x40020058
 8001000:	4002006c 	.word	0x4002006c
 8001004:	40020000 	.word	0x40020000

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b08b      	sub	sp, #44	; 0x2c
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e127      	b.n	800126c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800101c:	2201      	movs	r2, #1
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	429a      	cmp	r2, r3
 8001036:	f040 8116 	bne.w	8001266 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b12      	cmp	r3, #18
 8001040:	d034      	beq.n	80010ac <HAL_GPIO_Init+0xa4>
 8001042:	2b12      	cmp	r3, #18
 8001044:	d80d      	bhi.n	8001062 <HAL_GPIO_Init+0x5a>
 8001046:	2b02      	cmp	r3, #2
 8001048:	d02b      	beq.n	80010a2 <HAL_GPIO_Init+0x9a>
 800104a:	2b02      	cmp	r3, #2
 800104c:	d804      	bhi.n	8001058 <HAL_GPIO_Init+0x50>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d031      	beq.n	80010b6 <HAL_GPIO_Init+0xae>
 8001052:	2b01      	cmp	r3, #1
 8001054:	d01c      	beq.n	8001090 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001056:	e048      	b.n	80010ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001058:	2b03      	cmp	r3, #3
 800105a:	d043      	beq.n	80010e4 <HAL_GPIO_Init+0xdc>
 800105c:	2b11      	cmp	r3, #17
 800105e:	d01b      	beq.n	8001098 <HAL_GPIO_Init+0x90>
          break;
 8001060:	e043      	b.n	80010ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001062:	4a89      	ldr	r2, [pc, #548]	; (8001288 <HAL_GPIO_Init+0x280>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d026      	beq.n	80010b6 <HAL_GPIO_Init+0xae>
 8001068:	4a87      	ldr	r2, [pc, #540]	; (8001288 <HAL_GPIO_Init+0x280>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d806      	bhi.n	800107c <HAL_GPIO_Init+0x74>
 800106e:	4a87      	ldr	r2, [pc, #540]	; (800128c <HAL_GPIO_Init+0x284>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d020      	beq.n	80010b6 <HAL_GPIO_Init+0xae>
 8001074:	4a86      	ldr	r2, [pc, #536]	; (8001290 <HAL_GPIO_Init+0x288>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01d      	beq.n	80010b6 <HAL_GPIO_Init+0xae>
          break;
 800107a:	e036      	b.n	80010ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800107c:	4a85      	ldr	r2, [pc, #532]	; (8001294 <HAL_GPIO_Init+0x28c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0xae>
 8001082:	4a85      	ldr	r2, [pc, #532]	; (8001298 <HAL_GPIO_Init+0x290>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d016      	beq.n	80010b6 <HAL_GPIO_Init+0xae>
 8001088:	4a84      	ldr	r2, [pc, #528]	; (800129c <HAL_GPIO_Init+0x294>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0xae>
          break;
 800108e:	e02c      	b.n	80010ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e028      	b.n	80010ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	3304      	adds	r3, #4
 800109e:	623b      	str	r3, [r7, #32]
          break;
 80010a0:	e023      	b.n	80010ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	3308      	adds	r3, #8
 80010a8:	623b      	str	r3, [r7, #32]
          break;
 80010aa:	e01e      	b.n	80010ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	330c      	adds	r3, #12
 80010b2:	623b      	str	r3, [r7, #32]
          break;
 80010b4:	e019      	b.n	80010ea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010be:	2304      	movs	r3, #4
 80010c0:	623b      	str	r3, [r7, #32]
          break;
 80010c2:	e012      	b.n	80010ea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d105      	bne.n	80010d8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010cc:	2308      	movs	r3, #8
 80010ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	611a      	str	r2, [r3, #16]
          break;
 80010d6:	e008      	b.n	80010ea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d8:	2308      	movs	r3, #8
 80010da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	615a      	str	r2, [r3, #20]
          break;
 80010e2:	e002      	b.n	80010ea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2bff      	cmp	r3, #255	; 0xff
 80010ee:	d801      	bhi.n	80010f4 <HAL_GPIO_Init+0xec>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	e001      	b.n	80010f8 <HAL_GPIO_Init+0xf0>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3304      	adds	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	2bff      	cmp	r3, #255	; 0xff
 80010fe:	d802      	bhi.n	8001106 <HAL_GPIO_Init+0xfe>
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x104>
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	3b08      	subs	r3, #8
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	210f      	movs	r1, #15
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	401a      	ands	r2, r3
 800111e:	6a39      	ldr	r1, [r7, #32]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	431a      	orrs	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 8096 	beq.w	8001266 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800113a:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <HAL_GPIO_Init+0x298>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	4a58      	ldr	r2, [pc, #352]	; (80012a0 <HAL_GPIO_Init+0x298>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6193      	str	r3, [r2, #24]
 8001146:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <HAL_GPIO_Init+0x298>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001152:	4a54      	ldr	r2, [pc, #336]	; (80012a4 <HAL_GPIO_Init+0x29c>)
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4013      	ands	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_GPIO_Init+0x2a0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x19e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4a      	ldr	r2, [pc, #296]	; (80012ac <HAL_GPIO_Init+0x2a4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x19a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a49      	ldr	r2, [pc, #292]	; (80012b0 <HAL_GPIO_Init+0x2a8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x196>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a48      	ldr	r2, [pc, #288]	; (80012b4 <HAL_GPIO_Init+0x2ac>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x192>
 8001196:	2303      	movs	r3, #3
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x1a0>
 800119a:	2304      	movs	r3, #4
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x1a0>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x1a0>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x1a0>
 80011a6:	2300      	movs	r3, #0
 80011a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011aa:	f002 0203 	and.w	r2, r2, #3
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	4093      	lsls	r3, r2
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011b8:	493a      	ldr	r1, [pc, #232]	; (80012a4 <HAL_GPIO_Init+0x29c>)
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d006      	beq.n	80011e0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d2:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4938      	ldr	r1, [pc, #224]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
 80011de:	e006      	b.n	80011ee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011e0:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4933      	ldr	r1, [pc, #204]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	492e      	ldr	r1, [pc, #184]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
 8001206:	e006      	b.n	8001216 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	43db      	mvns	r3, r3
 8001210:	4929      	ldr	r1, [pc, #164]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001212:	4013      	ands	r3, r2
 8001214:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	4924      	ldr	r1, [pc, #144]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	608b      	str	r3, [r1, #8]
 800122e:	e006      	b.n	800123e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	43db      	mvns	r3, r3
 8001238:	491f      	ldr	r1, [pc, #124]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 800123a:	4013      	ands	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	491a      	ldr	r1, [pc, #104]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	60cb      	str	r3, [r1, #12]
 8001256:	e006      	b.n	8001266 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	43db      	mvns	r3, r3
 8001260:	4915      	ldr	r1, [pc, #84]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001262:	4013      	ands	r3, r2
 8001264:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	3301      	adds	r3, #1
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	f47f aed0 	bne.w	800101c <HAL_GPIO_Init+0x14>
  }
}
 800127c:	bf00      	nop
 800127e:	372c      	adds	r7, #44	; 0x2c
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	10210000 	.word	0x10210000
 800128c:	10110000 	.word	0x10110000
 8001290:	10120000 	.word	0x10120000
 8001294:	10310000 	.word	0x10310000
 8001298:	10320000 	.word	0x10320000
 800129c:	10220000 	.word	0x10220000
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40010c00 	.word	0x40010c00
 80012b0:	40011000 	.word	0x40011000
 80012b4:	40011400 	.word	0x40011400
 80012b8:	40010400 	.word	0x40010400

080012bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f806 	bl	80012ec <HAL_GPIO_EXTI_Callback>
  }
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e11f      	b.n	8001552 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fafa 	bl	8000920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2224      	movs	r2, #36	; 0x24
 8001330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001352:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001362:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001364:	f000 ffe0 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a7b      	ldr	r2, [pc, #492]	; (800155c <HAL_I2C_Init+0x25c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d807      	bhi.n	8001384 <HAL_I2C_Init+0x84>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4a7a      	ldr	r2, [pc, #488]	; (8001560 <HAL_I2C_Init+0x260>)
 8001378:	4293      	cmp	r3, r2
 800137a:	bf94      	ite	ls
 800137c:	2301      	movls	r3, #1
 800137e:	2300      	movhi	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	e006      	b.n	8001392 <HAL_I2C_Init+0x92>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4a77      	ldr	r2, [pc, #476]	; (8001564 <HAL_I2C_Init+0x264>)
 8001388:	4293      	cmp	r3, r2
 800138a:	bf94      	ite	ls
 800138c:	2301      	movls	r3, #1
 800138e:	2300      	movhi	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0db      	b.n	8001552 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4a72      	ldr	r2, [pc, #456]	; (8001568 <HAL_I2C_Init+0x268>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	0c9b      	lsrs	r3, r3, #18
 80013a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a64      	ldr	r2, [pc, #400]	; (800155c <HAL_I2C_Init+0x25c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d802      	bhi.n	80013d4 <HAL_I2C_Init+0xd4>
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3301      	adds	r3, #1
 80013d2:	e009      	b.n	80013e8 <HAL_I2C_Init+0xe8>
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_I2C_Init+0x26c>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	099b      	lsrs	r3, r3, #6
 80013e6:	3301      	adds	r3, #1
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	430b      	orrs	r3, r1
 80013ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4956      	ldr	r1, [pc, #344]	; (800155c <HAL_I2C_Init+0x25c>)
 8001404:	428b      	cmp	r3, r1
 8001406:	d80d      	bhi.n	8001424 <HAL_I2C_Init+0x124>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1e59      	subs	r1, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fbb1 f3f3 	udiv	r3, r1, r3
 8001416:	3301      	adds	r3, #1
 8001418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141c:	2b04      	cmp	r3, #4
 800141e:	bf38      	it	cc
 8001420:	2304      	movcc	r3, #4
 8001422:	e04f      	b.n	80014c4 <HAL_I2C_Init+0x1c4>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_I2C_Init+0x150>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	e012      	b.n	8001476 <HAL_I2C_Init+0x176>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e58      	subs	r0, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6859      	ldr	r1, [r3, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	0099      	lsls	r1, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	fbb0 f3f3 	udiv	r3, r0, r3
 8001466:	3301      	adds	r3, #1
 8001468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf0c      	ite	eq
 8001470:	2301      	moveq	r3, #1
 8001472:	2300      	movne	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Init+0x17e>
 800147a:	2301      	movs	r3, #1
 800147c:	e022      	b.n	80014c4 <HAL_I2C_Init+0x1c4>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10e      	bne.n	80014a4 <HAL_I2C_Init+0x1a4>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1e58      	subs	r0, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	440b      	add	r3, r1
 8001494:	fbb0 f3f3 	udiv	r3, r0, r3
 8001498:	3301      	adds	r3, #1
 800149a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a2:	e00f      	b.n	80014c4 <HAL_I2C_Init+0x1c4>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1e58      	subs	r0, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	0099      	lsls	r1, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	6809      	ldr	r1, [r1, #0]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6911      	ldr	r1, [r2, #16]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68d2      	ldr	r2, [r2, #12]
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	430b      	orrs	r3, r1
 8001506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	000186a0 	.word	0x000186a0
 8001560:	001e847f 	.word	0x001e847f
 8001564:	003d08ff 	.word	0x003d08ff
 8001568:	431bde83 	.word	0x431bde83
 800156c:	10624dd3 	.word	0x10624dd3

08001570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	460b      	mov	r3, r1
 800157e:	817b      	strh	r3, [r7, #10]
 8001580:	4613      	mov	r3, r2
 8001582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff fb90 	bl	8000ca8 <HAL_GetTick>
 8001588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b20      	cmp	r3, #32
 8001594:	f040 80e0 	bne.w	8001758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2319      	movs	r3, #25
 800159e:	2201      	movs	r2, #1
 80015a0:	4970      	ldr	r1, [pc, #448]	; (8001764 <HAL_I2C_Master_Transmit+0x1f4>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f964 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015ae:	2302      	movs	r3, #2
 80015b0:	e0d3      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_I2C_Master_Transmit+0x50>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0cc      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d007      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2221      	movs	r2, #33	; 0x21
 80015fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2210      	movs	r2, #16
 8001602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	893a      	ldrh	r2, [r7, #8]
 8001616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_I2C_Master_Transmit+0x1f8>)
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001628:	8979      	ldrh	r1, [r7, #10]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f89c 	bl	800176c <I2C_MasterRequestWrite>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e08d      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001654:	e066      	b.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f9de 	bl	8001a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2b04      	cmp	r3, #4
 800166c:	d107      	bne.n	800167e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800167c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d11b      	bne.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f9ce 	bl	8001a9e <I2C_WaitOnBTFFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00d      	beq.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2b04      	cmp	r3, #4
 800170e:	d107      	bne.n	8001720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e01a      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d194      	bne.n	8001656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	00100002 	.word	0x00100002
 8001768:	ffff0000 	.word	0xffff0000

0800176c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	460b      	mov	r3, r1
 800177a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b08      	cmp	r3, #8
 8001786:	d006      	beq.n	8001796 <I2C_MasterRequestWrite+0x2a>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d003      	beq.n	8001796 <I2C_MasterRequestWrite+0x2a>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001794:	d108      	bne.n	80017a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e00b      	b.n	80017c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d107      	bne.n	80017c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f84f 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00d      	beq.n	80017f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e6:	d103      	bne.n	80017f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e035      	b.n	8001860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017fc:	d108      	bne.n	8001810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017fe:	897b      	ldrh	r3, [r7, #10]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	e01b      	b.n	8001848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001810:	897b      	ldrh	r3, [r7, #10]
 8001812:	11db      	asrs	r3, r3, #7
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 0306 	and.w	r3, r3, #6
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f063 030f 	orn	r3, r3, #15
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <I2C_MasterRequestWrite+0xfc>)
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f875 	bl	800191e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e010      	b.n	8001860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4907      	ldr	r1, [pc, #28]	; (800186c <I2C_MasterRequestWrite+0x100>)
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f865 	bl	800191e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	00010008 	.word	0x00010008
 800186c:	00010002 	.word	0x00010002

08001870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	4613      	mov	r3, r2
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001880:	e025      	b.n	80018ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d021      	beq.n	80018ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188a:	f7ff fa0d 	bl	8000ca8 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d302      	bcc.n	80018a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d116      	bne.n	80018ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f043 0220 	orr.w	r2, r3, #32
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e023      	b.n	8001916 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10d      	bne.n	80018f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4013      	ands	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	e00c      	b.n	800190e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4013      	ands	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	429a      	cmp	r2, r3
 8001912:	d0b6      	beq.n	8001882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800192c:	e051      	b.n	80019d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193c:	d123      	bne.n	8001986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f043 0204 	orr.w	r2, r3, #4
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e046      	b.n	8001a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d021      	beq.n	80019d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7ff f98b 	bl	8000ca8 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d302      	bcc.n	80019a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d116      	bne.n	80019d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2220      	movs	r2, #32
 80019ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f043 0220 	orr.w	r2, r3, #32
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e020      	b.n	8001a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d10c      	bne.n	80019f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4013      	ands	r3, r2
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	e00b      	b.n	8001a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	43da      	mvns	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	4013      	ands	r3, r2
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf14      	ite	ne
 8001a08:	2301      	movne	r3, #1
 8001a0a:	2300      	moveq	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d18d      	bne.n	800192e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a28:	e02d      	b.n	8001a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f878 	bl	8001b20 <I2C_IsAcknowledgeFailed>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e02d      	b.n	8001a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d021      	beq.n	8001a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a42:	f7ff f931 	bl	8000ca8 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d302      	bcc.n	8001a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d116      	bne.n	8001a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f043 0220 	orr.w	r2, r3, #32
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e007      	b.n	8001a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a90:	2b80      	cmp	r3, #128	; 0x80
 8001a92:	d1ca      	bne.n	8001a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001aaa:	e02d      	b.n	8001b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f837 	bl	8001b20 <I2C_IsAcknowledgeFailed>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e02d      	b.n	8001b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac2:	d021      	beq.n	8001b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac4:	f7ff f8f0 	bl	8000ca8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d302      	bcc.n	8001ada <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f043 0220 	orr.w	r2, r3, #32
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e007      	b.n	8001b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d1ca      	bne.n	8001aac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b36:	d11b      	bne.n	8001b70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f043 0204 	orr.w	r2, r3, #4
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e26c      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8087 	beq.w	8001caa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b9c:	4b92      	ldr	r3, [pc, #584]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba8:	4b8f      	ldr	r3, [pc, #572]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d112      	bne.n	8001bda <HAL_RCC_OscConfig+0x5e>
 8001bb4:	4b8c      	ldr	r3, [pc, #560]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc0:	d10b      	bne.n	8001bda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc2:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d06c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x12c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d168      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e246      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x76>
 8001be4:	4b80      	ldr	r3, [pc, #512]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a7f      	ldr	r2, [pc, #508]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e02e      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x98>
 8001bfa:	4b7b      	ldr	r3, [pc, #492]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a7a      	ldr	r2, [pc, #488]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a77      	ldr	r2, [pc, #476]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01d      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0xbc>
 8001c1e:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a71      	ldr	r2, [pc, #452]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6e      	ldr	r2, [pc, #440]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0xd4>
 8001c38:	4b6b      	ldr	r3, [pc, #428]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a6a      	ldr	r2, [pc, #424]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b68      	ldr	r3, [pc, #416]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a67      	ldr	r2, [pc, #412]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f826 	bl	8000ca8 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff f822 	bl	8000ca8 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e1fa      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b5d      	ldr	r3, [pc, #372]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xe4>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff f812 	bl	8000ca8 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff f80e 	bl	8000ca8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1e6      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x10c>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb6:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d11c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x18c>
 8001cce:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x176>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e1ba      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4939      	ldr	r1, [pc, #228]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e03a      	b.n	8001d7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7fe ffc7 	bl	8000ca8 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7fe ffc3 	bl	8000ca8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e19b      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4927      	ldr	r1, [pc, #156]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <HAL_RCC_OscConfig+0x270>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7fe ffa6 	bl	8000ca8 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d60:	f7fe ffa2 	bl	8000ca8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e17a      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d03a      	beq.n	8001e00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d019      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_RCC_OscConfig+0x274>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7fe ff86 	bl	8000ca8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da0:	f7fe ff82 	bl	8000ca8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e15a      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 fada 	bl	8002378 <RCC_Delay>
 8001dc4:	e01c      	b.n	8001e00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dcc:	f7fe ff6c 	bl	8000ca8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd2:	e00f      	b.n	8001df4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7fe ff68 	bl	8000ca8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d908      	bls.n	8001df4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e140      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	42420000 	.word	0x42420000
 8001df0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df4:	4b9e      	ldr	r3, [pc, #632]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1e9      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80a6 	beq.w	8001f5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b97      	ldr	r3, [pc, #604]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10d      	bne.n	8001e3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b94      	ldr	r3, [pc, #592]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4a93      	ldr	r2, [pc, #588]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	61d3      	str	r3, [r2, #28]
 8001e2a:	4b91      	ldr	r3, [pc, #580]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e36:	2301      	movs	r3, #1
 8001e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3a:	4b8e      	ldr	r3, [pc, #568]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d118      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e46:	4b8b      	ldr	r3, [pc, #556]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a8a      	ldr	r2, [pc, #552]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e52:	f7fe ff29 	bl	8000ca8 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5a:	f7fe ff25 	bl	8000ca8 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b64      	cmp	r3, #100	; 0x64
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0fd      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d106      	bne.n	8001e8e <HAL_RCC_OscConfig+0x312>
 8001e80:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a7a      	ldr	r2, [pc, #488]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6213      	str	r3, [r2, #32]
 8001e8c:	e02d      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x334>
 8001e96:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a75      	ldr	r2, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b73      	ldr	r3, [pc, #460]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a72      	ldr	r2, [pc, #456]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	6213      	str	r3, [r2, #32]
 8001eae:	e01c      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d10c      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x356>
 8001eb8:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a6c      	ldr	r2, [pc, #432]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a69      	ldr	r2, [pc, #420]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	e00b      	b.n	8001eea <HAL_RCC_OscConfig+0x36e>
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a66      	ldr	r2, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6213      	str	r3, [r2, #32]
 8001ede:	4b64      	ldr	r3, [pc, #400]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a63      	ldr	r2, [pc, #396]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d015      	beq.n	8001f1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fed9 	bl	8000ca8 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe fed5 	bl	8000ca8 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0ab      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	4b57      	ldr	r3, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ee      	beq.n	8001efa <HAL_RCC_OscConfig+0x37e>
 8001f1c:	e014      	b.n	8001f48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe fec3 	bl	8000ca8 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe febf 	bl	8000ca8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e095      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	4b4c      	ldr	r3, [pc, #304]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ee      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	4b48      	ldr	r3, [pc, #288]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4a47      	ldr	r2, [pc, #284]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8081 	beq.w	8002066 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f64:	4b42      	ldr	r3, [pc, #264]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d061      	beq.n	8002034 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d146      	bne.n	8002006 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_RCC_OscConfig+0x4fc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7fe fe93 	bl	8000ca8 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f86:	f7fe fe8f 	bl	8000ca8 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e067      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d108      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	492d      	ldr	r1, [pc, #180]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a19      	ldr	r1, [r3, #32]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	4927      	ldr	r1, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x4fc>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7fe fe63 	bl	8000ca8 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe fe5f 	bl	8000ca8 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e037      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x46a>
 8002004:	e02f      	b.n	8002066 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_RCC_OscConfig+0x4fc>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fe4c 	bl	8000ca8 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe fe48 	bl	8000ca8 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e020      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x498>
 8002032:	e018      	b.n	8002066 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e013      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	429a      	cmp	r2, r3
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
 8002078:	42420060 	.word	0x42420060

0800207c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d0      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4965      	ldr	r1, [pc, #404]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0b8      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a58      	ldr	r2, [pc, #352]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a52      	ldr	r2, [pc, #328]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	494d      	ldr	r1, [pc, #308]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d040      	beq.n	800219c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e07f      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e073      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06b      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4936      	ldr	r1, [pc, #216]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7fe fd9c 	bl	8000ca8 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7fe fd98 	bl	8000ca8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e053      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d210      	bcs.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4922      	ldr	r1, [pc, #136]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e032      	b.n	8002232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4916      	ldr	r1, [pc, #88]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800220a:	f000 f821 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 800220e:	4601      	mov	r1, r0
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
 800221e:	fa21 f303 	lsr.w	r3, r1, r3
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x1cc>)
 8002224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x1d0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fcfa 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000
 8002240:	40021000 	.word	0x40021000
 8002244:	0800368c 	.word	0x0800368c
 8002248:	20000000 	.word	0x20000000
 800224c:	20000004 	.word	0x20000004

08002250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002250:	b490      	push	{r4, r7}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002256:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002258:	1d3c      	adds	r4, r7, #4
 800225a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800225c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800227a:	4b23      	ldr	r3, [pc, #140]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x40>
 800228a:	2b08      	cmp	r3, #8
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x46>
 800228e:	e02d      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002292:	623b      	str	r3, [r7, #32]
      break;
 8002294:	e02d      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	0c9b      	lsrs	r3, r3, #18
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022a2:	4413      	add	r3, r2
 80022a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0c5b      	lsrs	r3, r3, #17
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022c2:	4413      	add	r3, r2
 80022c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4a0f      	ldr	r2, [pc, #60]	; (800230c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022ce:	fb02 f203 	mul.w	r2, r2, r3
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	e004      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	623b      	str	r3, [r7, #32]
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022ee:	623b      	str	r3, [r7, #32]
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc90      	pop	{r4, r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	08003678 	.word	0x08003678
 8002304:	08003688 	.word	0x08003688
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	003d0900 	.word	0x003d0900

08002314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b02      	ldr	r3, [pc, #8]	; (8002324 <HAL_RCC_GetHCLKFreq+0x10>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	20000000 	.word	0x20000000

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800232c:	f7ff fff2 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002330:	4601      	mov	r1, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	0800369c 	.word	0x0800369c

08002350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002354:	f7ff ffde 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002358:	4601      	mov	r1, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	0adb      	lsrs	r3, r3, #11
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4a03      	ldr	r2, [pc, #12]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	0800369c 	.word	0x0800369c

08002378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <RCC_Delay+0x34>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <RCC_Delay+0x38>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0a5b      	lsrs	r3, r3, #9
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002394:	bf00      	nop
  }
  while (Delay --);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	60fa      	str	r2, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f9      	bne.n	8002394 <RCC_Delay+0x1c>
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000
 80023b0:	10624dd3 	.word	0x10624dd3

080023b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e03f      	b.n	8002446 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe fae0 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2224      	movs	r2, #36	; 0x24
 80023e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fbd7 	bl	8002bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800240c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800241c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800242c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b08a      	sub	sp, #40	; 0x28
 8002452:	af02      	add	r7, sp, #8
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4613      	mov	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	d17c      	bne.n	8002568 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_UART_Transmit+0x2c>
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e075      	b.n	800256a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_UART_Transmit+0x3e>
 8002488:	2302      	movs	r3, #2
 800248a:	e06e      	b.n	800256a <HAL_UART_Transmit+0x11c>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2221      	movs	r2, #33	; 0x21
 800249e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024a2:	f7fe fc01 	bl	8000ca8 <HAL_GetTick>
 80024a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	88fa      	ldrh	r2, [r7, #6]
 80024ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	88fa      	ldrh	r2, [r7, #6]
 80024b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024bc:	d108      	bne.n	80024d0 <HAL_UART_Transmit+0x82>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d104      	bne.n	80024d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	e003      	b.n	80024d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80024e0:	e02a      	b.n	8002538 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f9fa 	bl	80028e6 <UART_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e036      	b.n	800256a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10b      	bne.n	800251a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002510:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	3302      	adds	r3, #2
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	e007      	b.n	800252a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3301      	adds	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1cf      	bne.n	80024e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2200      	movs	r2, #0
 800254a:	2140      	movs	r1, #64	; 0x40
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f9ca 	bl	80028e6 <UART_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e006      	b.n	800256a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	e000      	b.n	800256a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002568:	2302      	movs	r3, #2
  }
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b08a      	sub	sp, #40	; 0x28
 8002576:	af02      	add	r7, sp, #8
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4613      	mov	r3, r2
 8002580:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b20      	cmp	r3, #32
 8002590:	f040 8089 	bne.w	80026a6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_UART_Receive+0x2e>
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e081      	b.n	80026a8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Receive+0x40>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e07a      	b.n	80026a8 <HAL_UART_Receive+0x136>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2222      	movs	r2, #34	; 0x22
 80025c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025c8:	f7fe fb6e 	bl	8000ca8 <HAL_GetTick>
 80025cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	88fa      	ldrh	r2, [r7, #6]
 80025d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	d108      	bne.n	80025f6 <HAL_UART_Receive+0x84>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d104      	bne.n	80025f6 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e003      	b.n	80025fe <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002606:	e043      	b.n	8002690 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2200      	movs	r2, #0
 8002610:	2120      	movs	r1, #32
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f967 	bl	80028e6 <UART_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e042      	b.n	80026a8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10c      	bne.n	8002642 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	b29b      	uxth	r3, r3
 8002630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002634:	b29a      	uxth	r2, r3
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	3302      	adds	r3, #2
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	e01f      	b.n	8002682 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264a:	d007      	beq.n	800265c <HAL_UART_Receive+0xea>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <HAL_UART_Receive+0xf8>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e008      	b.n	800267c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002676:	b2da      	uxtb	r2, r3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	3301      	adds	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1b6      	bne.n	8002608 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
  }
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_UART_IRQHandler+0x52>
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f9d5 	bl	8002aaa <UART_Receive_IT>
      return;
 8002700:	e0d1      	b.n	80028a6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80b0 	beq.w	800286a <HAL_UART_IRQHandler+0x1ba>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_UART_IRQHandler+0x70>
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80a5 	beq.w	800286a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_UART_IRQHandler+0x90>
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_UART_IRQHandler+0xb0>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	f043 0202 	orr.w	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_UART_IRQHandler+0xd0>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	f043 0204 	orr.w	r2, r3, #4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00f      	beq.n	80027aa <HAL_UART_IRQHandler+0xfa>
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b00      	cmp	r3, #0
 8002792:	d104      	bne.n	800279e <HAL_UART_IRQHandler+0xee>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	f043 0208 	orr.w	r2, r3, #8
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d078      	beq.n	80028a4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_UART_IRQHandler+0x11c>
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f96f 	bl	8002aaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf14      	ite	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	2300      	moveq	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_UART_IRQHandler+0x144>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d031      	beq.n	8002858 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f8c0 	bl	800297a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d023      	beq.n	8002850 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002816:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002824:	4a21      	ldr	r2, [pc, #132]	; (80028ac <HAL_UART_IRQHandler+0x1fc>)
 8002826:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fb75 	bl	8000f1c <HAL_DMA_Abort_IT>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d016      	beq.n	8002866 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002842:	4610      	mov	r0, r2
 8002844:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002846:	e00e      	b.n	8002866 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f843 	bl	80028d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284e:	e00a      	b.n	8002866 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f83f 	bl	80028d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002856:	e006      	b.n	8002866 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f83b 	bl	80028d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002864:	e01e      	b.n	80028a4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002866:	bf00      	nop
    return;
 8002868:	e01c      	b.n	80028a4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_UART_IRQHandler+0x1d6>
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f8ac 	bl	80029dc <UART_Transmit_IT>
    return;
 8002884:	e00f      	b.n	80028a6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_UART_IRQHandler+0x1f6>
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8ed 	bl	8002a7a <UART_EndTransmit_IT>
    return;
 80028a0:	bf00      	nop
 80028a2:	e000      	b.n	80028a6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80028a4:	bf00      	nop
  }
}
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	080029b5 	.word	0x080029b5

080028b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	4613      	mov	r3, r2
 80028f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f6:	e02c      	b.n	8002952 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fe:	d028      	beq.n	8002952 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <UART_WaitOnFlagUntilTimeout+0x30>
 8002906:	f7fe f9cf 	bl	8000ca8 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	429a      	cmp	r2, r3
 8002914:	d21d      	bcs.n	8002952 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002924:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e00f      	b.n	8002972 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4013      	ands	r3, r2
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	bf0c      	ite	eq
 8002962:	2301      	moveq	r3, #1
 8002964:	2300      	movne	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	429a      	cmp	r2, r3
 800296e:	d0c3      	beq.n	80028f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002990:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff ff80 	bl	80028d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b21      	cmp	r3, #33	; 0x21
 80029ee:	d13e      	bne.n	8002a6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f8:	d114      	bne.n	8002a24 <UART_Transmit_IT+0x48>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d110      	bne.n	8002a24 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	1c9a      	adds	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	621a      	str	r2, [r3, #32]
 8002a22:	e008      	b.n	8002a36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	1c59      	adds	r1, r3, #1
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6211      	str	r1, [r2, #32]
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4619      	mov	r1, r3
 8002a44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff ff08 	bl	80028b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b22      	cmp	r3, #34	; 0x22
 8002abc:	d170      	bne.n	8002ba0 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac6:	d117      	bne.n	8002af8 <UART_Receive_IT+0x4e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d113      	bne.n	8002af8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	1c9a      	adds	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	629a      	str	r2, [r3, #40]	; 0x28
 8002af6:	e026      	b.n	8002b46 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0a:	d007      	beq.n	8002b1c <UART_Receive_IT+0x72>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <UART_Receive_IT+0x80>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d106      	bne.n	8002b2a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e008      	b.n	8002b3c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4619      	mov	r1, r3
 8002b54:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d120      	bne.n	8002b9c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0220 	bic.w	r2, r2, #32
 8002b68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fe95 	bl	80028c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e002      	b.n	8002ba2 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002be6:	f023 030c 	bic.w	r3, r3, #12
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a2c      	ldr	r2, [pc, #176]	; (8002cc0 <UART_SetConfig+0x114>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d103      	bne.n	8002c1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c14:	f7ff fb9c 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	e002      	b.n	8002c22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c1c:	f7ff fb84 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8002c20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009a      	lsls	r2, r3, #2
 8002c2c:	441a      	add	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	4a22      	ldr	r2, [pc, #136]	; (8002cc4 <UART_SetConfig+0x118>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	0119      	lsls	r1, r3, #4
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	009a      	lsls	r2, r3, #2
 8002c4c:	441a      	add	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <UART_SetConfig+0x118>)
 8002c5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2064      	movs	r0, #100	; 0x64
 8002c62:	fb00 f303 	mul.w	r3, r0, r3
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	3332      	adds	r3, #50	; 0x32
 8002c6c:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <UART_SetConfig+0x118>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c78:	4419      	add	r1, r3
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	009a      	lsls	r2, r3, #2
 8002c84:	441a      	add	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <UART_SetConfig+0x118>)
 8002c92:	fba3 0302 	umull	r0, r3, r3, r2
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2064      	movs	r0, #100	; 0x64
 8002c9a:	fb00 f303 	mul.w	r3, r0, r3
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	3332      	adds	r3, #50	; 0x32
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <UART_SetConfig+0x118>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	440a      	add	r2, r1
 8002cb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	51eb851f 	.word	0x51eb851f

08002cc8 <__errno>:
 8002cc8:	4b01      	ldr	r3, [pc, #4]	; (8002cd0 <__errno+0x8>)
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	2000000c 	.word	0x2000000c

08002cd4 <__libc_init_array>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	2500      	movs	r5, #0
 8002cd8:	4e0c      	ldr	r6, [pc, #48]	; (8002d0c <__libc_init_array+0x38>)
 8002cda:	4c0d      	ldr	r4, [pc, #52]	; (8002d10 <__libc_init_array+0x3c>)
 8002cdc:	1ba4      	subs	r4, r4, r6
 8002cde:	10a4      	asrs	r4, r4, #2
 8002ce0:	42a5      	cmp	r5, r4
 8002ce2:	d109      	bne.n	8002cf8 <__libc_init_array+0x24>
 8002ce4:	f000 fc4e 	bl	8003584 <_init>
 8002ce8:	2500      	movs	r5, #0
 8002cea:	4e0a      	ldr	r6, [pc, #40]	; (8002d14 <__libc_init_array+0x40>)
 8002cec:	4c0a      	ldr	r4, [pc, #40]	; (8002d18 <__libc_init_array+0x44>)
 8002cee:	1ba4      	subs	r4, r4, r6
 8002cf0:	10a4      	asrs	r4, r4, #2
 8002cf2:	42a5      	cmp	r5, r4
 8002cf4:	d105      	bne.n	8002d02 <__libc_init_array+0x2e>
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cfc:	4798      	blx	r3
 8002cfe:	3501      	adds	r5, #1
 8002d00:	e7ee      	b.n	8002ce0 <__libc_init_array+0xc>
 8002d02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d06:	4798      	blx	r3
 8002d08:	3501      	adds	r5, #1
 8002d0a:	e7f2      	b.n	8002cf2 <__libc_init_array+0x1e>
 8002d0c:	080036d8 	.word	0x080036d8
 8002d10:	080036d8 	.word	0x080036d8
 8002d14:	080036d8 	.word	0x080036d8
 8002d18:	080036dc 	.word	0x080036dc

08002d1c <memset>:
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4402      	add	r2, r0
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d100      	bne.n	8002d26 <memset+0xa>
 8002d24:	4770      	bx	lr
 8002d26:	f803 1b01 	strb.w	r1, [r3], #1
 8002d2a:	e7f9      	b.n	8002d20 <memset+0x4>

08002d2c <siprintf>:
 8002d2c:	b40e      	push	{r1, r2, r3}
 8002d2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d32:	b500      	push	{lr}
 8002d34:	b09c      	sub	sp, #112	; 0x70
 8002d36:	ab1d      	add	r3, sp, #116	; 0x74
 8002d38:	9002      	str	r0, [sp, #8]
 8002d3a:	9006      	str	r0, [sp, #24]
 8002d3c:	9107      	str	r1, [sp, #28]
 8002d3e:	9104      	str	r1, [sp, #16]
 8002d40:	4808      	ldr	r0, [pc, #32]	; (8002d64 <siprintf+0x38>)
 8002d42:	4909      	ldr	r1, [pc, #36]	; (8002d68 <siprintf+0x3c>)
 8002d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d48:	9105      	str	r1, [sp, #20]
 8002d4a:	6800      	ldr	r0, [r0, #0]
 8002d4c:	a902      	add	r1, sp, #8
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	f000 f880 	bl	8002e54 <_svfiprintf_r>
 8002d54:	2200      	movs	r2, #0
 8002d56:	9b02      	ldr	r3, [sp, #8]
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	b01c      	add	sp, #112	; 0x70
 8002d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d60:	b003      	add	sp, #12
 8002d62:	4770      	bx	lr
 8002d64:	2000000c 	.word	0x2000000c
 8002d68:	ffff0208 	.word	0xffff0208

08002d6c <strstr>:
 8002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6e:	7803      	ldrb	r3, [r0, #0]
 8002d70:	b17b      	cbz	r3, 8002d92 <strstr+0x26>
 8002d72:	4604      	mov	r4, r0
 8002d74:	7823      	ldrb	r3, [r4, #0]
 8002d76:	4620      	mov	r0, r4
 8002d78:	1c66      	adds	r6, r4, #1
 8002d7a:	b17b      	cbz	r3, 8002d9c <strstr+0x30>
 8002d7c:	1e4a      	subs	r2, r1, #1
 8002d7e:	1e63      	subs	r3, r4, #1
 8002d80:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8002d84:	b14d      	cbz	r5, 8002d9a <strstr+0x2e>
 8002d86:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002d8a:	4634      	mov	r4, r6
 8002d8c:	42af      	cmp	r7, r5
 8002d8e:	d0f7      	beq.n	8002d80 <strstr+0x14>
 8002d90:	e7f0      	b.n	8002d74 <strstr+0x8>
 8002d92:	780b      	ldrb	r3, [r1, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf18      	it	ne
 8002d98:	2000      	movne	r0, #0
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	e7fc      	b.n	8002d9a <strstr+0x2e>

08002da0 <__ssputs_r>:
 8002da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002da4:	688e      	ldr	r6, [r1, #8]
 8002da6:	4682      	mov	sl, r0
 8002da8:	429e      	cmp	r6, r3
 8002daa:	460c      	mov	r4, r1
 8002dac:	4690      	mov	r8, r2
 8002dae:	4699      	mov	r9, r3
 8002db0:	d837      	bhi.n	8002e22 <__ssputs_r+0x82>
 8002db2:	898a      	ldrh	r2, [r1, #12]
 8002db4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002db8:	d031      	beq.n	8002e1e <__ssputs_r+0x7e>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	6825      	ldr	r5, [r4, #0]
 8002dbe:	6909      	ldr	r1, [r1, #16]
 8002dc0:	1a6f      	subs	r7, r5, r1
 8002dc2:	6965      	ldr	r5, [r4, #20]
 8002dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dc8:	fb95 f5f3 	sdiv	r5, r5, r3
 8002dcc:	f109 0301 	add.w	r3, r9, #1
 8002dd0:	443b      	add	r3, r7
 8002dd2:	429d      	cmp	r5, r3
 8002dd4:	bf38      	it	cc
 8002dd6:	461d      	movcc	r5, r3
 8002dd8:	0553      	lsls	r3, r2, #21
 8002dda:	d530      	bpl.n	8002e3e <__ssputs_r+0x9e>
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f000 fb37 	bl	8003450 <_malloc_r>
 8002de2:	4606      	mov	r6, r0
 8002de4:	b950      	cbnz	r0, 8002dfc <__ssputs_r+0x5c>
 8002de6:	230c      	movs	r3, #12
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f8ca 3000 	str.w	r3, [sl]
 8002df0:	89a3      	ldrh	r3, [r4, #12]
 8002df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df6:	81a3      	strh	r3, [r4, #12]
 8002df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dfc:	463a      	mov	r2, r7
 8002dfe:	6921      	ldr	r1, [r4, #16]
 8002e00:	f000 fab6 	bl	8003370 <memcpy>
 8002e04:	89a3      	ldrh	r3, [r4, #12]
 8002e06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0e:	81a3      	strh	r3, [r4, #12]
 8002e10:	6126      	str	r6, [r4, #16]
 8002e12:	443e      	add	r6, r7
 8002e14:	6026      	str	r6, [r4, #0]
 8002e16:	464e      	mov	r6, r9
 8002e18:	6165      	str	r5, [r4, #20]
 8002e1a:	1bed      	subs	r5, r5, r7
 8002e1c:	60a5      	str	r5, [r4, #8]
 8002e1e:	454e      	cmp	r6, r9
 8002e20:	d900      	bls.n	8002e24 <__ssputs_r+0x84>
 8002e22:	464e      	mov	r6, r9
 8002e24:	4632      	mov	r2, r6
 8002e26:	4641      	mov	r1, r8
 8002e28:	6820      	ldr	r0, [r4, #0]
 8002e2a:	f000 faac 	bl	8003386 <memmove>
 8002e2e:	68a3      	ldr	r3, [r4, #8]
 8002e30:	2000      	movs	r0, #0
 8002e32:	1b9b      	subs	r3, r3, r6
 8002e34:	60a3      	str	r3, [r4, #8]
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	441e      	add	r6, r3
 8002e3a:	6026      	str	r6, [r4, #0]
 8002e3c:	e7dc      	b.n	8002df8 <__ssputs_r+0x58>
 8002e3e:	462a      	mov	r2, r5
 8002e40:	f000 fb60 	bl	8003504 <_realloc_r>
 8002e44:	4606      	mov	r6, r0
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d1e2      	bne.n	8002e10 <__ssputs_r+0x70>
 8002e4a:	6921      	ldr	r1, [r4, #16]
 8002e4c:	4650      	mov	r0, sl
 8002e4e:	f000 fab3 	bl	80033b8 <_free_r>
 8002e52:	e7c8      	b.n	8002de6 <__ssputs_r+0x46>

08002e54 <_svfiprintf_r>:
 8002e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e58:	461d      	mov	r5, r3
 8002e5a:	898b      	ldrh	r3, [r1, #12]
 8002e5c:	b09d      	sub	sp, #116	; 0x74
 8002e5e:	061f      	lsls	r7, r3, #24
 8002e60:	4680      	mov	r8, r0
 8002e62:	460c      	mov	r4, r1
 8002e64:	4616      	mov	r6, r2
 8002e66:	d50f      	bpl.n	8002e88 <_svfiprintf_r+0x34>
 8002e68:	690b      	ldr	r3, [r1, #16]
 8002e6a:	b96b      	cbnz	r3, 8002e88 <_svfiprintf_r+0x34>
 8002e6c:	2140      	movs	r1, #64	; 0x40
 8002e6e:	f000 faef 	bl	8003450 <_malloc_r>
 8002e72:	6020      	str	r0, [r4, #0]
 8002e74:	6120      	str	r0, [r4, #16]
 8002e76:	b928      	cbnz	r0, 8002e84 <_svfiprintf_r+0x30>
 8002e78:	230c      	movs	r3, #12
 8002e7a:	f8c8 3000 	str.w	r3, [r8]
 8002e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e82:	e0c8      	b.n	8003016 <_svfiprintf_r+0x1c2>
 8002e84:	2340      	movs	r3, #64	; 0x40
 8002e86:	6163      	str	r3, [r4, #20]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e92:	2330      	movs	r3, #48	; 0x30
 8002e94:	f04f 0b01 	mov.w	fp, #1
 8002e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e9c:	9503      	str	r5, [sp, #12]
 8002e9e:	4637      	mov	r7, r6
 8002ea0:	463d      	mov	r5, r7
 8002ea2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ea6:	b10b      	cbz	r3, 8002eac <_svfiprintf_r+0x58>
 8002ea8:	2b25      	cmp	r3, #37	; 0x25
 8002eaa:	d13e      	bne.n	8002f2a <_svfiprintf_r+0xd6>
 8002eac:	ebb7 0a06 	subs.w	sl, r7, r6
 8002eb0:	d00b      	beq.n	8002eca <_svfiprintf_r+0x76>
 8002eb2:	4653      	mov	r3, sl
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	4640      	mov	r0, r8
 8002eba:	f7ff ff71 	bl	8002da0 <__ssputs_r>
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	f000 80a4 	beq.w	800300c <_svfiprintf_r+0x1b8>
 8002ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ec6:	4453      	add	r3, sl
 8002ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eca:	783b      	ldrb	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 809d 	beq.w	800300c <_svfiprintf_r+0x1b8>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002edc:	9304      	str	r3, [sp, #16]
 8002ede:	9307      	str	r3, [sp, #28]
 8002ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8002ee6:	462f      	mov	r7, r5
 8002ee8:	2205      	movs	r2, #5
 8002eea:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002eee:	4850      	ldr	r0, [pc, #320]	; (8003030 <_svfiprintf_r+0x1dc>)
 8002ef0:	f000 fa30 	bl	8003354 <memchr>
 8002ef4:	9b04      	ldr	r3, [sp, #16]
 8002ef6:	b9d0      	cbnz	r0, 8002f2e <_svfiprintf_r+0xda>
 8002ef8:	06d9      	lsls	r1, r3, #27
 8002efa:	bf44      	itt	mi
 8002efc:	2220      	movmi	r2, #32
 8002efe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f02:	071a      	lsls	r2, r3, #28
 8002f04:	bf44      	itt	mi
 8002f06:	222b      	movmi	r2, #43	; 0x2b
 8002f08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f0c:	782a      	ldrb	r2, [r5, #0]
 8002f0e:	2a2a      	cmp	r2, #42	; 0x2a
 8002f10:	d015      	beq.n	8002f3e <_svfiprintf_r+0xea>
 8002f12:	462f      	mov	r7, r5
 8002f14:	2000      	movs	r0, #0
 8002f16:	250a      	movs	r5, #10
 8002f18:	9a07      	ldr	r2, [sp, #28]
 8002f1a:	4639      	mov	r1, r7
 8002f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f20:	3b30      	subs	r3, #48	; 0x30
 8002f22:	2b09      	cmp	r3, #9
 8002f24:	d94d      	bls.n	8002fc2 <_svfiprintf_r+0x16e>
 8002f26:	b1b8      	cbz	r0, 8002f58 <_svfiprintf_r+0x104>
 8002f28:	e00f      	b.n	8002f4a <_svfiprintf_r+0xf6>
 8002f2a:	462f      	mov	r7, r5
 8002f2c:	e7b8      	b.n	8002ea0 <_svfiprintf_r+0x4c>
 8002f2e:	4a40      	ldr	r2, [pc, #256]	; (8003030 <_svfiprintf_r+0x1dc>)
 8002f30:	463d      	mov	r5, r7
 8002f32:	1a80      	subs	r0, r0, r2
 8002f34:	fa0b f000 	lsl.w	r0, fp, r0
 8002f38:	4318      	orrs	r0, r3
 8002f3a:	9004      	str	r0, [sp, #16]
 8002f3c:	e7d3      	b.n	8002ee6 <_svfiprintf_r+0x92>
 8002f3e:	9a03      	ldr	r2, [sp, #12]
 8002f40:	1d11      	adds	r1, r2, #4
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	9103      	str	r1, [sp, #12]
 8002f46:	2a00      	cmp	r2, #0
 8002f48:	db01      	blt.n	8002f4e <_svfiprintf_r+0xfa>
 8002f4a:	9207      	str	r2, [sp, #28]
 8002f4c:	e004      	b.n	8002f58 <_svfiprintf_r+0x104>
 8002f4e:	4252      	negs	r2, r2
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	9207      	str	r2, [sp, #28]
 8002f56:	9304      	str	r3, [sp, #16]
 8002f58:	783b      	ldrb	r3, [r7, #0]
 8002f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f5c:	d10c      	bne.n	8002f78 <_svfiprintf_r+0x124>
 8002f5e:	787b      	ldrb	r3, [r7, #1]
 8002f60:	2b2a      	cmp	r3, #42	; 0x2a
 8002f62:	d133      	bne.n	8002fcc <_svfiprintf_r+0x178>
 8002f64:	9b03      	ldr	r3, [sp, #12]
 8002f66:	3702      	adds	r7, #2
 8002f68:	1d1a      	adds	r2, r3, #4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	9203      	str	r2, [sp, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bfb8      	it	lt
 8002f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f76:	9305      	str	r3, [sp, #20]
 8002f78:	4d2e      	ldr	r5, [pc, #184]	; (8003034 <_svfiprintf_r+0x1e0>)
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	7839      	ldrb	r1, [r7, #0]
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f000 f9e8 	bl	8003354 <memchr>
 8002f84:	b138      	cbz	r0, 8002f96 <_svfiprintf_r+0x142>
 8002f86:	2340      	movs	r3, #64	; 0x40
 8002f88:	1b40      	subs	r0, r0, r5
 8002f8a:	fa03 f000 	lsl.w	r0, r3, r0
 8002f8e:	9b04      	ldr	r3, [sp, #16]
 8002f90:	3701      	adds	r7, #1
 8002f92:	4303      	orrs	r3, r0
 8002f94:	9304      	str	r3, [sp, #16]
 8002f96:	7839      	ldrb	r1, [r7, #0]
 8002f98:	2206      	movs	r2, #6
 8002f9a:	4827      	ldr	r0, [pc, #156]	; (8003038 <_svfiprintf_r+0x1e4>)
 8002f9c:	1c7e      	adds	r6, r7, #1
 8002f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fa2:	f000 f9d7 	bl	8003354 <memchr>
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d038      	beq.n	800301c <_svfiprintf_r+0x1c8>
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <_svfiprintf_r+0x1e8>)
 8002fac:	bb13      	cbnz	r3, 8002ff4 <_svfiprintf_r+0x1a0>
 8002fae:	9b03      	ldr	r3, [sp, #12]
 8002fb0:	3307      	adds	r3, #7
 8002fb2:	f023 0307 	bic.w	r3, r3, #7
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	9303      	str	r3, [sp, #12]
 8002fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fbc:	444b      	add	r3, r9
 8002fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8002fc0:	e76d      	b.n	8002e9e <_svfiprintf_r+0x4a>
 8002fc2:	fb05 3202 	mla	r2, r5, r2, r3
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	460f      	mov	r7, r1
 8002fca:	e7a6      	b.n	8002f1a <_svfiprintf_r+0xc6>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	250a      	movs	r5, #10
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	3701      	adds	r7, #1
 8002fd4:	9305      	str	r3, [sp, #20]
 8002fd6:	4638      	mov	r0, r7
 8002fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fdc:	3a30      	subs	r2, #48	; 0x30
 8002fde:	2a09      	cmp	r2, #9
 8002fe0:	d903      	bls.n	8002fea <_svfiprintf_r+0x196>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0c8      	beq.n	8002f78 <_svfiprintf_r+0x124>
 8002fe6:	9105      	str	r1, [sp, #20]
 8002fe8:	e7c6      	b.n	8002f78 <_svfiprintf_r+0x124>
 8002fea:	fb05 2101 	mla	r1, r5, r1, r2
 8002fee:	2301      	movs	r3, #1
 8002ff0:	4607      	mov	r7, r0
 8002ff2:	e7f0      	b.n	8002fd6 <_svfiprintf_r+0x182>
 8002ff4:	ab03      	add	r3, sp, #12
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	4622      	mov	r2, r4
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <_svfiprintf_r+0x1ec>)
 8002ffc:	a904      	add	r1, sp, #16
 8002ffe:	4640      	mov	r0, r8
 8003000:	f3af 8000 	nop.w
 8003004:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003008:	4681      	mov	r9, r0
 800300a:	d1d6      	bne.n	8002fba <_svfiprintf_r+0x166>
 800300c:	89a3      	ldrh	r3, [r4, #12]
 800300e:	065b      	lsls	r3, r3, #25
 8003010:	f53f af35 	bmi.w	8002e7e <_svfiprintf_r+0x2a>
 8003014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003016:	b01d      	add	sp, #116	; 0x74
 8003018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800301c:	ab03      	add	r3, sp, #12
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4622      	mov	r2, r4
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <_svfiprintf_r+0x1ec>)
 8003024:	a904      	add	r1, sp, #16
 8003026:	4640      	mov	r0, r8
 8003028:	f000 f882 	bl	8003130 <_printf_i>
 800302c:	e7ea      	b.n	8003004 <_svfiprintf_r+0x1b0>
 800302e:	bf00      	nop
 8003030:	080036a4 	.word	0x080036a4
 8003034:	080036aa 	.word	0x080036aa
 8003038:	080036ae 	.word	0x080036ae
 800303c:	00000000 	.word	0x00000000
 8003040:	08002da1 	.word	0x08002da1

08003044 <_printf_common>:
 8003044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003048:	4691      	mov	r9, r2
 800304a:	461f      	mov	r7, r3
 800304c:	688a      	ldr	r2, [r1, #8]
 800304e:	690b      	ldr	r3, [r1, #16]
 8003050:	4606      	mov	r6, r0
 8003052:	4293      	cmp	r3, r2
 8003054:	bfb8      	it	lt
 8003056:	4613      	movlt	r3, r2
 8003058:	f8c9 3000 	str.w	r3, [r9]
 800305c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003060:	460c      	mov	r4, r1
 8003062:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003066:	b112      	cbz	r2, 800306e <_printf_common+0x2a>
 8003068:	3301      	adds	r3, #1
 800306a:	f8c9 3000 	str.w	r3, [r9]
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	0699      	lsls	r1, r3, #26
 8003072:	bf42      	ittt	mi
 8003074:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003078:	3302      	addmi	r3, #2
 800307a:	f8c9 3000 	strmi.w	r3, [r9]
 800307e:	6825      	ldr	r5, [r4, #0]
 8003080:	f015 0506 	ands.w	r5, r5, #6
 8003084:	d107      	bne.n	8003096 <_printf_common+0x52>
 8003086:	f104 0a19 	add.w	sl, r4, #25
 800308a:	68e3      	ldr	r3, [r4, #12]
 800308c:	f8d9 2000 	ldr.w	r2, [r9]
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	42ab      	cmp	r3, r5
 8003094:	dc29      	bgt.n	80030ea <_printf_common+0xa6>
 8003096:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800309a:	6822      	ldr	r2, [r4, #0]
 800309c:	3300      	adds	r3, #0
 800309e:	bf18      	it	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	0692      	lsls	r2, r2, #26
 80030a4:	d42e      	bmi.n	8003104 <_printf_common+0xc0>
 80030a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030aa:	4639      	mov	r1, r7
 80030ac:	4630      	mov	r0, r6
 80030ae:	47c0      	blx	r8
 80030b0:	3001      	adds	r0, #1
 80030b2:	d021      	beq.n	80030f8 <_printf_common+0xb4>
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	68e5      	ldr	r5, [r4, #12]
 80030b8:	f003 0306 	and.w	r3, r3, #6
 80030bc:	2b04      	cmp	r3, #4
 80030be:	bf18      	it	ne
 80030c0:	2500      	movne	r5, #0
 80030c2:	f8d9 2000 	ldr.w	r2, [r9]
 80030c6:	f04f 0900 	mov.w	r9, #0
 80030ca:	bf08      	it	eq
 80030cc:	1aad      	subeq	r5, r5, r2
 80030ce:	68a3      	ldr	r3, [r4, #8]
 80030d0:	6922      	ldr	r2, [r4, #16]
 80030d2:	bf08      	it	eq
 80030d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030d8:	4293      	cmp	r3, r2
 80030da:	bfc4      	itt	gt
 80030dc:	1a9b      	subgt	r3, r3, r2
 80030de:	18ed      	addgt	r5, r5, r3
 80030e0:	341a      	adds	r4, #26
 80030e2:	454d      	cmp	r5, r9
 80030e4:	d11a      	bne.n	800311c <_printf_common+0xd8>
 80030e6:	2000      	movs	r0, #0
 80030e8:	e008      	b.n	80030fc <_printf_common+0xb8>
 80030ea:	2301      	movs	r3, #1
 80030ec:	4652      	mov	r2, sl
 80030ee:	4639      	mov	r1, r7
 80030f0:	4630      	mov	r0, r6
 80030f2:	47c0      	blx	r8
 80030f4:	3001      	adds	r0, #1
 80030f6:	d103      	bne.n	8003100 <_printf_common+0xbc>
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003100:	3501      	adds	r5, #1
 8003102:	e7c2      	b.n	800308a <_printf_common+0x46>
 8003104:	2030      	movs	r0, #48	; 0x30
 8003106:	18e1      	adds	r1, r4, r3
 8003108:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003112:	4422      	add	r2, r4
 8003114:	3302      	adds	r3, #2
 8003116:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800311a:	e7c4      	b.n	80030a6 <_printf_common+0x62>
 800311c:	2301      	movs	r3, #1
 800311e:	4622      	mov	r2, r4
 8003120:	4639      	mov	r1, r7
 8003122:	4630      	mov	r0, r6
 8003124:	47c0      	blx	r8
 8003126:	3001      	adds	r0, #1
 8003128:	d0e6      	beq.n	80030f8 <_printf_common+0xb4>
 800312a:	f109 0901 	add.w	r9, r9, #1
 800312e:	e7d8      	b.n	80030e2 <_printf_common+0x9e>

08003130 <_printf_i>:
 8003130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003134:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003138:	460c      	mov	r4, r1
 800313a:	7e09      	ldrb	r1, [r1, #24]
 800313c:	b085      	sub	sp, #20
 800313e:	296e      	cmp	r1, #110	; 0x6e
 8003140:	4617      	mov	r7, r2
 8003142:	4606      	mov	r6, r0
 8003144:	4698      	mov	r8, r3
 8003146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003148:	f000 80b3 	beq.w	80032b2 <_printf_i+0x182>
 800314c:	d822      	bhi.n	8003194 <_printf_i+0x64>
 800314e:	2963      	cmp	r1, #99	; 0x63
 8003150:	d036      	beq.n	80031c0 <_printf_i+0x90>
 8003152:	d80a      	bhi.n	800316a <_printf_i+0x3a>
 8003154:	2900      	cmp	r1, #0
 8003156:	f000 80b9 	beq.w	80032cc <_printf_i+0x19c>
 800315a:	2958      	cmp	r1, #88	; 0x58
 800315c:	f000 8083 	beq.w	8003266 <_printf_i+0x136>
 8003160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003164:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003168:	e032      	b.n	80031d0 <_printf_i+0xa0>
 800316a:	2964      	cmp	r1, #100	; 0x64
 800316c:	d001      	beq.n	8003172 <_printf_i+0x42>
 800316e:	2969      	cmp	r1, #105	; 0x69
 8003170:	d1f6      	bne.n	8003160 <_printf_i+0x30>
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	6813      	ldr	r3, [r2, #0]
 8003176:	0605      	lsls	r5, r0, #24
 8003178:	f103 0104 	add.w	r1, r3, #4
 800317c:	d52a      	bpl.n	80031d4 <_printf_i+0xa4>
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6011      	str	r1, [r2, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	da03      	bge.n	800318e <_printf_i+0x5e>
 8003186:	222d      	movs	r2, #45	; 0x2d
 8003188:	425b      	negs	r3, r3
 800318a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800318e:	486f      	ldr	r0, [pc, #444]	; (800334c <_printf_i+0x21c>)
 8003190:	220a      	movs	r2, #10
 8003192:	e039      	b.n	8003208 <_printf_i+0xd8>
 8003194:	2973      	cmp	r1, #115	; 0x73
 8003196:	f000 809d 	beq.w	80032d4 <_printf_i+0x1a4>
 800319a:	d808      	bhi.n	80031ae <_printf_i+0x7e>
 800319c:	296f      	cmp	r1, #111	; 0x6f
 800319e:	d020      	beq.n	80031e2 <_printf_i+0xb2>
 80031a0:	2970      	cmp	r1, #112	; 0x70
 80031a2:	d1dd      	bne.n	8003160 <_printf_i+0x30>
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	f043 0320 	orr.w	r3, r3, #32
 80031aa:	6023      	str	r3, [r4, #0]
 80031ac:	e003      	b.n	80031b6 <_printf_i+0x86>
 80031ae:	2975      	cmp	r1, #117	; 0x75
 80031b0:	d017      	beq.n	80031e2 <_printf_i+0xb2>
 80031b2:	2978      	cmp	r1, #120	; 0x78
 80031b4:	d1d4      	bne.n	8003160 <_printf_i+0x30>
 80031b6:	2378      	movs	r3, #120	; 0x78
 80031b8:	4865      	ldr	r0, [pc, #404]	; (8003350 <_printf_i+0x220>)
 80031ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031be:	e055      	b.n	800326c <_printf_i+0x13c>
 80031c0:	6813      	ldr	r3, [r2, #0]
 80031c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031c6:	1d19      	adds	r1, r3, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6011      	str	r1, [r2, #0]
 80031cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031d0:	2301      	movs	r3, #1
 80031d2:	e08c      	b.n	80032ee <_printf_i+0x1be>
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031da:	6011      	str	r1, [r2, #0]
 80031dc:	bf18      	it	ne
 80031de:	b21b      	sxthne	r3, r3
 80031e0:	e7cf      	b.n	8003182 <_printf_i+0x52>
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	6825      	ldr	r5, [r4, #0]
 80031e6:	1d18      	adds	r0, r3, #4
 80031e8:	6010      	str	r0, [r2, #0]
 80031ea:	0628      	lsls	r0, r5, #24
 80031ec:	d501      	bpl.n	80031f2 <_printf_i+0xc2>
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	e002      	b.n	80031f8 <_printf_i+0xc8>
 80031f2:	0668      	lsls	r0, r5, #25
 80031f4:	d5fb      	bpl.n	80031ee <_printf_i+0xbe>
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	296f      	cmp	r1, #111	; 0x6f
 80031fa:	bf14      	ite	ne
 80031fc:	220a      	movne	r2, #10
 80031fe:	2208      	moveq	r2, #8
 8003200:	4852      	ldr	r0, [pc, #328]	; (800334c <_printf_i+0x21c>)
 8003202:	2100      	movs	r1, #0
 8003204:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003208:	6865      	ldr	r5, [r4, #4]
 800320a:	2d00      	cmp	r5, #0
 800320c:	60a5      	str	r5, [r4, #8]
 800320e:	f2c0 8095 	blt.w	800333c <_printf_i+0x20c>
 8003212:	6821      	ldr	r1, [r4, #0]
 8003214:	f021 0104 	bic.w	r1, r1, #4
 8003218:	6021      	str	r1, [r4, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d13d      	bne.n	800329a <_printf_i+0x16a>
 800321e:	2d00      	cmp	r5, #0
 8003220:	f040 808e 	bne.w	8003340 <_printf_i+0x210>
 8003224:	4665      	mov	r5, ip
 8003226:	2a08      	cmp	r2, #8
 8003228:	d10b      	bne.n	8003242 <_printf_i+0x112>
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	07db      	lsls	r3, r3, #31
 800322e:	d508      	bpl.n	8003242 <_printf_i+0x112>
 8003230:	6923      	ldr	r3, [r4, #16]
 8003232:	6862      	ldr	r2, [r4, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	bfde      	ittt	le
 8003238:	2330      	movle	r3, #48	; 0x30
 800323a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800323e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003242:	ebac 0305 	sub.w	r3, ip, r5
 8003246:	6123      	str	r3, [r4, #16]
 8003248:	f8cd 8000 	str.w	r8, [sp]
 800324c:	463b      	mov	r3, r7
 800324e:	aa03      	add	r2, sp, #12
 8003250:	4621      	mov	r1, r4
 8003252:	4630      	mov	r0, r6
 8003254:	f7ff fef6 	bl	8003044 <_printf_common>
 8003258:	3001      	adds	r0, #1
 800325a:	d14d      	bne.n	80032f8 <_printf_i+0x1c8>
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	b005      	add	sp, #20
 8003262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003266:	4839      	ldr	r0, [pc, #228]	; (800334c <_printf_i+0x21c>)
 8003268:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800326c:	6813      	ldr	r3, [r2, #0]
 800326e:	6821      	ldr	r1, [r4, #0]
 8003270:	1d1d      	adds	r5, r3, #4
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6015      	str	r5, [r2, #0]
 8003276:	060a      	lsls	r2, r1, #24
 8003278:	d50b      	bpl.n	8003292 <_printf_i+0x162>
 800327a:	07ca      	lsls	r2, r1, #31
 800327c:	bf44      	itt	mi
 800327e:	f041 0120 	orrmi.w	r1, r1, #32
 8003282:	6021      	strmi	r1, [r4, #0]
 8003284:	b91b      	cbnz	r3, 800328e <_printf_i+0x15e>
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	f022 0220 	bic.w	r2, r2, #32
 800328c:	6022      	str	r2, [r4, #0]
 800328e:	2210      	movs	r2, #16
 8003290:	e7b7      	b.n	8003202 <_printf_i+0xd2>
 8003292:	064d      	lsls	r5, r1, #25
 8003294:	bf48      	it	mi
 8003296:	b29b      	uxthmi	r3, r3
 8003298:	e7ef      	b.n	800327a <_printf_i+0x14a>
 800329a:	4665      	mov	r5, ip
 800329c:	fbb3 f1f2 	udiv	r1, r3, r2
 80032a0:	fb02 3311 	mls	r3, r2, r1, r3
 80032a4:	5cc3      	ldrb	r3, [r0, r3]
 80032a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032aa:	460b      	mov	r3, r1
 80032ac:	2900      	cmp	r1, #0
 80032ae:	d1f5      	bne.n	800329c <_printf_i+0x16c>
 80032b0:	e7b9      	b.n	8003226 <_printf_i+0xf6>
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	6825      	ldr	r5, [r4, #0]
 80032b6:	1d18      	adds	r0, r3, #4
 80032b8:	6961      	ldr	r1, [r4, #20]
 80032ba:	6010      	str	r0, [r2, #0]
 80032bc:	0628      	lsls	r0, r5, #24
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	d501      	bpl.n	80032c6 <_printf_i+0x196>
 80032c2:	6019      	str	r1, [r3, #0]
 80032c4:	e002      	b.n	80032cc <_printf_i+0x19c>
 80032c6:	066a      	lsls	r2, r5, #25
 80032c8:	d5fb      	bpl.n	80032c2 <_printf_i+0x192>
 80032ca:	8019      	strh	r1, [r3, #0]
 80032cc:	2300      	movs	r3, #0
 80032ce:	4665      	mov	r5, ip
 80032d0:	6123      	str	r3, [r4, #16]
 80032d2:	e7b9      	b.n	8003248 <_printf_i+0x118>
 80032d4:	6813      	ldr	r3, [r2, #0]
 80032d6:	1d19      	adds	r1, r3, #4
 80032d8:	6011      	str	r1, [r2, #0]
 80032da:	681d      	ldr	r5, [r3, #0]
 80032dc:	6862      	ldr	r2, [r4, #4]
 80032de:	2100      	movs	r1, #0
 80032e0:	4628      	mov	r0, r5
 80032e2:	f000 f837 	bl	8003354 <memchr>
 80032e6:	b108      	cbz	r0, 80032ec <_printf_i+0x1bc>
 80032e8:	1b40      	subs	r0, r0, r5
 80032ea:	6060      	str	r0, [r4, #4]
 80032ec:	6863      	ldr	r3, [r4, #4]
 80032ee:	6123      	str	r3, [r4, #16]
 80032f0:	2300      	movs	r3, #0
 80032f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032f6:	e7a7      	b.n	8003248 <_printf_i+0x118>
 80032f8:	6923      	ldr	r3, [r4, #16]
 80032fa:	462a      	mov	r2, r5
 80032fc:	4639      	mov	r1, r7
 80032fe:	4630      	mov	r0, r6
 8003300:	47c0      	blx	r8
 8003302:	3001      	adds	r0, #1
 8003304:	d0aa      	beq.n	800325c <_printf_i+0x12c>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	079b      	lsls	r3, r3, #30
 800330a:	d413      	bmi.n	8003334 <_printf_i+0x204>
 800330c:	68e0      	ldr	r0, [r4, #12]
 800330e:	9b03      	ldr	r3, [sp, #12]
 8003310:	4298      	cmp	r0, r3
 8003312:	bfb8      	it	lt
 8003314:	4618      	movlt	r0, r3
 8003316:	e7a3      	b.n	8003260 <_printf_i+0x130>
 8003318:	2301      	movs	r3, #1
 800331a:	464a      	mov	r2, r9
 800331c:	4639      	mov	r1, r7
 800331e:	4630      	mov	r0, r6
 8003320:	47c0      	blx	r8
 8003322:	3001      	adds	r0, #1
 8003324:	d09a      	beq.n	800325c <_printf_i+0x12c>
 8003326:	3501      	adds	r5, #1
 8003328:	68e3      	ldr	r3, [r4, #12]
 800332a:	9a03      	ldr	r2, [sp, #12]
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	42ab      	cmp	r3, r5
 8003330:	dcf2      	bgt.n	8003318 <_printf_i+0x1e8>
 8003332:	e7eb      	b.n	800330c <_printf_i+0x1dc>
 8003334:	2500      	movs	r5, #0
 8003336:	f104 0919 	add.w	r9, r4, #25
 800333a:	e7f5      	b.n	8003328 <_printf_i+0x1f8>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1ac      	bne.n	800329a <_printf_i+0x16a>
 8003340:	7803      	ldrb	r3, [r0, #0]
 8003342:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003346:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800334a:	e76c      	b.n	8003226 <_printf_i+0xf6>
 800334c:	080036b5 	.word	0x080036b5
 8003350:	080036c6 	.word	0x080036c6

08003354 <memchr>:
 8003354:	b510      	push	{r4, lr}
 8003356:	b2c9      	uxtb	r1, r1
 8003358:	4402      	add	r2, r0
 800335a:	4290      	cmp	r0, r2
 800335c:	4603      	mov	r3, r0
 800335e:	d101      	bne.n	8003364 <memchr+0x10>
 8003360:	2300      	movs	r3, #0
 8003362:	e003      	b.n	800336c <memchr+0x18>
 8003364:	781c      	ldrb	r4, [r3, #0]
 8003366:	3001      	adds	r0, #1
 8003368:	428c      	cmp	r4, r1
 800336a:	d1f6      	bne.n	800335a <memchr+0x6>
 800336c:	4618      	mov	r0, r3
 800336e:	bd10      	pop	{r4, pc}

08003370 <memcpy>:
 8003370:	b510      	push	{r4, lr}
 8003372:	1e43      	subs	r3, r0, #1
 8003374:	440a      	add	r2, r1
 8003376:	4291      	cmp	r1, r2
 8003378:	d100      	bne.n	800337c <memcpy+0xc>
 800337a:	bd10      	pop	{r4, pc}
 800337c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003380:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003384:	e7f7      	b.n	8003376 <memcpy+0x6>

08003386 <memmove>:
 8003386:	4288      	cmp	r0, r1
 8003388:	b510      	push	{r4, lr}
 800338a:	eb01 0302 	add.w	r3, r1, r2
 800338e:	d807      	bhi.n	80033a0 <memmove+0x1a>
 8003390:	1e42      	subs	r2, r0, #1
 8003392:	4299      	cmp	r1, r3
 8003394:	d00a      	beq.n	80033ac <memmove+0x26>
 8003396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800339a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800339e:	e7f8      	b.n	8003392 <memmove+0xc>
 80033a0:	4283      	cmp	r3, r0
 80033a2:	d9f5      	bls.n	8003390 <memmove+0xa>
 80033a4:	1881      	adds	r1, r0, r2
 80033a6:	1ad2      	subs	r2, r2, r3
 80033a8:	42d3      	cmn	r3, r2
 80033aa:	d100      	bne.n	80033ae <memmove+0x28>
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80033b6:	e7f7      	b.n	80033a8 <memmove+0x22>

080033b8 <_free_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4605      	mov	r5, r0
 80033bc:	2900      	cmp	r1, #0
 80033be:	d043      	beq.n	8003448 <_free_r+0x90>
 80033c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c4:	1f0c      	subs	r4, r1, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bfb8      	it	lt
 80033ca:	18e4      	addlt	r4, r4, r3
 80033cc:	f000 f8d0 	bl	8003570 <__malloc_lock>
 80033d0:	4a1e      	ldr	r2, [pc, #120]	; (800344c <_free_r+0x94>)
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	4610      	mov	r0, r2
 80033d6:	b933      	cbnz	r3, 80033e6 <_free_r+0x2e>
 80033d8:	6063      	str	r3, [r4, #4]
 80033da:	6014      	str	r4, [r2, #0]
 80033dc:	4628      	mov	r0, r5
 80033de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033e2:	f000 b8c6 	b.w	8003572 <__malloc_unlock>
 80033e6:	42a3      	cmp	r3, r4
 80033e8:	d90b      	bls.n	8003402 <_free_r+0x4a>
 80033ea:	6821      	ldr	r1, [r4, #0]
 80033ec:	1862      	adds	r2, r4, r1
 80033ee:	4293      	cmp	r3, r2
 80033f0:	bf01      	itttt	eq
 80033f2:	681a      	ldreq	r2, [r3, #0]
 80033f4:	685b      	ldreq	r3, [r3, #4]
 80033f6:	1852      	addeq	r2, r2, r1
 80033f8:	6022      	streq	r2, [r4, #0]
 80033fa:	6063      	str	r3, [r4, #4]
 80033fc:	6004      	str	r4, [r0, #0]
 80033fe:	e7ed      	b.n	80033dc <_free_r+0x24>
 8003400:	4613      	mov	r3, r2
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	b10a      	cbz	r2, 800340a <_free_r+0x52>
 8003406:	42a2      	cmp	r2, r4
 8003408:	d9fa      	bls.n	8003400 <_free_r+0x48>
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	1858      	adds	r0, r3, r1
 800340e:	42a0      	cmp	r0, r4
 8003410:	d10b      	bne.n	800342a <_free_r+0x72>
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	4401      	add	r1, r0
 8003416:	1858      	adds	r0, r3, r1
 8003418:	4282      	cmp	r2, r0
 800341a:	6019      	str	r1, [r3, #0]
 800341c:	d1de      	bne.n	80033dc <_free_r+0x24>
 800341e:	6810      	ldr	r0, [r2, #0]
 8003420:	6852      	ldr	r2, [r2, #4]
 8003422:	4401      	add	r1, r0
 8003424:	6019      	str	r1, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	e7d8      	b.n	80033dc <_free_r+0x24>
 800342a:	d902      	bls.n	8003432 <_free_r+0x7a>
 800342c:	230c      	movs	r3, #12
 800342e:	602b      	str	r3, [r5, #0]
 8003430:	e7d4      	b.n	80033dc <_free_r+0x24>
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	1821      	adds	r1, r4, r0
 8003436:	428a      	cmp	r2, r1
 8003438:	bf01      	itttt	eq
 800343a:	6811      	ldreq	r1, [r2, #0]
 800343c:	6852      	ldreq	r2, [r2, #4]
 800343e:	1809      	addeq	r1, r1, r0
 8003440:	6021      	streq	r1, [r4, #0]
 8003442:	6062      	str	r2, [r4, #4]
 8003444:	605c      	str	r4, [r3, #4]
 8003446:	e7c9      	b.n	80033dc <_free_r+0x24>
 8003448:	bd38      	pop	{r3, r4, r5, pc}
 800344a:	bf00      	nop
 800344c:	20000090 	.word	0x20000090

08003450 <_malloc_r>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	1ccd      	adds	r5, r1, #3
 8003454:	f025 0503 	bic.w	r5, r5, #3
 8003458:	3508      	adds	r5, #8
 800345a:	2d0c      	cmp	r5, #12
 800345c:	bf38      	it	cc
 800345e:	250c      	movcc	r5, #12
 8003460:	2d00      	cmp	r5, #0
 8003462:	4606      	mov	r6, r0
 8003464:	db01      	blt.n	800346a <_malloc_r+0x1a>
 8003466:	42a9      	cmp	r1, r5
 8003468:	d903      	bls.n	8003472 <_malloc_r+0x22>
 800346a:	230c      	movs	r3, #12
 800346c:	6033      	str	r3, [r6, #0]
 800346e:	2000      	movs	r0, #0
 8003470:	bd70      	pop	{r4, r5, r6, pc}
 8003472:	f000 f87d 	bl	8003570 <__malloc_lock>
 8003476:	4a21      	ldr	r2, [pc, #132]	; (80034fc <_malloc_r+0xac>)
 8003478:	6814      	ldr	r4, [r2, #0]
 800347a:	4621      	mov	r1, r4
 800347c:	b991      	cbnz	r1, 80034a4 <_malloc_r+0x54>
 800347e:	4c20      	ldr	r4, [pc, #128]	; (8003500 <_malloc_r+0xb0>)
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	b91b      	cbnz	r3, 800348c <_malloc_r+0x3c>
 8003484:	4630      	mov	r0, r6
 8003486:	f000 f863 	bl	8003550 <_sbrk_r>
 800348a:	6020      	str	r0, [r4, #0]
 800348c:	4629      	mov	r1, r5
 800348e:	4630      	mov	r0, r6
 8003490:	f000 f85e 	bl	8003550 <_sbrk_r>
 8003494:	1c43      	adds	r3, r0, #1
 8003496:	d124      	bne.n	80034e2 <_malloc_r+0x92>
 8003498:	230c      	movs	r3, #12
 800349a:	4630      	mov	r0, r6
 800349c:	6033      	str	r3, [r6, #0]
 800349e:	f000 f868 	bl	8003572 <__malloc_unlock>
 80034a2:	e7e4      	b.n	800346e <_malloc_r+0x1e>
 80034a4:	680b      	ldr	r3, [r1, #0]
 80034a6:	1b5b      	subs	r3, r3, r5
 80034a8:	d418      	bmi.n	80034dc <_malloc_r+0x8c>
 80034aa:	2b0b      	cmp	r3, #11
 80034ac:	d90f      	bls.n	80034ce <_malloc_r+0x7e>
 80034ae:	600b      	str	r3, [r1, #0]
 80034b0:	18cc      	adds	r4, r1, r3
 80034b2:	50cd      	str	r5, [r1, r3]
 80034b4:	4630      	mov	r0, r6
 80034b6:	f000 f85c 	bl	8003572 <__malloc_unlock>
 80034ba:	f104 000b 	add.w	r0, r4, #11
 80034be:	1d23      	adds	r3, r4, #4
 80034c0:	f020 0007 	bic.w	r0, r0, #7
 80034c4:	1ac3      	subs	r3, r0, r3
 80034c6:	d0d3      	beq.n	8003470 <_malloc_r+0x20>
 80034c8:	425a      	negs	r2, r3
 80034ca:	50e2      	str	r2, [r4, r3]
 80034cc:	e7d0      	b.n	8003470 <_malloc_r+0x20>
 80034ce:	684b      	ldr	r3, [r1, #4]
 80034d0:	428c      	cmp	r4, r1
 80034d2:	bf16      	itet	ne
 80034d4:	6063      	strne	r3, [r4, #4]
 80034d6:	6013      	streq	r3, [r2, #0]
 80034d8:	460c      	movne	r4, r1
 80034da:	e7eb      	b.n	80034b4 <_malloc_r+0x64>
 80034dc:	460c      	mov	r4, r1
 80034de:	6849      	ldr	r1, [r1, #4]
 80034e0:	e7cc      	b.n	800347c <_malloc_r+0x2c>
 80034e2:	1cc4      	adds	r4, r0, #3
 80034e4:	f024 0403 	bic.w	r4, r4, #3
 80034e8:	42a0      	cmp	r0, r4
 80034ea:	d005      	beq.n	80034f8 <_malloc_r+0xa8>
 80034ec:	1a21      	subs	r1, r4, r0
 80034ee:	4630      	mov	r0, r6
 80034f0:	f000 f82e 	bl	8003550 <_sbrk_r>
 80034f4:	3001      	adds	r0, #1
 80034f6:	d0cf      	beq.n	8003498 <_malloc_r+0x48>
 80034f8:	6025      	str	r5, [r4, #0]
 80034fa:	e7db      	b.n	80034b4 <_malloc_r+0x64>
 80034fc:	20000090 	.word	0x20000090
 8003500:	20000094 	.word	0x20000094

08003504 <_realloc_r>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	4607      	mov	r7, r0
 8003508:	4614      	mov	r4, r2
 800350a:	460e      	mov	r6, r1
 800350c:	b921      	cbnz	r1, 8003518 <_realloc_r+0x14>
 800350e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003512:	4611      	mov	r1, r2
 8003514:	f7ff bf9c 	b.w	8003450 <_malloc_r>
 8003518:	b922      	cbnz	r2, 8003524 <_realloc_r+0x20>
 800351a:	f7ff ff4d 	bl	80033b8 <_free_r>
 800351e:	4625      	mov	r5, r4
 8003520:	4628      	mov	r0, r5
 8003522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003524:	f000 f826 	bl	8003574 <_malloc_usable_size_r>
 8003528:	42a0      	cmp	r0, r4
 800352a:	d20f      	bcs.n	800354c <_realloc_r+0x48>
 800352c:	4621      	mov	r1, r4
 800352e:	4638      	mov	r0, r7
 8003530:	f7ff ff8e 	bl	8003450 <_malloc_r>
 8003534:	4605      	mov	r5, r0
 8003536:	2800      	cmp	r0, #0
 8003538:	d0f2      	beq.n	8003520 <_realloc_r+0x1c>
 800353a:	4631      	mov	r1, r6
 800353c:	4622      	mov	r2, r4
 800353e:	f7ff ff17 	bl	8003370 <memcpy>
 8003542:	4631      	mov	r1, r6
 8003544:	4638      	mov	r0, r7
 8003546:	f7ff ff37 	bl	80033b8 <_free_r>
 800354a:	e7e9      	b.n	8003520 <_realloc_r+0x1c>
 800354c:	4635      	mov	r5, r6
 800354e:	e7e7      	b.n	8003520 <_realloc_r+0x1c>

08003550 <_sbrk_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	2300      	movs	r3, #0
 8003554:	4c05      	ldr	r4, [pc, #20]	; (800356c <_sbrk_r+0x1c>)
 8003556:	4605      	mov	r5, r0
 8003558:	4608      	mov	r0, r1
 800355a:	6023      	str	r3, [r4, #0]
 800355c:	f7fd faea 	bl	8000b34 <_sbrk>
 8003560:	1c43      	adds	r3, r0, #1
 8003562:	d102      	bne.n	800356a <_sbrk_r+0x1a>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	b103      	cbz	r3, 800356a <_sbrk_r+0x1a>
 8003568:	602b      	str	r3, [r5, #0]
 800356a:	bd38      	pop	{r3, r4, r5, pc}
 800356c:	20000194 	.word	0x20000194

08003570 <__malloc_lock>:
 8003570:	4770      	bx	lr

08003572 <__malloc_unlock>:
 8003572:	4770      	bx	lr

08003574 <_malloc_usable_size_r>:
 8003574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003578:	1f18      	subs	r0, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	bfbc      	itt	lt
 800357e:	580b      	ldrlt	r3, [r1, r0]
 8003580:	18c0      	addlt	r0, r0, r3
 8003582:	4770      	bx	lr

08003584 <_init>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	bf00      	nop
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr

08003590 <_fini>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr
